
OTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000217c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002288  08002288  00012288  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080022b0  080022b0  000122b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080022b4  080022b4  000122b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080022b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002e8  2000000c  080022c4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002f4  080022c4  000202f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d35b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000359d  00000000  00000000  0003d390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b899  00000000  00000000  0004092d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000da0  00000000  00000000  0004c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001400  00000000  00000000  0004cf68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008de8  00000000  00000000  0004e368  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005015  00000000  00000000  00057150  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005c165  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002aa8  00000000  00000000  0005c1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002270 	.word	0x08002270

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002270 	.word	0x08002270

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fadc 	bl	8000720 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fa92 	bl	80006a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fa6b 	bl	800067c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fde6 	bl	8001d7c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80001dc:	6803      	ldr	r3, [r0, #0]
 80001de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80001e0:	4770      	bx	lr
	...

080001e4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001e4:	2300      	movs	r3, #0
{ 
 80001e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001e8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001ea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d074      	beq.n	80002dc <HAL_ADC_ConfigChannel+0xf8>
 80001f2:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001f4:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001f6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80001fa:	2d06      	cmp	r5, #6
 80001fc:	6802      	ldr	r2, [r0, #0]
 80001fe:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000202:	680c      	ldr	r4, [r1, #0]
 8000204:	d825      	bhi.n	8000252 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000206:	442b      	add	r3, r5
 8000208:	251f      	movs	r5, #31
 800020a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800020c:	3b05      	subs	r3, #5
 800020e:	409d      	lsls	r5, r3
 8000210:	ea26 0505 	bic.w	r5, r6, r5
 8000214:	fa04 f303 	lsl.w	r3, r4, r3
 8000218:	432b      	orrs	r3, r5
 800021a:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800021c:	2c09      	cmp	r4, #9
 800021e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000222:	688d      	ldr	r5, [r1, #8]
 8000224:	d92f      	bls.n	8000286 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000226:	2607      	movs	r6, #7
 8000228:	4423      	add	r3, r4
 800022a:	68d1      	ldr	r1, [r2, #12]
 800022c:	3b1e      	subs	r3, #30
 800022e:	409e      	lsls	r6, r3
 8000230:	ea21 0106 	bic.w	r1, r1, r6
 8000234:	fa05 f303 	lsl.w	r3, r5, r3
 8000238:	430b      	orrs	r3, r1
 800023a:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800023c:	f1a4 0310 	sub.w	r3, r4, #16
 8000240:	2b01      	cmp	r3, #1
 8000242:	d92b      	bls.n	800029c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000244:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000246:	2200      	movs	r2, #0
 8000248:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800024c:	4618      	mov	r0, r3
 800024e:	b002      	add	sp, #8
 8000250:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000252:	2d0c      	cmp	r5, #12
 8000254:	d80b      	bhi.n	800026e <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000256:	442b      	add	r3, r5
 8000258:	251f      	movs	r5, #31
 800025a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800025c:	3b23      	subs	r3, #35	; 0x23
 800025e:	409d      	lsls	r5, r3
 8000260:	ea26 0505 	bic.w	r5, r6, r5
 8000264:	fa04 f303 	lsl.w	r3, r4, r3
 8000268:	432b      	orrs	r3, r5
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
 800026c:	e7d6      	b.n	800021c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800026e:	442b      	add	r3, r5
 8000270:	251f      	movs	r5, #31
 8000272:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000274:	3b41      	subs	r3, #65	; 0x41
 8000276:	409d      	lsls	r5, r3
 8000278:	ea26 0505 	bic.w	r5, r6, r5
 800027c:	fa04 f303 	lsl.w	r3, r4, r3
 8000280:	432b      	orrs	r3, r5
 8000282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000284:	e7ca      	b.n	800021c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000286:	2607      	movs	r6, #7
 8000288:	6911      	ldr	r1, [r2, #16]
 800028a:	4423      	add	r3, r4
 800028c:	409e      	lsls	r6, r3
 800028e:	ea21 0106 	bic.w	r1, r1, r6
 8000292:	fa05 f303 	lsl.w	r3, r5, r3
 8000296:	430b      	orrs	r3, r1
 8000298:	6113      	str	r3, [r2, #16]
 800029a:	e7cf      	b.n	800023c <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <HAL_ADC_ConfigChannel+0xfc>)
 800029e:	429a      	cmp	r2, r3
 80002a0:	d116      	bne.n	80002d0 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002a2:	6893      	ldr	r3, [r2, #8]
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	d4cd      	bmi.n	8000244 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a8:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002aa:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002b0:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002b2:	d1c7      	bne.n	8000244 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <HAL_ADC_ConfigChannel+0x100>)
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <HAL_ADC_ConfigChannel+0x104>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80002be:	230a      	movs	r3, #10
 80002c0:	4353      	muls	r3, r2
            wait_loop_index--;
 80002c2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002c4:	9b01      	ldr	r3, [sp, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0bc      	beq.n	8000244 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002ca:	9b01      	ldr	r3, [sp, #4]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	e7f8      	b.n	80002c2 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002d8:	2301      	movs	r3, #1
 80002da:	e7b4      	b.n	8000246 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002dc:	2302      	movs	r3, #2
 80002de:	e7b5      	b.n	800024c <HAL_ADC_ConfigChannel+0x68>
 80002e0:	40012400 	.word	0x40012400
 80002e4:	20000008 	.word	0x20000008
 80002e8:	000f4240 	.word	0x000f4240

080002ec <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80002ec:	2300      	movs	r3, #0
{
 80002ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80002f0:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002f2:	6803      	ldr	r3, [r0, #0]
{
 80002f4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002f6:	689a      	ldr	r2, [r3, #8]
 80002f8:	07d2      	lsls	r2, r2, #31
 80002fa:	d502      	bpl.n	8000302 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80002fc:	2000      	movs	r0, #0
}
 80002fe:	b002      	add	sp, #8
 8000300:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	f042 0201 	orr.w	r2, r2, #1
 8000308:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800030a:	4b12      	ldr	r3, [pc, #72]	; (8000354 <ADC_Enable+0x68>)
 800030c:	4a12      	ldr	r2, [pc, #72]	; (8000358 <ADC_Enable+0x6c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000314:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000316:	9b01      	ldr	r3, [sp, #4]
 8000318:	b9c3      	cbnz	r3, 800034c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800031a:	f7ff ff59 	bl	80001d0 <HAL_GetTick>
 800031e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000320:	6823      	ldr	r3, [r4, #0]
 8000322:	689d      	ldr	r5, [r3, #8]
 8000324:	f015 0501 	ands.w	r5, r5, #1
 8000328:	d1e8      	bne.n	80002fc <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800032a:	f7ff ff51 	bl	80001d0 <HAL_GetTick>
 800032e:	1b80      	subs	r0, r0, r6
 8000330:	2802      	cmp	r0, #2
 8000332:	d9f5      	bls.n	8000320 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000334:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000336:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000342:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800034a:	e7d8      	b.n	80002fe <ADC_Enable+0x12>
      wait_loop_index--;
 800034c:	9b01      	ldr	r3, [sp, #4]
 800034e:	3b01      	subs	r3, #1
 8000350:	e7e0      	b.n	8000314 <ADC_Enable+0x28>
 8000352:	bf00      	nop
 8000354:	20000008 	.word	0x20000008
 8000358:	000f4240 	.word	0x000f4240

0800035c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800035c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000360:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000362:	2b01      	cmp	r3, #1
{
 8000364:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000366:	d054      	beq.n	8000412 <HAL_ADC_Start+0xb6>
 8000368:	2301      	movs	r3, #1
 800036a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800036e:	f7ff ffbd 	bl	80002ec <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000372:	2800      	cmp	r0, #0
 8000374:	d149      	bne.n	800040a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8000376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000378:	4a27      	ldr	r2, [pc, #156]	; (8000418 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800037a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800037e:	f023 0301 	bic.w	r3, r3, #1
 8000382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000386:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000388:	6823      	ldr	r3, [r4, #0]
 800038a:	4293      	cmp	r3, r2
 800038c:	d104      	bne.n	8000398 <HAL_ADC_Start+0x3c>
 800038e:	4923      	ldr	r1, [pc, #140]	; (800041c <HAL_ADC_Start+0xc0>)
 8000390:	684a      	ldr	r2, [r1, #4]
 8000392:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000396:	d12e      	bne.n	80003f6 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000398:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800039a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800039e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003a0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80003a2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80003a4:	bf41      	itttt	mi
 80003a6:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80003a8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80003ac:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80003b0:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80003b8:	bf1c      	itt	ne
 80003ba:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80003bc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80003c0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80003c8:	f06f 0202 	mvn.w	r2, #2
 80003cc:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80003ce:	689a      	ldr	r2, [r3, #8]
 80003d0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80003d4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80003d8:	d113      	bne.n	8000402 <HAL_ADC_Start+0xa6>
 80003da:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <HAL_ADC_Start+0xbc>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d105      	bne.n	80003ec <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80003e0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80003e4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80003e6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80003ea:	d10a      	bne.n	8000402 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80003ec:	689a      	ldr	r2, [r3, #8]
 80003ee:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80003fc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80003fe:	684a      	ldr	r2, [r1, #4]
 8000400:	e7cf      	b.n	80003a2 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000402:	689a      	ldr	r2, [r3, #8]
 8000404:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000408:	e7f3      	b.n	80003f2 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800040a:	2300      	movs	r3, #0
 800040c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000410:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000412:	2002      	movs	r0, #2
}
 8000414:	bd10      	pop	{r4, pc}
 8000416:	bf00      	nop
 8000418:	40012800 	.word	0x40012800
 800041c:	40012400 	.word	0x40012400

08000420 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000420:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000422:	6803      	ldr	r3, [r0, #0]
{
 8000424:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000426:	689a      	ldr	r2, [r3, #8]
 8000428:	07d2      	lsls	r2, r2, #31
 800042a:	d401      	bmi.n	8000430 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800042c:	2000      	movs	r0, #0
 800042e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f022 0201 	bic.w	r2, r2, #1
 8000436:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000438:	f7ff feca 	bl	80001d0 <HAL_GetTick>
 800043c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800043e:	6823      	ldr	r3, [r4, #0]
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	07db      	lsls	r3, r3, #31
 8000444:	d5f2      	bpl.n	800042c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000446:	f7ff fec3 	bl	80001d0 <HAL_GetTick>
 800044a:	1b40      	subs	r0, r0, r5
 800044c:	2802      	cmp	r0, #2
 800044e:	d9f6      	bls.n	800043e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000452:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000454:	f043 0310 	orr.w	r3, r3, #16
 8000458:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800045a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000462:	bd38      	pop	{r3, r4, r5, pc}

08000464 <HAL_ADC_Init>:
{
 8000464:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000466:	4604      	mov	r4, r0
 8000468:	2800      	cmp	r0, #0
 800046a:	d071      	beq.n	8000550 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800046c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800046e:	b923      	cbnz	r3, 800047a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000470:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000472:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000476:	f001 fcc7 	bl	8001e08 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800047a:	4620      	mov	r0, r4
 800047c:	f7ff ffd0 	bl	8000420 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000480:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000482:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000488:	d164      	bne.n	8000554 <HAL_ADC_Init+0xf0>
 800048a:	2800      	cmp	r0, #0
 800048c:	d162      	bne.n	8000554 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800048e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000494:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000496:	f023 0302 	bic.w	r3, r3, #2
 800049a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800049e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004a0:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80004a2:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80004a4:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004a6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80004aa:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004ae:	d038      	beq.n	8000522 <HAL_ADC_Init+0xbe>
 80004b0:	2901      	cmp	r1, #1
 80004b2:	bf14      	ite	ne
 80004b4:	4606      	movne	r6, r0
 80004b6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004ba:	6965      	ldr	r5, [r4, #20]
 80004bc:	2d01      	cmp	r5, #1
 80004be:	d107      	bne.n	80004d0 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d130      	bne.n	8000526 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80004c4:	69a3      	ldr	r3, [r4, #24]
 80004c6:	3b01      	subs	r3, #1
 80004c8:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80004cc:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80004d0:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004d2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80004d6:	685d      	ldr	r5, [r3, #4]
 80004d8:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80004dc:	ea45 0506 	orr.w	r5, r5, r6
 80004e0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80004e2:	689e      	ldr	r6, [r3, #8]
 80004e4:	4d1d      	ldr	r5, [pc, #116]	; (800055c <HAL_ADC_Init+0xf8>)
 80004e6:	ea05 0506 	and.w	r5, r5, r6
 80004ea:	ea45 0502 	orr.w	r5, r5, r2
 80004ee:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004f0:	d001      	beq.n	80004f6 <HAL_ADC_Init+0x92>
 80004f2:	2901      	cmp	r1, #1
 80004f4:	d120      	bne.n	8000538 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80004f6:	6921      	ldr	r1, [r4, #16]
 80004f8:	3901      	subs	r1, #1
 80004fa:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80004fc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80004fe:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000502:	4329      	orrs	r1, r5
 8000504:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000506:	6899      	ldr	r1, [r3, #8]
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <HAL_ADC_Init+0xfc>)
 800050a:	400b      	ands	r3, r1
 800050c:	429a      	cmp	r2, r3
 800050e:	d115      	bne.n	800053c <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000510:	2300      	movs	r3, #0
 8000512:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000516:	f023 0303 	bic.w	r3, r3, #3
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000520:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000522:	460e      	mov	r6, r1
 8000524:	e7c9      	b.n	80004ba <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000526:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000528:	f043 0320 	orr.w	r3, r3, #32
 800052c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800052e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000536:	e7cb      	b.n	80004d0 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000538:	2100      	movs	r1, #0
 800053a:	e7df      	b.n	80004fc <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 800053c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800053e:	f023 0312 	bic.w	r3, r3, #18
 8000542:	f043 0310 	orr.w	r3, r3, #16
 8000546:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000550:	2001      	movs	r0, #1
}
 8000552:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000554:	f043 0310 	orr.w	r3, r3, #16
 8000558:	62a3      	str	r3, [r4, #40]	; 0x28
 800055a:	e7f9      	b.n	8000550 <HAL_ADC_Init+0xec>
 800055c:	ffe1f7fd 	.word	0xffe1f7fd
 8000560:	ff1f0efe 	.word	0xff1f0efe

08000564 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000564:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0U;
  uint32_t tmp_mcr = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000566:	4604      	mov	r4, r0
 8000568:	2800      	cmp	r0, #0
 800056a:	d069      	beq.n	8000640 <HAL_CAN_Init+0xdc>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 800056c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000570:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000574:	b91b      	cbnz	r3, 800057e <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000576:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 800057a:	f001 fc75 	bl	8001e68 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 800057e:	2302      	movs	r3, #2
 8000580:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	f022 0202 	bic.w	r2, r2, #2
 800058c:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	f042 0201 	orr.w	r2, r2, #1
 8000594:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 8000596:	f7ff fe1b 	bl	80001d0 <HAL_GetTick>
 800059a:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800059c:	6822      	ldr	r2, [r4, #0]
 800059e:	6855      	ldr	r5, [r2, #4]
 80005a0:	f015 0501 	ands.w	r5, r5, #1
 80005a4:	d04e      	beq.n	8000644 <HAL_CAN_Init+0xe0>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80005a6:	6853      	ldr	r3, [r2, #4]
 80005a8:	07d9      	lsls	r1, r3, #31
 80005aa:	d546      	bpl.n	800063a <HAL_CAN_Init+0xd6>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80005ac:	69a3      	ldr	r3, [r4, #24]
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80005ae:	69e1      	ldr	r1, [r4, #28]
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	bf0c      	ite	eq
 80005b4:	2380      	moveq	r3, #128	; 0x80
 80005b6:	2300      	movne	r3, #0
    if (hcan->Init.ABOM == ENABLE)
 80005b8:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80005ba:	6a21      	ldr	r1, [r4, #32]
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 80005bc:	bf0c      	ite	eq
 80005be:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 80005c2:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 80005c6:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
    }
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80005c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 80005ca:	bf0c      	ite	eq
 80005cc:	f043 0320 	orreq.w	r3, r3, #32
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 80005d0:	f023 0320 	bicne.w	r3, r3, #32
    if (hcan->Init.NART == ENABLE)
 80005d4:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80005d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 80005d8:	bf0c      	ite	eq
 80005da:	f043 0310 	orreq.w	r3, r3, #16
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 80005de:	f023 0310 	bicne.w	r3, r3, #16
    if (hcan->Init.RFLM == ENABLE)
 80005e2:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
    }
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 80005e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 80005e6:	bf0c      	ite	eq
 80005e8:	f043 0308 	orreq.w	r3, r3, #8
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 80005ec:	f023 0308 	bicne.w	r3, r3, #8
    if (hcan->Init.TXFP == ENABLE)
 80005f0:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 80005f2:	6811      	ldr	r1, [r2, #0]
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 80005f4:	bf0c      	ite	eq
 80005f6:	f043 0304 	orreq.w	r3, r3, #4
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 80005fa:	f023 0304 	bicne.w	r3, r3, #4
    MODIFY_REG(hcan->Instance->MCR,
 80005fe:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 8000602:	430b      	orrs	r3, r1
 8000604:	6013      	str	r3, [r2, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000606:	68e1      	ldr	r1, [r4, #12]
 8000608:	68a3      	ldr	r3, [r4, #8]
 800060a:	430b      	orrs	r3, r1
 800060c:	6921      	ldr	r1, [r4, #16]
 800060e:	430b      	orrs	r3, r1
 8000610:	6961      	ldr	r1, [r4, #20]
 8000612:	430b      	orrs	r3, r1
 8000614:	6861      	ldr	r1, [r4, #4]
 8000616:	3901      	subs	r1, #1
 8000618:	430b      	orrs	r3, r1
 800061a:	61d3      	str	r3, [r2, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U)));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800061c:	6813      	ldr	r3, [r2, #0]
 800061e:	f023 0301 	bic.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 8000624:	f7ff fdd4 	bl	80001d0 <HAL_GetTick>
 8000628:	4605      	mov	r5, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	07d2      	lsls	r2, r2, #31
 8000630:	d413      	bmi.n	800065a <HAL_CAN_Init+0xf6>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000632:	6858      	ldr	r0, [r3, #4]
 8000634:	f010 0001 	ands.w	r0, r0, #1
 8000638:	d01b      	beq.n	8000672 <HAL_CAN_Init+0x10e>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 800063a:	2304      	movs	r3, #4
 800063c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 8000640:	2001      	movs	r0, #1
 8000642:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000644:	f7ff fdc4 	bl	80001d0 <HAL_GetTick>
 8000648:	1b80      	subs	r0, r0, r6
 800064a:	280a      	cmp	r0, #10
 800064c:	d9a6      	bls.n	800059c <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 800064e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8000650:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000654:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 8000658:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800065a:	f7ff fdb9 	bl	80001d0 <HAL_GetTick>
 800065e:	1b40      	subs	r0, r0, r5
 8000660:	280a      	cmp	r0, #10
 8000662:	d9e2      	bls.n	800062a <HAL_CAN_Init+0xc6>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000664:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 8000666:	2300      	movs	r3, #0
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000668:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_UNLOCK(hcan);
 800066c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000670:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 8000672:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000674:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8000676:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  }
}
 800067a:	bd70      	pop	{r4, r5, r6, pc}

0800067c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800067e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000682:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800068a:	041b      	lsls	r3, r3, #16
 800068c:	0c1b      	lsrs	r3, r3, #16
 800068e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000696:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000698:	60d3      	str	r3, [r2, #12]
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006a2:	b530      	push	{r4, r5, lr}
 80006a4:	68dc      	ldr	r4, [r3, #12]
 80006a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	bf28      	it	cs
 80006b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006bc:	bf98      	it	ls
 80006be:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	fa05 f303 	lsl.w	r3, r5, r3
 80006c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c8:	bf88      	it	hi
 80006ca:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	4019      	ands	r1, r3
 80006ce:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d0:	fa05 f404 	lsl.w	r4, r5, r4
 80006d4:	3c01      	subs	r4, #1
 80006d6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006da:	ea42 0201 	orr.w	r2, r2, r1
 80006de:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	bfaf      	iteee	ge
 80006e4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	4b06      	ldrlt	r3, [pc, #24]	; (8000704 <HAL_NVIC_SetPriority+0x64>)
 80006ea:	f000 000f 	andlt.w	r0, r0, #15
 80006ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	bfa5      	ittet	ge
 80006f2:	b2d2      	uxtbge	r2, r2
 80006f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	e000ed00 	.word	0xe000ed00
 8000704:	e000ed14 	.word	0xe000ed14

08000708 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000708:	2301      	movs	r3, #1
 800070a:	0942      	lsrs	r2, r0, #5
 800070c:	f000 001f 	and.w	r0, r0, #31
 8000710:	fa03 f000 	lsl.w	r0, r3, r0
 8000714:	4b01      	ldr	r3, [pc, #4]	; (800071c <HAL_NVIC_EnableIRQ+0x14>)
 8000716:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100

08000720 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	3801      	subs	r0, #1
 8000722:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000726:	d20a      	bcs.n	800073e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800074e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	bf0c      	ite	eq
 8000754:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000758:	f022 0204 	bicne.w	r2, r2, #4
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	4770      	bx	lr
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000764:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000766:	f001 faf5 	bl	8001d54 <HAL_SYSTICK_Callback>
 800076a:	bd08      	pop	{r3, pc}

0800076c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800076c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000770:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000772:	2b02      	cmp	r3, #2
 8000774:	d003      	beq.n	800077e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000776:	2304      	movs	r3, #4
 8000778:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800077a:	2001      	movs	r0, #1
 800077c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800077e:	6803      	ldr	r3, [r0, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	f022 020e 	bic.w	r2, r2, #14
 8000786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	f022 0201 	bic.w	r2, r2, #1
 800078e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000790:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <HAL_DMA_Abort_IT+0x88>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d01f      	beq.n	80007d6 <HAL_DMA_Abort_IT+0x6a>
 8000796:	3214      	adds	r2, #20
 8000798:	4293      	cmp	r3, r2
 800079a:	d01e      	beq.n	80007da <HAL_DMA_Abort_IT+0x6e>
 800079c:	3214      	adds	r2, #20
 800079e:	4293      	cmp	r3, r2
 80007a0:	d01d      	beq.n	80007de <HAL_DMA_Abort_IT+0x72>
 80007a2:	3214      	adds	r2, #20
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d01d      	beq.n	80007e4 <HAL_DMA_Abort_IT+0x78>
 80007a8:	3214      	adds	r2, #20
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d01d      	beq.n	80007ea <HAL_DMA_Abort_IT+0x7e>
 80007ae:	3214      	adds	r2, #20
 80007b0:	4293      	cmp	r3, r2
 80007b2:	bf0c      	ite	eq
 80007b4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80007b8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80007bc:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007be:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80007c0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80007c2:	2301      	movs	r3, #1
 80007c4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80007c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80007ca:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80007ce:	b17b      	cbz	r3, 80007f0 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80007d0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80007d2:	4620      	mov	r0, r4
 80007d4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80007d6:	2301      	movs	r3, #1
 80007d8:	e7f0      	b.n	80007bc <HAL_DMA_Abort_IT+0x50>
 80007da:	2310      	movs	r3, #16
 80007dc:	e7ee      	b.n	80007bc <HAL_DMA_Abort_IT+0x50>
 80007de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e2:	e7eb      	b.n	80007bc <HAL_DMA_Abort_IT+0x50>
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	e7e8      	b.n	80007bc <HAL_DMA_Abort_IT+0x50>
 80007ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ee:	e7e5      	b.n	80007bc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80007f0:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80007f2:	bd10      	pop	{r4, pc}
 80007f4:	40020008 	.word	0x40020008
 80007f8:	40020000 	.word	0x40020000

080007fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000800:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000802:	4616      	mov	r6, r2
 8000804:	4b65      	ldr	r3, [pc, #404]	; (800099c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000806:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80009ac <HAL_GPIO_Init+0x1b0>
 800080a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80009b0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800080e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000812:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000814:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000818:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800081c:	45a0      	cmp	r8, r4
 800081e:	d17f      	bne.n	8000920 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000820:	684d      	ldr	r5, [r1, #4]
 8000822:	2d12      	cmp	r5, #18
 8000824:	f000 80af 	beq.w	8000986 <HAL_GPIO_Init+0x18a>
 8000828:	f200 8088 	bhi.w	800093c <HAL_GPIO_Init+0x140>
 800082c:	2d02      	cmp	r5, #2
 800082e:	f000 80a7 	beq.w	8000980 <HAL_GPIO_Init+0x184>
 8000832:	d87c      	bhi.n	800092e <HAL_GPIO_Init+0x132>
 8000834:	2d00      	cmp	r5, #0
 8000836:	f000 808e 	beq.w	8000956 <HAL_GPIO_Init+0x15a>
 800083a:	2d01      	cmp	r5, #1
 800083c:	f000 809e 	beq.w	800097c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000840:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000844:	2cff      	cmp	r4, #255	; 0xff
 8000846:	bf93      	iteet	ls
 8000848:	4682      	movls	sl, r0
 800084a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800084e:	3d08      	subhi	r5, #8
 8000850:	f8d0 b000 	ldrls.w	fp, [r0]
 8000854:	bf92      	itee	ls
 8000856:	00b5      	lslls	r5, r6, #2
 8000858:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800085c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800085e:	fa09 f805 	lsl.w	r8, r9, r5
 8000862:	ea2b 0808 	bic.w	r8, fp, r8
 8000866:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800086a:	bf88      	it	hi
 800086c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000870:	ea48 0505 	orr.w	r5, r8, r5
 8000874:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000878:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800087c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000880:	d04e      	beq.n	8000920 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000882:	4d47      	ldr	r5, [pc, #284]	; (80009a0 <HAL_GPIO_Init+0x1a4>)
 8000884:	4f46      	ldr	r7, [pc, #280]	; (80009a0 <HAL_GPIO_Init+0x1a4>)
 8000886:	69ad      	ldr	r5, [r5, #24]
 8000888:	f026 0803 	bic.w	r8, r6, #3
 800088c:	f045 0501 	orr.w	r5, r5, #1
 8000890:	61bd      	str	r5, [r7, #24]
 8000892:	69bd      	ldr	r5, [r7, #24]
 8000894:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000898:	f005 0501 	and.w	r5, r5, #1
 800089c:	9501      	str	r5, [sp, #4]
 800089e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008a2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008a6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80008ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008b0:	fa09 f90b 	lsl.w	r9, r9, fp
 80008b4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b8:	4d3a      	ldr	r5, [pc, #232]	; (80009a4 <HAL_GPIO_Init+0x1a8>)
 80008ba:	42a8      	cmp	r0, r5
 80008bc:	d068      	beq.n	8000990 <HAL_GPIO_Init+0x194>
 80008be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008c2:	42a8      	cmp	r0, r5
 80008c4:	d066      	beq.n	8000994 <HAL_GPIO_Init+0x198>
 80008c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ca:	42a8      	cmp	r0, r5
 80008cc:	d064      	beq.n	8000998 <HAL_GPIO_Init+0x19c>
 80008ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008d2:	42a8      	cmp	r0, r5
 80008d4:	bf0c      	ite	eq
 80008d6:	2503      	moveq	r5, #3
 80008d8:	2504      	movne	r5, #4
 80008da:	fa05 f50b 	lsl.w	r5, r5, fp
 80008de:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80008e2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008e6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008e8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80008ec:	bf14      	ite	ne
 80008ee:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008f0:	43a5      	biceq	r5, r4
 80008f2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008f4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008f6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80008fa:	bf14      	ite	ne
 80008fc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008fe:	43a5      	biceq	r5, r4
 8000900:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000902:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000904:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000908:	bf14      	ite	ne
 800090a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800090c:	43a5      	biceq	r5, r4
 800090e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000910:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000912:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000916:	bf14      	ite	ne
 8000918:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800091a:	ea25 0404 	biceq.w	r4, r5, r4
 800091e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000920:	3601      	adds	r6, #1
 8000922:	2e10      	cmp	r6, #16
 8000924:	f47f af73 	bne.w	800080e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000928:	b003      	add	sp, #12
 800092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800092e:	2d03      	cmp	r5, #3
 8000930:	d022      	beq.n	8000978 <HAL_GPIO_Init+0x17c>
 8000932:	2d11      	cmp	r5, #17
 8000934:	d184      	bne.n	8000840 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000936:	68ca      	ldr	r2, [r1, #12]
 8000938:	3204      	adds	r2, #4
          break;
 800093a:	e781      	b.n	8000840 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800093c:	4f1a      	ldr	r7, [pc, #104]	; (80009a8 <HAL_GPIO_Init+0x1ac>)
 800093e:	42bd      	cmp	r5, r7
 8000940:	d009      	beq.n	8000956 <HAL_GPIO_Init+0x15a>
 8000942:	d812      	bhi.n	800096a <HAL_GPIO_Init+0x16e>
 8000944:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80009b4 <HAL_GPIO_Init+0x1b8>
 8000948:	454d      	cmp	r5, r9
 800094a:	d004      	beq.n	8000956 <HAL_GPIO_Init+0x15a>
 800094c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000950:	454d      	cmp	r5, r9
 8000952:	f47f af75 	bne.w	8000840 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000956:	688a      	ldr	r2, [r1, #8]
 8000958:	b1c2      	cbz	r2, 800098c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800095a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800095c:	bf0c      	ite	eq
 800095e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000962:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000966:	2208      	movs	r2, #8
 8000968:	e76a      	b.n	8000840 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800096a:	4575      	cmp	r5, lr
 800096c:	d0f3      	beq.n	8000956 <HAL_GPIO_Init+0x15a>
 800096e:	4565      	cmp	r5, ip
 8000970:	d0f1      	beq.n	8000956 <HAL_GPIO_Init+0x15a>
 8000972:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80009b8 <HAL_GPIO_Init+0x1bc>
 8000976:	e7eb      	b.n	8000950 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000978:	2200      	movs	r2, #0
 800097a:	e761      	b.n	8000840 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800097c:	68ca      	ldr	r2, [r1, #12]
          break;
 800097e:	e75f      	b.n	8000840 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000980:	68ca      	ldr	r2, [r1, #12]
 8000982:	3208      	adds	r2, #8
          break;
 8000984:	e75c      	b.n	8000840 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000986:	68ca      	ldr	r2, [r1, #12]
 8000988:	320c      	adds	r2, #12
          break;
 800098a:	e759      	b.n	8000840 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800098c:	2204      	movs	r2, #4
 800098e:	e757      	b.n	8000840 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000990:	2500      	movs	r5, #0
 8000992:	e7a2      	b.n	80008da <HAL_GPIO_Init+0xde>
 8000994:	2501      	movs	r5, #1
 8000996:	e7a0      	b.n	80008da <HAL_GPIO_Init+0xde>
 8000998:	2502      	movs	r5, #2
 800099a:	e79e      	b.n	80008da <HAL_GPIO_Init+0xde>
 800099c:	40010400 	.word	0x40010400
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010800 	.word	0x40010800
 80009a8:	10210000 	.word	0x10210000
 80009ac:	10310000 	.word	0x10310000
 80009b0:	10320000 	.word	0x10320000
 80009b4:	10110000 	.word	0x10110000
 80009b8:	10220000 	.word	0x10220000

080009bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009bc:	b10a      	cbz	r2, 80009c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80009be:	6101      	str	r1, [r0, #16]
 80009c0:	4770      	bx	lr
 80009c2:	0409      	lsls	r1, r1, #16
 80009c4:	e7fb      	b.n	80009be <HAL_GPIO_WritePin+0x2>

080009c6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80009c6:	68c3      	ldr	r3, [r0, #12]
 80009c8:	4059      	eors	r1, r3
 80009ca:	60c1      	str	r1, [r0, #12]
 80009cc:	4770      	bx	lr
	...

080009d0 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80009d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80009d2:	4604      	mov	r4, r0
 80009d4:	b908      	cbnz	r0, 80009da <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80009d6:	2001      	movs	r0, #1
 80009d8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80009da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80009de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009e2:	b91b      	cbnz	r3, 80009ec <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80009e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80009e8:	f001 fa76 	bl	8001ed8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80009ec:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80009ee:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80009f4:	6813      	ldr	r3, [r2, #0]
 80009f6:	f023 0301 	bic.w	r3, r3, #1
 80009fa:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80009fc:	f000 fada 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000a00:	6863      	ldr	r3, [r4, #4]
 8000a02:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <HAL_I2C_Init+0xf0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d830      	bhi.n	8000a6a <HAL_I2C_Init+0x9a>
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <HAL_I2C_Init+0xf4>)
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	d9e3      	bls.n	80009d6 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000a0e:	4a2e      	ldr	r2, [pc, #184]	; (8000ac8 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000a10:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000a12:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000a16:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a18:	3201      	adds	r2, #1
 8000a1a:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a1c:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <HAL_I2C_Init+0xf0>)
 8000a1e:	3801      	subs	r0, #1
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d832      	bhi.n	8000a8a <HAL_I2C_Init+0xba>
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a2a:	1c43      	adds	r3, r0, #1
 8000a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	bf38      	it	cc
 8000a34:	2304      	movcc	r3, #4
 8000a36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a38:	6a22      	ldr	r2, [r4, #32]
 8000a3a:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a3c:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000a42:	68e2      	ldr	r2, [r4, #12]
 8000a44:	6923      	ldr	r3, [r4, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000a4a:	69a2      	ldr	r2, [r4, #24]
 8000a4c:	6963      	ldr	r3, [r4, #20]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000a52:	680b      	ldr	r3, [r1, #0]
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000a5a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a5c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000a5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a62:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a64:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000a68:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_I2C_Init+0xfc>)
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d9b2      	bls.n	80009d6 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000a70:	4d15      	ldr	r5, [pc, #84]	; (8000ac8 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a72:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000a76:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8000a7a:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a7c:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8000a7e:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a80:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000a84:	fbb2 f2f5 	udiv	r2, r2, r5
 8000a88:	e7c6      	b.n	8000a18 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a8a:	68a2      	ldr	r2, [r4, #8]
 8000a8c:	b952      	cbnz	r2, 8000aa4 <HAL_I2C_Init+0xd4>
 8000a8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a92:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a96:	1c43      	adds	r3, r0, #1
 8000a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a9c:	b16b      	cbz	r3, 8000aba <HAL_I2C_Init+0xea>
 8000a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa2:	e7c8      	b.n	8000a36 <HAL_I2C_Init+0x66>
 8000aa4:	2219      	movs	r2, #25
 8000aa6:	4353      	muls	r3, r2
 8000aa8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000aac:	1c43      	adds	r3, r0, #1
 8000aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ab2:	b113      	cbz	r3, 8000aba <HAL_I2C_Init+0xea>
 8000ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab8:	e7bd      	b.n	8000a36 <HAL_I2C_Init+0x66>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e7bb      	b.n	8000a36 <HAL_I2C_Init+0x66>
 8000abe:	bf00      	nop
 8000ac0:	000186a0 	.word	0x000186a0
 8000ac4:	001e847f 	.word	0x001e847f
 8000ac8:	000f4240 	.word	0x000f4240
 8000acc:	003d08ff 	.word	0x003d08ff

08000ad0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad0:	6803      	ldr	r3, [r0, #0]
{
 8000ad2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad6:	07db      	lsls	r3, r3, #31
{
 8000ad8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ada:	d410      	bmi.n	8000afe <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	079f      	lsls	r7, r3, #30
 8000ae0:	d45e      	bmi.n	8000ba0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	0719      	lsls	r1, r3, #28
 8000ae6:	f100 8095 	bmi.w	8000c14 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aea:	682b      	ldr	r3, [r5, #0]
 8000aec:	075a      	lsls	r2, r3, #29
 8000aee:	f100 80bf 	bmi.w	8000c70 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000af2:	69ea      	ldr	r2, [r5, #28]
 8000af4:	2a00      	cmp	r2, #0
 8000af6:	f040 812d 	bne.w	8000d54 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000afa:	2000      	movs	r0, #0
 8000afc:	e014      	b.n	8000b28 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000afe:	4c90      	ldr	r4, [pc, #576]	; (8000d40 <HAL_RCC_OscConfig+0x270>)
 8000b00:	6863      	ldr	r3, [r4, #4]
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d007      	beq.n	8000b1a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	d10c      	bne.n	8000b2e <HAL_RCC_OscConfig+0x5e>
 8000b14:	6863      	ldr	r3, [r4, #4]
 8000b16:	03de      	lsls	r6, r3, #15
 8000b18:	d509      	bpl.n	8000b2e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	039c      	lsls	r4, r3, #14
 8000b1e:	d5dd      	bpl.n	8000adc <HAL_RCC_OscConfig+0xc>
 8000b20:	686b      	ldr	r3, [r5, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1da      	bne.n	8000adc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b26:	2001      	movs	r0, #1
}
 8000b28:	b002      	add	sp, #8
 8000b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b2e:	686b      	ldr	r3, [r5, #4]
 8000b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b34:	d110      	bne.n	8000b58 <HAL_RCC_OscConfig+0x88>
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fb47 	bl	80001d0 <HAL_GetTick>
 8000b42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	0398      	lsls	r0, r3, #14
 8000b48:	d4c8      	bmi.n	8000adc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fb41 	bl	80001d0 <HAL_GetTick>
 8000b4e:	1b80      	subs	r0, r0, r6
 8000b50:	2864      	cmp	r0, #100	; 0x64
 8000b52:	d9f7      	bls.n	8000b44 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000b54:	2003      	movs	r0, #3
 8000b56:	e7e7      	b.n	8000b28 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b58:	b99b      	cbnz	r3, 8000b82 <HAL_RCC_OscConfig+0xb2>
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b60:	6023      	str	r3, [r4, #0]
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b68:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b6a:	f7ff fb31 	bl	80001d0 <HAL_GetTick>
 8000b6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	0399      	lsls	r1, r3, #14
 8000b74:	d5b2      	bpl.n	8000adc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b76:	f7ff fb2b 	bl	80001d0 <HAL_GetTick>
 8000b7a:	1b80      	subs	r0, r0, r6
 8000b7c:	2864      	cmp	r0, #100	; 0x64
 8000b7e:	d9f7      	bls.n	8000b70 <HAL_RCC_OscConfig+0xa0>
 8000b80:	e7e8      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	d103      	bne.n	8000b92 <HAL_RCC_OscConfig+0xc2>
 8000b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8e:	6023      	str	r3, [r4, #0]
 8000b90:	e7d1      	b.n	8000b36 <HAL_RCC_OscConfig+0x66>
 8000b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b96:	6023      	str	r3, [r4, #0]
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9e:	e7cd      	b.n	8000b3c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ba0:	4c67      	ldr	r4, [pc, #412]	; (8000d40 <HAL_RCC_OscConfig+0x270>)
 8000ba2:	6863      	ldr	r3, [r4, #4]
 8000ba4:	f013 0f0c 	tst.w	r3, #12
 8000ba8:	d007      	beq.n	8000bba <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000baa:	6863      	ldr	r3, [r4, #4]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	d110      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x106>
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	03da      	lsls	r2, r3, #15
 8000bb8:	d40d      	bmi.n	8000bd6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	079b      	lsls	r3, r3, #30
 8000bbe:	d502      	bpl.n	8000bc6 <HAL_RCC_OscConfig+0xf6>
 8000bc0:	692b      	ldr	r3, [r5, #16]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d1af      	bne.n	8000b26 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	696a      	ldr	r2, [r5, #20]
 8000bca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bd2:	6023      	str	r3, [r4, #0]
 8000bd4:	e785      	b.n	8000ae2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bd6:	692a      	ldr	r2, [r5, #16]
 8000bd8:	4b5a      	ldr	r3, [pc, #360]	; (8000d44 <HAL_RCC_OscConfig+0x274>)
 8000bda:	b16a      	cbz	r2, 8000bf8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000be0:	f7ff faf6 	bl	80001d0 <HAL_GetTick>
 8000be4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	079f      	lsls	r7, r3, #30
 8000bea:	d4ec      	bmi.n	8000bc6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bec:	f7ff faf0 	bl	80001d0 <HAL_GetTick>
 8000bf0:	1b80      	subs	r0, r0, r6
 8000bf2:	2802      	cmp	r0, #2
 8000bf4:	d9f7      	bls.n	8000be6 <HAL_RCC_OscConfig+0x116>
 8000bf6:	e7ad      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000bf8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fae9 	bl	80001d0 <HAL_GetTick>
 8000bfe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	0798      	lsls	r0, r3, #30
 8000c04:	f57f af6d 	bpl.w	8000ae2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c08:	f7ff fae2 	bl	80001d0 <HAL_GetTick>
 8000c0c:	1b80      	subs	r0, r0, r6
 8000c0e:	2802      	cmp	r0, #2
 8000c10:	d9f6      	bls.n	8000c00 <HAL_RCC_OscConfig+0x130>
 8000c12:	e79f      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c14:	69aa      	ldr	r2, [r5, #24]
 8000c16:	4c4a      	ldr	r4, [pc, #296]	; (8000d40 <HAL_RCC_OscConfig+0x270>)
 8000c18:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <HAL_RCC_OscConfig+0x278>)
 8000c1a:	b1da      	cbz	r2, 8000c54 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c20:	f7ff fad6 	bl	80001d0 <HAL_GetTick>
 8000c24:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c28:	079b      	lsls	r3, r3, #30
 8000c2a:	d50d      	bpl.n	8000c48 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c2c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c30:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <HAL_RCC_OscConfig+0x27c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c38:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000c3a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000c3c:	9b01      	ldr	r3, [sp, #4]
 8000c3e:	1e5a      	subs	r2, r3, #1
 8000c40:	9201      	str	r2, [sp, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f9      	bne.n	8000c3a <HAL_RCC_OscConfig+0x16a>
 8000c46:	e750      	b.n	8000aea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c48:	f7ff fac2 	bl	80001d0 <HAL_GetTick>
 8000c4c:	1b80      	subs	r0, r0, r6
 8000c4e:	2802      	cmp	r0, #2
 8000c50:	d9e9      	bls.n	8000c26 <HAL_RCC_OscConfig+0x156>
 8000c52:	e77f      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000c54:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c56:	f7ff fabb 	bl	80001d0 <HAL_GetTick>
 8000c5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c5e:	079f      	lsls	r7, r3, #30
 8000c60:	f57f af43 	bpl.w	8000aea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c64:	f7ff fab4 	bl	80001d0 <HAL_GetTick>
 8000c68:	1b80      	subs	r0, r0, r6
 8000c6a:	2802      	cmp	r0, #2
 8000c6c:	d9f6      	bls.n	8000c5c <HAL_RCC_OscConfig+0x18c>
 8000c6e:	e771      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c70:	4c33      	ldr	r4, [pc, #204]	; (8000d40 <HAL_RCC_OscConfig+0x270>)
 8000c72:	69e3      	ldr	r3, [r4, #28]
 8000c74:	00d8      	lsls	r0, r3, #3
 8000c76:	d424      	bmi.n	8000cc2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000c78:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	69e3      	ldr	r3, [r4, #28]
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	61e3      	str	r3, [r4, #28]
 8000c82:	69e3      	ldr	r3, [r4, #28]
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c8c:	4e30      	ldr	r6, [pc, #192]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c8e:	6833      	ldr	r3, [r6, #0]
 8000c90:	05d9      	lsls	r1, r3, #23
 8000c92:	d518      	bpl.n	8000cc6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c94:	68eb      	ldr	r3, [r5, #12]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d126      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x218>
 8000c9a:	6a23      	ldr	r3, [r4, #32]
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ca2:	f7ff fa95 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ca6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000caa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cac:	6a23      	ldr	r3, [r4, #32]
 8000cae:	079b      	lsls	r3, r3, #30
 8000cb0:	d53f      	bpl.n	8000d32 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000cb2:	2f00      	cmp	r7, #0
 8000cb4:	f43f af1d 	beq.w	8000af2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cb8:	69e3      	ldr	r3, [r4, #28]
 8000cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	61e3      	str	r3, [r4, #28]
 8000cc0:	e717      	b.n	8000af2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000cc2:	2700      	movs	r7, #0
 8000cc4:	e7e2      	b.n	8000c8c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cc6:	6833      	ldr	r3, [r6, #0]
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ccc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000cce:	f7ff fa7f 	bl	80001d0 <HAL_GetTick>
 8000cd2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd4:	6833      	ldr	r3, [r6, #0]
 8000cd6:	05da      	lsls	r2, r3, #23
 8000cd8:	d4dc      	bmi.n	8000c94 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cda:	f7ff fa79 	bl	80001d0 <HAL_GetTick>
 8000cde:	eba0 0008 	sub.w	r0, r0, r8
 8000ce2:	2864      	cmp	r0, #100	; 0x64
 8000ce4:	d9f6      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x204>
 8000ce6:	e735      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ce8:	b9ab      	cbnz	r3, 8000d16 <HAL_RCC_OscConfig+0x246>
 8000cea:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cf0:	f023 0301 	bic.w	r3, r3, #1
 8000cf4:	6223      	str	r3, [r4, #32]
 8000cf6:	6a23      	ldr	r3, [r4, #32]
 8000cf8:	f023 0304 	bic.w	r3, r3, #4
 8000cfc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000cfe:	f7ff fa67 	bl	80001d0 <HAL_GetTick>
 8000d02:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d04:	6a23      	ldr	r3, [r4, #32]
 8000d06:	0798      	lsls	r0, r3, #30
 8000d08:	d5d3      	bpl.n	8000cb2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fa61 	bl	80001d0 <HAL_GetTick>
 8000d0e:	1b80      	subs	r0, r0, r6
 8000d10:	4540      	cmp	r0, r8
 8000d12:	d9f7      	bls.n	8000d04 <HAL_RCC_OscConfig+0x234>
 8000d14:	e71e      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d16:	2b05      	cmp	r3, #5
 8000d18:	6a23      	ldr	r3, [r4, #32]
 8000d1a:	d103      	bne.n	8000d24 <HAL_RCC_OscConfig+0x254>
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6223      	str	r3, [r4, #32]
 8000d22:	e7ba      	b.n	8000c9a <HAL_RCC_OscConfig+0x1ca>
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	6223      	str	r3, [r4, #32]
 8000d2a:	6a23      	ldr	r3, [r4, #32]
 8000d2c:	f023 0304 	bic.w	r3, r3, #4
 8000d30:	e7b6      	b.n	8000ca0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d32:	f7ff fa4d 	bl	80001d0 <HAL_GetTick>
 8000d36:	eba0 0008 	sub.w	r0, r0, r8
 8000d3a:	42b0      	cmp	r0, r6
 8000d3c:	d9b6      	bls.n	8000cac <HAL_RCC_OscConfig+0x1dc>
 8000d3e:	e709      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
 8000d40:	40021000 	.word	0x40021000
 8000d44:	42420000 	.word	0x42420000
 8000d48:	42420480 	.word	0x42420480
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d54:	4c22      	ldr	r4, [pc, #136]	; (8000de0 <HAL_RCC_OscConfig+0x310>)
 8000d56:	6863      	ldr	r3, [r4, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	f43f aee2 	beq.w	8000b26 <HAL_RCC_OscConfig+0x56>
 8000d62:	2300      	movs	r3, #0
 8000d64:	4e1f      	ldr	r6, [pc, #124]	; (8000de4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d66:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d68:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d6a:	d12b      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fa30 	bl	80001d0 <HAL_GetTick>
 8000d70:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	0199      	lsls	r1, r3, #6
 8000d76:	d41f      	bmi.n	8000db8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d78:	6a2b      	ldr	r3, [r5, #32]
 8000d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7e:	d105      	bne.n	8000d8c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d80:	6862      	ldr	r2, [r4, #4]
 8000d82:	68a9      	ldr	r1, [r5, #8]
 8000d84:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d8c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d8e:	6862      	ldr	r2, [r4, #4]
 8000d90:	430b      	orrs	r3, r1
 8000d92:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000d96:	4313      	orrs	r3, r2
 8000d98:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fa17 	bl	80001d0 <HAL_GetTick>
 8000da2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	019a      	lsls	r2, r3, #6
 8000da8:	f53f aea7 	bmi.w	8000afa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dac:	f7ff fa10 	bl	80001d0 <HAL_GetTick>
 8000db0:	1b40      	subs	r0, r0, r5
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f6      	bls.n	8000da4 <HAL_RCC_OscConfig+0x2d4>
 8000db6:	e6cd      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db8:	f7ff fa0a 	bl	80001d0 <HAL_GetTick>
 8000dbc:	1bc0      	subs	r0, r0, r7
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d9d7      	bls.n	8000d72 <HAL_RCC_OscConfig+0x2a2>
 8000dc2:	e6c7      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fa04 	bl	80001d0 <HAL_GetTick>
 8000dc8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	f57f ae94 	bpl.w	8000afa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dd2:	f7ff f9fd 	bl	80001d0 <HAL_GetTick>
 8000dd6:	1b40      	subs	r0, r0, r5
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d9f6      	bls.n	8000dca <HAL_RCC_OscConfig+0x2fa>
 8000ddc:	e6ba      	b.n	8000b54 <HAL_RCC_OscConfig+0x84>
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000
 8000de4:	42420060 	.word	0x42420060

08000de8 <HAL_RCC_GetSysClockFreq>:
{
 8000de8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000dec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dee:	ac02      	add	r4, sp, #8
 8000df0:	f103 0510 	add.w	r5, r3, #16
 8000df4:	4622      	mov	r2, r4
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	6859      	ldr	r1, [r3, #4]
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	c203      	stmia	r2!, {r0, r1}
 8000dfe:	42ab      	cmp	r3, r5
 8000e00:	4614      	mov	r4, r2
 8000e02:	d1f7      	bne.n	8000df4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e04:	2301      	movs	r3, #1
 8000e06:	f88d 3004 	strb.w	r3, [sp, #4]
 8000e0a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000e0c:	4911      	ldr	r1, [pc, #68]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e0e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000e12:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e14:	f003 020c 	and.w	r2, r3, #12
 8000e18:	2a08      	cmp	r2, #8
 8000e1a:	d117      	bne.n	8000e4c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e1c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000e20:	a806      	add	r0, sp, #24
 8000e22:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e24:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e26:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e2a:	d50c      	bpl.n	8000e46 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e2c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e2e:	480a      	ldr	r0, [pc, #40]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e30:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e34:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e36:	aa06      	add	r2, sp, #24
 8000e38:	4413      	add	r3, r2
 8000e3a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e3e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000e42:	b007      	add	sp, #28
 8000e44:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x74>)
 8000e48:	4350      	muls	r0, r2
 8000e4a:	e7fa      	b.n	8000e42 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000e4e:	e7f8      	b.n	8000e42 <HAL_RCC_GetSysClockFreq+0x5a>
 8000e50:	08002288 	.word	0x08002288
 8000e54:	40021000 	.word	0x40021000
 8000e58:	007a1200 	.word	0x007a1200
 8000e5c:	003d0900 	.word	0x003d0900

08000e60 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e60:	4a4d      	ldr	r2, [pc, #308]	; (8000f98 <HAL_RCC_ClockConfig+0x138>)
{
 8000e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e66:	6813      	ldr	r3, [r2, #0]
{
 8000e68:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	428b      	cmp	r3, r1
{
 8000e70:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e72:	d328      	bcc.n	8000ec6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e74:	682a      	ldr	r2, [r5, #0]
 8000e76:	0791      	lsls	r1, r2, #30
 8000e78:	d432      	bmi.n	8000ee0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e7a:	07d2      	lsls	r2, r2, #31
 8000e7c:	d438      	bmi.n	8000ef0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e7e:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_RCC_ClockConfig+0x138>)
 8000e80:	6813      	ldr	r3, [r2, #0]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	429e      	cmp	r6, r3
 8000e88:	d373      	bcc.n	8000f72 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e8a:	682a      	ldr	r2, [r5, #0]
 8000e8c:	4c43      	ldr	r4, [pc, #268]	; (8000f9c <HAL_RCC_ClockConfig+0x13c>)
 8000e8e:	f012 0f04 	tst.w	r2, #4
 8000e92:	d179      	bne.n	8000f88 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e94:	0713      	lsls	r3, r2, #28
 8000e96:	d506      	bpl.n	8000ea6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e98:	6863      	ldr	r3, [r4, #4]
 8000e9a:	692a      	ldr	r2, [r5, #16]
 8000e9c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ea0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ea4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ea6:	f7ff ff9f 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 8000eaa:	6863      	ldr	r3, [r4, #4]
 8000eac:	4a3c      	ldr	r2, [pc, #240]	; (8000fa0 <HAL_RCC_ClockConfig+0x140>)
 8000eae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	40d8      	lsrs	r0, r3
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <HAL_RCC_ClockConfig+0x144>)
 8000eb8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff f946 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000ec0:	2000      	movs	r0, #0
}
 8000ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec6:	6813      	ldr	r3, [r2, #0]
 8000ec8:	f023 0307 	bic.w	r3, r3, #7
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ed0:	6813      	ldr	r3, [r2, #0]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d0cc      	beq.n	8000e74 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000eda:	2001      	movs	r0, #1
 8000edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee0:	492e      	ldr	r1, [pc, #184]	; (8000f9c <HAL_RCC_ClockConfig+0x13c>)
 8000ee2:	68a8      	ldr	r0, [r5, #8]
 8000ee4:	684b      	ldr	r3, [r1, #4]
 8000ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000eea:	4303      	orrs	r3, r0
 8000eec:	604b      	str	r3, [r1, #4]
 8000eee:	e7c4      	b.n	8000e7a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef0:	686a      	ldr	r2, [r5, #4]
 8000ef2:	4c2a      	ldr	r4, [pc, #168]	; (8000f9c <HAL_RCC_ClockConfig+0x13c>)
 8000ef4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef8:	d11c      	bne.n	8000f34 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efe:	d0ec      	beq.n	8000eda <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f00:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f02:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f06:	f023 0303 	bic.w	r3, r3, #3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000f0e:	f7ff f95f 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f12:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000f14:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d114      	bne.n	8000f44 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f1a:	6863      	ldr	r3, [r4, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d0ac      	beq.n	8000e7e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f24:	f7ff f954 	bl	80001d0 <HAL_GetTick>
 8000f28:	1bc0      	subs	r0, r0, r7
 8000f2a:	4540      	cmp	r0, r8
 8000f2c:	d9f5      	bls.n	8000f1a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000f2e:	2003      	movs	r0, #3
 8000f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f34:	2a02      	cmp	r2, #2
 8000f36:	d102      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f3c:	e7df      	b.n	8000efe <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3e:	f013 0f02 	tst.w	r3, #2
 8000f42:	e7dc      	b.n	8000efe <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d10f      	bne.n	8000f68 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f48:	6863      	ldr	r3, [r4, #4]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	d095      	beq.n	8000e7e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f52:	f7ff f93d 	bl	80001d0 <HAL_GetTick>
 8000f56:	1bc0      	subs	r0, r0, r7
 8000f58:	4540      	cmp	r0, r8
 8000f5a:	d9f5      	bls.n	8000f48 <HAL_RCC_ClockConfig+0xe8>
 8000f5c:	e7e7      	b.n	8000f2e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5e:	f7ff f937 	bl	80001d0 <HAL_GetTick>
 8000f62:	1bc0      	subs	r0, r0, r7
 8000f64:	4540      	cmp	r0, r8
 8000f66:	d8e2      	bhi.n	8000f2e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f68:	6863      	ldr	r3, [r4, #4]
 8000f6a:	f013 0f0c 	tst.w	r3, #12
 8000f6e:	d1f6      	bne.n	8000f5e <HAL_RCC_ClockConfig+0xfe>
 8000f70:	e785      	b.n	8000e7e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f72:	6813      	ldr	r3, [r2, #0]
 8000f74:	f023 0307 	bic.w	r3, r3, #7
 8000f78:	4333      	orrs	r3, r6
 8000f7a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	429e      	cmp	r6, r3
 8000f84:	d1a9      	bne.n	8000eda <HAL_RCC_ClockConfig+0x7a>
 8000f86:	e780      	b.n	8000e8a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f88:	6863      	ldr	r3, [r4, #4]
 8000f8a:	68e9      	ldr	r1, [r5, #12]
 8000f8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f90:	430b      	orrs	r3, r1
 8000f92:	6063      	str	r3, [r4, #4]
 8000f94:	e77e      	b.n	8000e94 <HAL_RCC_ClockConfig+0x34>
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	08002298 	.word	0x08002298
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <HAL_RCC_GetHCLKFreq>:
}
 8000fa8:	4b01      	ldr	r3, [pc, #4]	; (8000fb0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fc2:	6810      	ldr	r0, [r2, #0]
}    
 8000fc4:	40d8      	lsrs	r0, r3
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	080022a8 	.word	0x080022a8
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_RCC_GetPCLK2Freq+0x18>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000fde:	5cd3      	ldrb	r3, [r2, r3]
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000fe2:	6810      	ldr	r0, [r2, #0]
} 
 8000fe4:	40d8      	lsrs	r0, r3
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	080022a8 	.word	0x080022a8
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000ff4:	6803      	ldr	r3, [r0, #0]
{
 8000ff6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000ffa:	07d9      	lsls	r1, r3, #31
{
 8000ffc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000ffe:	d520      	bpl.n	8001042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001000:	4c35      	ldr	r4, [pc, #212]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001002:	69e3      	ldr	r3, [r4, #28]
 8001004:	00da      	lsls	r2, r3, #3
 8001006:	d432      	bmi.n	800106e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001008:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	69e3      	ldr	r3, [r4, #28]
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	61e3      	str	r3, [r4, #28]
 8001012:	69e3      	ldr	r3, [r4, #28]
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101c:	4e2f      	ldr	r6, [pc, #188]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800101e:	6833      	ldr	r3, [r6, #0]
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	d526      	bpl.n	8001072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001024:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001026:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800102a:	d136      	bne.n	800109a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800102c:	6a23      	ldr	r3, [r4, #32]
 800102e:	686a      	ldr	r2, [r5, #4]
 8001030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001034:	4313      	orrs	r3, r2
 8001036:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001038:	b11f      	cbz	r7, 8001042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103a:	69e3      	ldr	r3, [r4, #28]
 800103c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001040:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001042:	6828      	ldr	r0, [r5, #0]
 8001044:	0783      	lsls	r3, r0, #30
 8001046:	d506      	bpl.n	8001056 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001048:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800104a:	68a9      	ldr	r1, [r5, #8]
 800104c:	6853      	ldr	r3, [r2, #4]
 800104e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001052:	430b      	orrs	r3, r1
 8001054:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001056:	f010 0010 	ands.w	r0, r0, #16
 800105a:	d01b      	beq.n	8001094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800105e:	68e9      	ldr	r1, [r5, #12]
 8001060:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001062:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001064:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001068:	430b      	orrs	r3, r1
 800106a:	6053      	str	r3, [r2, #4]
 800106c:	e012      	b.n	8001094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800106e:	2700      	movs	r7, #0
 8001070:	e7d4      	b.n	800101c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001072:	6833      	ldr	r3, [r6, #0]
 8001074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001078:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800107a:	f7ff f8a9 	bl	80001d0 <HAL_GetTick>
 800107e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001080:	6833      	ldr	r3, [r6, #0]
 8001082:	05d8      	lsls	r0, r3, #23
 8001084:	d4ce      	bmi.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001086:	f7ff f8a3 	bl	80001d0 <HAL_GetTick>
 800108a:	eba0 0008 	sub.w	r0, r0, r8
 800108e:	2864      	cmp	r0, #100	; 0x64
 8001090:	d9f6      	bls.n	8001080 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001092:	2003      	movs	r0, #3
}
 8001094:	b002      	add	sp, #8
 8001096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800109a:	686a      	ldr	r2, [r5, #4]
 800109c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d0c3      	beq.n	800102c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80010a4:	2001      	movs	r0, #1
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010a8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80010aa:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010ac:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010b2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80010b4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80010b6:	07d9      	lsls	r1, r3, #31
 80010b8:	d5b8      	bpl.n	800102c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80010ba:	f7ff f889 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010be:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80010c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c4:	6a23      	ldr	r3, [r4, #32]
 80010c6:	079a      	lsls	r2, r3, #30
 80010c8:	d4b0      	bmi.n	800102c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ca:	f7ff f881 	bl	80001d0 <HAL_GetTick>
 80010ce:	1b80      	subs	r0, r0, r6
 80010d0:	4540      	cmp	r0, r8
 80010d2:	d9f7      	bls.n	80010c4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80010d4:	e7dd      	b.n	8001092 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40007000 	.word	0x40007000
 80010e0:	42420440 	.word	0x42420440

080010e4 <HAL_SPI_ErrorCallback>:
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 80010e8:	6803      	ldr	r3, [r0, #0]
{
 80010ea:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80010ec:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80010ee:	689a      	ldr	r2, [r3, #8]
{
 80010f0:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80010f2:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80010f6:	2d01      	cmp	r5, #1
{
 80010f8:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80010fa:	d105      	bne.n	8001108 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80010fc:	064d      	lsls	r5, r1, #25
 80010fe:	d503      	bpl.n	8001108 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 8001100:	6c03      	ldr	r3, [r0, #64]	; 0x40
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 8001102:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8001104:	b005      	add	sp, #20
 8001106:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001108:	0790      	lsls	r0, r2, #30
 800110a:	d504      	bpl.n	8001116 <HAL_SPI_IRQHandler+0x2e>
 800110c:	060d      	lsls	r5, r1, #24
 800110e:	d502      	bpl.n	8001116 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001110:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001112:	4620      	mov	r0, r4
 8001114:	e7f5      	b.n	8001102 <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001116:	f012 0f60 	tst.w	r2, #96	; 0x60
 800111a:	d0f3      	beq.n	8001104 <HAL_SPI_IRQHandler+0x1c>
 800111c:	0688      	lsls	r0, r1, #26
 800111e:	d5f1      	bpl.n	8001104 <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8001120:	0655      	lsls	r5, r2, #25
 8001122:	d50e      	bpl.n	8001142 <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001124:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001128:	2500      	movs	r5, #0
 800112a:	2803      	cmp	r0, #3
 800112c:	d036      	beq.n	800119c <HAL_SPI_IRQHandler+0xb4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800112e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001130:	f040 0004 	orr.w	r0, r0, #4
 8001134:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001136:	9501      	str	r5, [sp, #4]
 8001138:	68d8      	ldr	r0, [r3, #12]
 800113a:	9001      	str	r0, [sp, #4]
 800113c:	6898      	ldr	r0, [r3, #8]
 800113e:	9001      	str	r0, [sp, #4]
 8001140:	9801      	ldr	r0, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8001142:	0690      	lsls	r0, r2, #26
 8001144:	d50c      	bpl.n	8001160 <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001146:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001148:	f042 0201 	orr.w	r2, r2, #1
 800114c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800114e:	2200      	movs	r2, #0
 8001150:	9203      	str	r2, [sp, #12]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	9203      	str	r2, [sp, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001160:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001162:	2a00      	cmp	r2, #0
 8001164:	d0ce      	beq.n	8001104 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800116c:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800116e:	2201      	movs	r2, #1
 8001170:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001174:	078a      	lsls	r2, r1, #30
 8001176:	d018      	beq.n	80011aa <HAL_SPI_IRQHandler+0xc2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001178:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 800117a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800117c:	f022 0203 	bic.w	r2, r2, #3
 8001180:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8001182:	b118      	cbz	r0, 800118c <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_SPI_IRQHandler+0xcc>)
 8001186:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001188:	f7ff faf0 	bl	800076c <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 800118c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800118e:	2800      	cmp	r0, #0
 8001190:	d0b8      	beq.n	8001104 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_SPI_IRQHandler+0xcc>)
 8001194:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001196:	f7ff fae9 	bl	800076c <HAL_DMA_Abort_IT>
 800119a:	e7b3      	b.n	8001104 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800119c:	9502      	str	r5, [sp, #8]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	9202      	str	r2, [sp, #8]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	9b02      	ldr	r3, [sp, #8]
        return;
 80011a8:	e7ac      	b.n	8001104 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 80011aa:	4620      	mov	r0, r4
 80011ac:	f7ff ff9a 	bl	80010e4 <HAL_SPI_ErrorCallback>
 80011b0:	e7a8      	b.n	8001104 <HAL_SPI_IRQHandler+0x1c>
 80011b2:	bf00      	nop
 80011b4:	080011b9 	.word	0x080011b9

080011b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80011b8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hspi->RxXferCount = 0U;
 80011ba:	2300      	movs	r3, #0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80011be:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80011c0:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 80011c2:	f7ff ff8f 	bl	80010e4 <HAL_SPI_ErrorCallback>
 80011c6:	bd08      	pop	{r3, pc}

080011c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80011c8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80011ca:	4604      	mov	r4, r0
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d034      	beq.n	800123a <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80011d4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80011d8:	b90b      	cbnz	r3, 80011de <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80011da:	f000 fe9f 	bl	8001f1c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80011de:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80011e0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80011e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80011e6:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80011e8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80011ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011ee:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	69a2      	ldr	r2, [r4, #24]
 80011f4:	4303      	orrs	r3, r0
 80011f6:	68e0      	ldr	r0, [r4, #12]
 80011f8:	4303      	orrs	r3, r0
 80011fa:	6920      	ldr	r0, [r4, #16]
 80011fc:	4303      	orrs	r3, r0
 80011fe:	6960      	ldr	r0, [r4, #20]
 8001200:	4303      	orrs	r3, r0
 8001202:	69e0      	ldr	r0, [r4, #28]
 8001204:	4303      	orrs	r3, r0
 8001206:	6a20      	ldr	r0, [r4, #32]
 8001208:	4303      	orrs	r3, r0
 800120a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800120c:	4303      	orrs	r3, r0
 800120e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001212:	4303      	orrs	r3, r0
 8001214:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001216:	0c12      	lsrs	r2, r2, #16
 8001218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800121a:	f002 0204 	and.w	r2, r2, #4
 800121e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001220:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001222:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001224:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001226:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001228:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800122a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800122e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001230:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001232:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001234:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001238:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800123a:	2001      	movs	r0, #1
}
 800123c:	bd10      	pop	{r4, pc}
	...

08001240 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001240:	6a03      	ldr	r3, [r0, #32]
{
 8001242:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800124a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800124c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800124e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001250:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001252:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001256:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001258:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800125a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800125e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001260:	4d0a      	ldr	r5, [pc, #40]	; (800128c <TIM_OC1_SetConfig+0x4c>)
 8001262:	42a8      	cmp	r0, r5
 8001264:	d10b      	bne.n	800127e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001266:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001268:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800126c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800126e:	698e      	ldr	r6, [r1, #24]
 8001270:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001272:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001276:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001278:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800127c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800127e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001280:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001282:	684a      	ldr	r2, [r1, #4]
 8001284:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001286:	6203      	str	r3, [r0, #32]
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	bf00      	nop
 800128c:	40012c00 	.word	0x40012c00

08001290 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001290:	6a03      	ldr	r3, [r0, #32]
{
 8001292:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001298:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800129a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800129c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800129e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80012a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80012a2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80012a6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80012a8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80012aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80012ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80012b2:	4d0b      	ldr	r5, [pc, #44]	; (80012e0 <TIM_OC3_SetConfig+0x50>)
 80012b4:	42a8      	cmp	r0, r5
 80012b6:	d10d      	bne.n	80012d4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80012b8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80012ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80012be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80012c2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80012c4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80012c6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80012ca:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80012cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80012d0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80012d6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80012d8:	684a      	ldr	r2, [r1, #4]
 80012da:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012dc:	6203      	str	r3, [r0, #32]
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	40012c00 	.word	0x40012c00

080012e4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80012e4:	6a03      	ldr	r3, [r0, #32]
{
 80012e6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80012e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80012f2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80012f6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80012fe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001304:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001308:	4d06      	ldr	r5, [pc, #24]	; (8001324 <TIM_OC4_SetConfig+0x40>)
 800130a:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800130c:	bf02      	ittt	eq
 800130e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001310:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001314:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001318:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800131a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800131c:	684a      	ldr	r2, [r1, #4]
 800131e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001320:	6203      	str	r3, [r0, #32]
 8001322:	bd30      	pop	{r4, r5, pc}
 8001324:	40012c00 	.word	0x40012c00

08001328 <HAL_TIM_IC_MspInit>:
 8001328:	4770      	bx	lr

0800132a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800132a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800132e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001330:	2b01      	cmp	r3, #1
 8001332:	f04f 0302 	mov.w	r3, #2
 8001336:	d01c      	beq.n	8001372 <HAL_TIM_ConfigClockSource+0x48>
 8001338:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800133a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800133e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001340:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001344:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001346:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800134a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800134e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001350:	680a      	ldr	r2, [r1, #0]
 8001352:	2a40      	cmp	r2, #64	; 0x40
 8001354:	d079      	beq.n	800144a <HAL_TIM_ConfigClockSource+0x120>
 8001356:	d819      	bhi.n	800138c <HAL_TIM_ConfigClockSource+0x62>
 8001358:	2a10      	cmp	r2, #16
 800135a:	f000 8093 	beq.w	8001484 <HAL_TIM_ConfigClockSource+0x15a>
 800135e:	d80a      	bhi.n	8001376 <HAL_TIM_ConfigClockSource+0x4c>
 8001360:	2a00      	cmp	r2, #0
 8001362:	f000 8089 	beq.w	8001478 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001366:	2301      	movs	r3, #1
 8001368:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800136c:	2300      	movs	r3, #0
 800136e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001372:	4618      	mov	r0, r3
}
 8001374:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001376:	2a20      	cmp	r2, #32
 8001378:	f000 808a 	beq.w	8001490 <HAL_TIM_ConfigClockSource+0x166>
 800137c:	2a30      	cmp	r2, #48	; 0x30
 800137e:	d1f2      	bne.n	8001366 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001380:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001382:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001386:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800138a:	e036      	b.n	80013fa <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800138c:	2a70      	cmp	r2, #112	; 0x70
 800138e:	d036      	beq.n	80013fe <HAL_TIM_ConfigClockSource+0xd4>
 8001390:	d81b      	bhi.n	80013ca <HAL_TIM_ConfigClockSource+0xa0>
 8001392:	2a50      	cmp	r2, #80	; 0x50
 8001394:	d042      	beq.n	800141c <HAL_TIM_ConfigClockSource+0xf2>
 8001396:	2a60      	cmp	r2, #96	; 0x60
 8001398:	d1e5      	bne.n	8001366 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800139a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800139c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800139e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80013a2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80013a4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013a6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80013a8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80013aa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80013ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80013b2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80013b6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80013ba:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80013bc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013be:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013c4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80013c8:	e017      	b.n	80013fa <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80013ca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80013ce:	d011      	beq.n	80013f4 <HAL_TIM_ConfigClockSource+0xca>
 80013d0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80013d4:	d1c7      	bne.n	8001366 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013d6:	688a      	ldr	r2, [r1, #8]
 80013d8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80013da:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013dc:	68c9      	ldr	r1, [r1, #12]
 80013de:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013e0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013e8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013ea:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013f2:	e002      	b.n	80013fa <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	e7b3      	b.n	8001366 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013fe:	688a      	ldr	r2, [r1, #8]
 8001400:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001402:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001404:	68c9      	ldr	r1, [r1, #12]
 8001406:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001408:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800140c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001410:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001412:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001414:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001416:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800141a:	e7ee      	b.n	80013fa <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800141c:	684c      	ldr	r4, [r1, #4]
 800141e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001420:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001422:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001424:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001428:	f025 0501 	bic.w	r5, r5, #1
 800142c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800142e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001430:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001432:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001436:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800143a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800143c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800143e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001440:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001444:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001448:	e7d7      	b.n	80013fa <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800144a:	684c      	ldr	r4, [r1, #4]
 800144c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800144e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001450:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001452:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001456:	f025 0501 	bic.w	r5, r5, #1
 800145a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800145c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800145e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001460:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001464:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800146a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800146c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800146e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001472:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001476:	e7c0      	b.n	80013fa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001478:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800147a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800147e:	f042 0207 	orr.w	r2, r2, #7
 8001482:	e7ba      	b.n	80013fa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001484:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001486:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800148a:	f042 0217 	orr.w	r2, r2, #23
 800148e:	e7b4      	b.n	80013fa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001490:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001492:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001496:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800149a:	e7ae      	b.n	80013fa <HAL_TIM_ConfigClockSource+0xd0>

0800149c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800149c:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800149e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014a0:	4290      	cmp	r0, r2
 80014a2:	d00a      	beq.n	80014ba <TIM_Base_SetConfig+0x1e>
 80014a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014a8:	d007      	beq.n	80014ba <TIM_Base_SetConfig+0x1e>
 80014aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80014ae:	4290      	cmp	r0, r2
 80014b0:	d003      	beq.n	80014ba <TIM_Base_SetConfig+0x1e>
 80014b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014b6:	4290      	cmp	r0, r2
 80014b8:	d115      	bne.n	80014e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80014ba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014c0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <TIM_Base_SetConfig+0x6c>)
 80014c4:	4290      	cmp	r0, r2
 80014c6:	d00a      	beq.n	80014de <TIM_Base_SetConfig+0x42>
 80014c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014cc:	d007      	beq.n	80014de <TIM_Base_SetConfig+0x42>
 80014ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80014d2:	4290      	cmp	r0, r2
 80014d4:	d003      	beq.n	80014de <TIM_Base_SetConfig+0x42>
 80014d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014da:	4290      	cmp	r0, r2
 80014dc:	d103      	bne.n	80014e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014de:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80014e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014e4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80014e6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80014e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80014ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80014ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014f0:	688b      	ldr	r3, [r1, #8]
 80014f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80014f4:	680b      	ldr	r3, [r1, #0]
 80014f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <TIM_Base_SetConfig+0x6c>)
 80014fa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80014fc:	bf04      	itt	eq
 80014fe:	690b      	ldreq	r3, [r1, #16]
 8001500:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001502:	2301      	movs	r3, #1
 8001504:	6143      	str	r3, [r0, #20]
 8001506:	4770      	bx	lr
 8001508:	40012c00 	.word	0x40012c00

0800150c <HAL_TIM_Base_Init>:
{
 800150c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800150e:	4604      	mov	r4, r0
 8001510:	b1a0      	cbz	r0, 800153c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001512:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001516:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800151a:	b91b      	cbnz	r3, 8001524 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800151c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001520:	f000 fd5e 	bl	8001fe0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001524:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001526:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001528:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800152c:	1d21      	adds	r1, r4, #4
 800152e:	f7ff ffb5 	bl	800149c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001532:	2301      	movs	r3, #1
  return HAL_OK;
 8001534:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001536:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800153a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800153c:	2001      	movs	r0, #1
}
 800153e:	bd10      	pop	{r4, pc}

08001540 <HAL_TIM_OC_Init>:
{
 8001540:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001542:	4604      	mov	r4, r0
 8001544:	b1a0      	cbz	r0, 8001570 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001546:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800154a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800154e:	b91b      	cbnz	r3, 8001558 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001550:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001554:	f000 fd66 	bl	8002024 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001558:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800155a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800155c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001560:	1d21      	adds	r1, r4, #4
 8001562:	f7ff ff9b 	bl	800149c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001566:	2301      	movs	r3, #1
  return HAL_OK;
 8001568:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800156a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800156e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
}
 8001572:	bd10      	pop	{r4, pc}

08001574 <HAL_TIM_IC_Init>:
{
 8001574:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001576:	4604      	mov	r4, r0
 8001578:	b1a0      	cbz	r0, 80015a4 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800157a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800157e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001582:	b91b      	cbnz	r3, 800158c <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001584:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001588:	f7ff fece 	bl	8001328 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800158c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800158e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001590:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001594:	1d21      	adds	r1, r4, #4
 8001596:	f7ff ff81 	bl	800149c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800159a:	2301      	movs	r3, #1
  return HAL_OK;
 800159c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800159e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80015a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015a4:	2001      	movs	r0, #1
}
 80015a6:	bd10      	pop	{r4, pc}

080015a8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015a8:	6a03      	ldr	r3, [r0, #32]
{
 80015aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015ac:	f023 0310 	bic.w	r3, r3, #16
 80015b0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80015b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80015b4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80015b6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80015ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80015c2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80015c4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80015c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80015cc:	4d0b      	ldr	r5, [pc, #44]	; (80015fc <TIM_OC2_SetConfig+0x54>)
 80015ce:	42a8      	cmp	r0, r5
 80015d0:	d10d      	bne.n	80015ee <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80015d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80015dc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80015de:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80015e0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80015e4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80015e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80015ea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80015ee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80015f0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80015f2:	684a      	ldr	r2, [r1, #4]
 80015f4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80015f6:	6203      	str	r3, [r0, #32]
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	bf00      	nop
 80015fc:	40012c00 	.word	0x40012c00

08001600 <HAL_TIM_OC_ConfigChannel>:
{
 8001600:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001602:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001606:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001608:	2b01      	cmp	r3, #1
 800160a:	f04f 0002 	mov.w	r0, #2
 800160e:	d018      	beq.n	8001642 <HAL_TIM_OC_ConfigChannel+0x42>
 8001610:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001612:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001616:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800161a:	461d      	mov	r5, r3
  switch (Channel)
 800161c:	2a0c      	cmp	r2, #12
 800161e:	d80b      	bhi.n	8001638 <HAL_TIM_OC_ConfigChannel+0x38>
 8001620:	e8df f002 	tbb	[pc, r2]
 8001624:	0a0a0a07 	.word	0x0a0a0a07
 8001628:	0a0a0a10 	.word	0x0a0a0a10
 800162c:	0a0a0a14 	.word	0x0a0a0a14
 8001630:	18          	.byte	0x18
 8001631:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001632:	6820      	ldr	r0, [r4, #0]
 8001634:	f7ff fe04 	bl	8001240 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001638:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800163a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800163e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001642:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001644:	6820      	ldr	r0, [r4, #0]
 8001646:	f7ff ffaf 	bl	80015a8 <TIM_OC2_SetConfig>
    break;
 800164a:	e7f5      	b.n	8001638 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800164c:	6820      	ldr	r0, [r4, #0]
 800164e:	f7ff fe1f 	bl	8001290 <TIM_OC3_SetConfig>
    break;
 8001652:	e7f1      	b.n	8001638 <HAL_TIM_OC_ConfigChannel+0x38>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001654:	6820      	ldr	r0, [r4, #0]
 8001656:	f7ff fe45 	bl	80012e4 <TIM_OC4_SetConfig>
    break;
 800165a:	e7ed      	b.n	8001638 <HAL_TIM_OC_ConfigChannel+0x38>

0800165c <TIM_TI1_SetConfig>:
{
 800165c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800165e:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001660:	4e12      	ldr	r6, [pc, #72]	; (80016ac <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001662:	f024 0401 	bic.w	r4, r4, #1
 8001666:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001668:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800166a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800166c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800166e:	d00a      	beq.n	8001686 <TIM_TI1_SetConfig+0x2a>
 8001670:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001674:	d007      	beq.n	8001686 <TIM_TI1_SetConfig+0x2a>
 8001676:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800167a:	42b0      	cmp	r0, r6
 800167c:	d003      	beq.n	8001686 <TIM_TI1_SetConfig+0x2a>
 800167e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001682:	42b0      	cmp	r0, r6
 8001684:	d10f      	bne.n	80016a6 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001686:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800168a:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800168c:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800168e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001692:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001694:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001698:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800169c:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800169e:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80016a0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80016a2:	6201      	str	r1, [r0, #32]
}
 80016a4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80016a6:	f044 0201 	orr.w	r2, r4, #1
 80016aa:	e7ef      	b.n	800168c <TIM_TI1_SetConfig+0x30>
 80016ac:	40012c00 	.word	0x40012c00

080016b0 <HAL_TIM_IC_ConfigChannel>:
{
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80016b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80016b6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80016b8:	2b01      	cmp	r3, #1
{
 80016ba:	460d      	mov	r5, r1
 80016bc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80016c0:	d019      	beq.n	80016f6 <HAL_TIM_IC_ConfigChannel+0x46>
 80016c2:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80016c4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80016c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80016cc:	b9a2      	cbnz	r2, 80016f8 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 80016ce:	68cb      	ldr	r3, [r1, #12]
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	c906      	ldmia	r1, {r1, r2}
 80016d4:	f7ff ffc2 	bl	800165c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80016d8:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80016da:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80016dc:	699a      	ldr	r2, [r3, #24]
 80016de:	f022 020c 	bic.w	r2, r2, #12
 80016e2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80016ea:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80016ec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80016ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80016f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80016f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80016f8:	2a04      	cmp	r2, #4
 80016fa:	688e      	ldr	r6, [r1, #8]
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	c982      	ldmia	r1, {r1, r7}
 8001700:	68e8      	ldr	r0, [r5, #12]
 8001702:	d11f      	bne.n	8001744 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001704:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001706:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001708:	f022 0210 	bic.w	r2, r2, #16
 800170c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800170e:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001710:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001712:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001716:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800171a:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800171c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001720:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001722:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001724:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001728:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800172c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800172e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001730:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001732:	699a      	ldr	r2, [r3, #24]
 8001734:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001738:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001740:	619e      	str	r6, [r3, #24]
 8001742:	e7d2      	b.n	80016ea <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001744:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001746:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001748:	d11c      	bne.n	8001784 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800174a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800174e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001750:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001752:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001754:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8001758:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 800175a:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800175c:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800175e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001762:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001764:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001766:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800176a:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800176e:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8001770:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001772:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	f022 020c 	bic.w	r2, r2, #12
 800177a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001780:	61de      	str	r6, [r3, #28]
 8001782:	e7b2      	b.n	80016ea <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001784:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001788:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800178a:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800178c:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800178e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8001792:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001794:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001798:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800179c:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800179e:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80017a0:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80017a2:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 80017a6:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80017aa:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 80017ac:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80017ae:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80017b6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80017b8:	69da      	ldr	r2, [r3, #28]
 80017ba:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80017be:	e7df      	b.n	8001780 <HAL_TIM_IC_ConfigChannel+0xd0>

080017c0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80017c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80017c4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	f04f 0302 	mov.w	r3, #2
 80017cc:	d018      	beq.n	8001800 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80017ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017d2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80017d4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017d6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017d8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017de:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4322      	orrs	r2, r4
 80017e4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ec:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017fa:	2300      	movs	r3, #0
 80017fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001800:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001802:	bd10      	pop	{r4, pc}

08001804 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001808:	6805      	ldr	r5, [r0, #0]
 800180a:	68c2      	ldr	r2, [r0, #12]
 800180c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800180e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001810:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001814:	4313      	orrs	r3, r2
 8001816:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001818:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800181a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800181c:	430b      	orrs	r3, r1
 800181e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001820:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001824:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001828:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800182a:	4313      	orrs	r3, r2
 800182c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800182e:	696b      	ldr	r3, [r5, #20]
 8001830:	6982      	ldr	r2, [r0, #24]
 8001832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001836:	4313      	orrs	r3, r2
 8001838:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <UART_SetConfig+0x138>)
{
 800183c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800183e:	429d      	cmp	r5, r3
 8001840:	f04f 0419 	mov.w	r4, #25
 8001844:	d146      	bne.n	80018d4 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001846:	f7ff fbc5 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 800184a:	fb04 f300 	mul.w	r3, r4, r0
 800184e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001852:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001856:	00b6      	lsls	r6, r6, #2
 8001858:	fbb3 f3f6 	udiv	r3, r3, r6
 800185c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001860:	011e      	lsls	r6, r3, #4
 8001862:	f7ff fbb7 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001866:	4360      	muls	r0, r4
 8001868:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fbb0 f7f3 	udiv	r7, r0, r3
 8001872:	f7ff fbaf 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001876:	4360      	muls	r0, r4
 8001878:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001882:	fbb3 f3f8 	udiv	r3, r3, r8
 8001886:	fb08 7313 	mls	r3, r8, r3, r7
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	3332      	adds	r3, #50	; 0x32
 800188e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001892:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001896:	f7ff fb9d 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 800189a:	4360      	muls	r0, r4
 800189c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	fbb0 faf2 	udiv	sl, r0, r2
 80018a6:	f7ff fb95 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018aa:	4360      	muls	r0, r4
 80018ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80018ba:	fb08 a313 	mls	r3, r8, r3, sl
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	3332      	adds	r3, #50	; 0x32
 80018c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	433b      	orrs	r3, r7
 80018cc:	4433      	add	r3, r6
 80018ce:	60ab      	str	r3, [r5, #8]
 80018d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018d4:	f7ff fb6e 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80018d8:	fb04 f300 	mul.w	r3, r4, r0
 80018dc:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80018e0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80018e4:	00b6      	lsls	r6, r6, #2
 80018e6:	fbb3 f3f6 	udiv	r3, r3, r6
 80018ea:	fbb3 f3f8 	udiv	r3, r3, r8
 80018ee:	011e      	lsls	r6, r3, #4
 80018f0:	f7ff fb60 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80018f4:	4360      	muls	r0, r4
 80018f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	fbb0 f7f3 	udiv	r7, r0, r3
 8001900:	f7ff fb58 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 8001904:	4360      	muls	r0, r4
 8001906:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001910:	fbb3 f3f8 	udiv	r3, r3, r8
 8001914:	fb08 7313 	mls	r3, r8, r3, r7
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	3332      	adds	r3, #50	; 0x32
 800191c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001920:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001924:	f7ff fb46 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 8001928:	4360      	muls	r0, r4
 800192a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	fbb0 faf2 	udiv	sl, r0, r2
 8001934:	f7ff fb3e 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 8001938:	e7b7      	b.n	80018aa <UART_SetConfig+0xa6>
 800193a:	bf00      	nop
 800193c:	40013800 	.word	0x40013800

08001940 <HAL_UART_Init>:
{
 8001940:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001942:	4604      	mov	r4, r0
 8001944:	b340      	cbz	r0, 8001998 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001946:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800194a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800194e:	b91b      	cbnz	r3, 8001958 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001950:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001954:	f000 fb98 	bl	8002088 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001958:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800195a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800195c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001960:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001962:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001968:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800196a:	f7ff ff4b 	bl	8001804 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800196e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001970:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001980:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001988:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800198a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800198c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800198e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001992:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001996:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001998:	2001      	movs	r0, #1
}
 800199a:	bd10      	pop	{r4, pc}

0800199c <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800199c:	2301      	movs	r3, #1
{
 800199e:	b510      	push	{r4, lr}
 80019a0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80019a4:	2310      	movs	r3, #16
 80019a6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019a8:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019ac:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b4:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b6:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019b8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	f7ff f889 	bl	8000ad0 <HAL_RCC_OscConfig>
 80019be:	b100      	cbz	r0, 80019c2 <SystemClock_Config+0x26>
 80019c0:	e7fe      	b.n	80019c0 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c2:	230f      	movs	r3, #15
 80019c4:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ca:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019cc:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019ce:	4621      	mov	r1, r4
 80019d0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d2:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d4:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019d6:	f7ff fa43 	bl	8000e60 <HAL_RCC_ClockConfig>
 80019da:	b100      	cbz	r0, 80019de <SystemClock_Config+0x42>
 80019dc:	e7fe      	b.n	80019dc <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019e4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019e6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e8:	f7ff fb04 	bl	8000ff4 <HAL_RCCEx_PeriphCLKConfig>
 80019ec:	4604      	mov	r4, r0
 80019ee:	b100      	cbz	r0, 80019f2 <SystemClock_Config+0x56>
 80019f0:	e7fe      	b.n	80019f0 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80019f2:	f7ff fad9 	bl	8000fa8 <HAL_RCC_GetHCLKFreq>
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80019fe:	f7fe fe8f 	bl	8000720 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a02:	2004      	movs	r0, #4
 8001a04:	f7fe fea2 	bl	800074c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a08:	4622      	mov	r2, r4
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7fe fe46 	bl	80006a0 <HAL_NVIC_SetPriority>
}
 8001a14:	b014      	add	sp, #80	; 0x50
 8001a16:	bd10      	pop	{r4, pc}

08001a18 <initADC>:

}

/* USER CODE BEGIN 4 */
void initADC(void){
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8001a18:	2200      	movs	r2, #0
	adcChannel.Rank = 1;
 8001a1a:	2101      	movs	r1, #1
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <initADC+0x14>)



	  //ADC1
	  //HAL_ADC_MspInit(&hadc1);
	  HAL_ADC_Start(&hadc1);
 8001a1e:	4804      	ldr	r0, [pc, #16]	; (8001a30 <initADC+0x18>)
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8001a20:	601a      	str	r2, [r3, #0]
	adcChannel.Rank = 1;
 8001a22:	6059      	str	r1, [r3, #4]
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a24:	609a      	str	r2, [r3, #8]
	  HAL_ADC_Start(&hadc1);
 8001a26:	f7fe bc99 	b.w	800035c <HAL_ADC_Start>
 8001a2a:	bf00      	nop
 8001a2c:	200002e8 	.word	0x200002e8
 8001a30:	20000160 	.word	0x20000160

08001a34 <ReadAnalogADC1>:
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
	return HAL_ADC_GetValue(&hadc1);
}
int ReadAnalogADC1( uint32_t ch ){
	adcChannel.Channel = ch;//B
	adcChannel.Rank = 1;
 8001a34:	2301      	movs	r3, #1
	adcChannel.Channel = ch;//B
 8001a36:	490b      	ldr	r1, [pc, #44]	; (8001a64 <ReadAnalogADC1+0x30>)
int ReadAnalogADC1( uint32_t ch ){
 8001a38:	b510      	push	{r4, lr}
	adcChannel.Rank = 1;
 8001a3a:	604b      	str	r3, [r1, #4]
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a3c:	2300      	movs	r3, #0

	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8001a3e:	4c0a      	ldr	r4, [pc, #40]	; (8001a68 <ReadAnalogADC1+0x34>)
	adcChannel.Channel = ch;//B
 8001a40:	6008      	str	r0, [r1, #0]
	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8001a42:	4620      	mov	r0, r4
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a44:	608b      	str	r3, [r1, #8]
	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8001a46:	f7fe fbcd 	bl	80001e4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7fe fc86 	bl	800035c <HAL_ADC_Start>
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	6813      	ldr	r3, [r2, #0]
 8001a54:	079b      	lsls	r3, r3, #30
 8001a56:	d5fc      	bpl.n	8001a52 <ReadAnalogADC1+0x1e>
	return HAL_ADC_GetValue(&hadc1);
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <ReadAnalogADC1+0x34>)
}
 8001a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return HAL_ADC_GetValue(&hadc1);
 8001a5e:	f7fe bbbd 	b.w	80001dc <HAL_ADC_GetValue>
 8001a62:	bf00      	nop
 8001a64:	200002e8 	.word	0x200002e8
 8001a68:	20000160 	.word	0x20000160

08001a6c <main>:
{
 8001a6c:	b500      	push	{lr}
 8001a6e:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8001a70:	f7fe fb90 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001a74:	f7ff ff92 	bl	800199c <SystemClock_Config>
  initADC();
 8001a78:	f7ff ffce 	bl	8001a18 <initADC>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7c:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <main+0x25c>)
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001a7e:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a80:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001a82:	4892      	ldr	r0, [pc, #584]	; (8001ccc <main+0x260>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a84:	f042 0220 	orr.w	r2, r2, #32
 8001a88:	619a      	str	r2, [r3, #24]
 8001a8a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	f002 0220 	and.w	r2, r2, #32
 8001a92:	9201      	str	r2, [sp, #4]
 8001a94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2402      	movs	r4, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	f042 0210 	orr.w	r2, r2, #16
 8001a9e:	619a      	str	r2, [r3, #24]
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	f002 0210 	and.w	r2, r2, #16
 8001aa6:	9202      	str	r2, [sp, #8]
 8001aa8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	699a      	ldr	r2, [r3, #24]
 8001aac:	f042 0204 	orr.w	r2, r2, #4
 8001ab0:	619a      	str	r2, [r3, #24]
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	f002 0204 	and.w	r2, r2, #4
 8001ab8:	9203      	str	r2, [sp, #12]
 8001aba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	f042 0208 	orr.w	r2, r2, #8
 8001ac2:	619a      	str	r2, [r3, #24]
 8001ac4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	9304      	str	r3, [sp, #16]
 8001ace:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001ad0:	f7fe ff74 	bl	80009bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	487d      	ldr	r0, [pc, #500]	; (8001cd0 <main+0x264>)
 8001ada:	f7fe ff6f 	bl	80009bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_R_Pin;
 8001ade:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	a90b      	add	r1, sp, #44	; 0x2c
 8001ae2:	487a      	ldr	r0, [pc, #488]	; (8001ccc <main+0x260>)
  GPIO_InitStruct.Pin = LED_R_Pin;
 8001ae4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f7fe fe87 	bl	80007fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aee:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	4877      	ldr	r0, [pc, #476]	; (8001cd0 <main+0x264>)
 8001af2:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	950c      	str	r5, [sp, #48]	; 0x30
  hadc1.Instance = ADC1;
 8001afa:	4c76      	ldr	r4, [pc, #472]	; (8001cd4 <main+0x268>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001afc:	f7fe fe7e 	bl	80007fc <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001b00:	4b75      	ldr	r3, [pc, #468]	; (8001cd8 <main+0x26c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b02:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 8001b06:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b08:	2300      	movs	r3, #0
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b0a:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b0c:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b0e:	60e3      	str	r3, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b10:	6163      	str	r3, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b12:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b14:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b16:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b18:	f7fe fca4 	bl	8000464 <HAL_ADC_Init>
 8001b1c:	b100      	cbz	r0, 8001b20 <main+0xb4>
 8001b1e:	e7fe      	b.n	8001b1e <main+0xb2>
  sConfig.Channel = ADC_CHANNEL_0;
 8001b20:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b22:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b24:	a90b      	add	r1, sp, #44	; 0x2c
 8001b26:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b28:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2a:	f7fe fb5b 	bl	80001e4 <HAL_ADC_ConfigChannel>
 8001b2e:	b100      	cbz	r0, 8001b32 <main+0xc6>
 8001b30:	e7fe      	b.n	8001b30 <main+0xc4>
  hcan.Init.Prescaler = 16;
 8001b32:	2510      	movs	r5, #16
  hcan.Instance = CAN1;
 8001b34:	4b69      	ldr	r3, [pc, #420]	; (8001cdc <main+0x270>)
  hcan.Init.Prescaler = 16;
 8001b36:	4a6a      	ldr	r2, [pc, #424]	; (8001ce0 <main+0x274>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b38:	6098      	str	r0, [r3, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 8001b3a:	60d8      	str	r0, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_1TQ;
 8001b3c:	6118      	str	r0, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_1TQ;
 8001b3e:	6158      	str	r0, [r3, #20]
  hcan.Init.TTCM = DISABLE;
 8001b40:	6198      	str	r0, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 8001b42:	61d8      	str	r0, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 8001b44:	6218      	str	r0, [r3, #32]
  hcan.Init.NART = DISABLE;
 8001b46:	6258      	str	r0, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8001b48:	6298      	str	r0, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8001b4a:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b4c:	4618      	mov	r0, r3
  hcan.Init.Prescaler = 16;
 8001b4e:	e883 0024 	stmia.w	r3, {r2, r5}
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b52:	f7fe fd07 	bl	8000564 <HAL_CAN_Init>
 8001b56:	b100      	cbz	r0, 8001b5a <main+0xee>
 8001b58:	e7fe      	b.n	8001b58 <main+0xec>
  hi2c1.Instance = I2C1;
 8001b5a:	4b62      	ldr	r3, [pc, #392]	; (8001ce4 <main+0x278>)
  hi2c1.Init.ClockSpeed = 100000;
 8001b5c:	4a62      	ldr	r2, [pc, #392]	; (8001ce8 <main+0x27c>)
 8001b5e:	4c63      	ldr	r4, [pc, #396]	; (8001cec <main+0x280>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b60:	6098      	str	r0, [r3, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001b62:	e883 0014 	stmia.w	r3, {r2, r4}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001b6a:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b6c:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b6e:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b70:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b72:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b74:	4618      	mov	r0, r3
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b76:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b78:	f7fe ff2a 	bl	80009d0 <HAL_I2C_Init>
 8001b7c:	b100      	cbz	r0, 8001b80 <main+0x114>
 8001b7e:	e7fe      	b.n	8001b7e <main+0x112>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b80:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <main+0x284>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b86:	495b      	ldr	r1, [pc, #364]	; (8001cf4 <main+0x288>)
  hspi1.Init.CRCPolynomial = 10;
 8001b88:	240a      	movs	r4, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b8a:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b94:	2208      	movs	r2, #8
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b96:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b98:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9a:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b9c:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9e:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba0:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba2:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ba4:	4618      	mov	r0, r3
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ba6:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001ba8:	62dc      	str	r4, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001baa:	f7ff fb0d 	bl	80011c8 <HAL_SPI_Init>
 8001bae:	b100      	cbz	r0, 8001bb2 <main+0x146>
 8001bb0:	e7fe      	b.n	8001bb0 <main+0x144>
  hspi2.Instance = SPI2;
 8001bb2:	4b51      	ldr	r3, [pc, #324]	; (8001cf8 <main+0x28c>)
 8001bb4:	4a51      	ldr	r2, [pc, #324]	; (8001cfc <main+0x290>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001bb6:	6058      	str	r0, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb8:	6098      	str	r0, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bba:	60d8      	str	r0, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bbc:	6118      	str	r0, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bbe:	6158      	str	r0, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001bc0:	6198      	str	r0, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bc2:	61d8      	str	r0, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc4:	6218      	str	r0, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc6:	6258      	str	r0, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc8:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bca:	4618      	mov	r0, r3
  hspi2.Instance = SPI2;
 8001bcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.CRCPolynomial = 10;
 8001bce:	62dc      	str	r4, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bd0:	f7ff fafa 	bl	80011c8 <HAL_SPI_Init>
 8001bd4:	b100      	cbz	r0, 8001bd8 <main+0x16c>
 8001bd6:	e7fe      	b.n	8001bd6 <main+0x16a>
  htim1.Instance = TIM1;
 8001bd8:	4c49      	ldr	r4, [pc, #292]	; (8001d00 <main+0x294>)
 8001bda:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <main+0x298>)
  htim1.Init.Prescaler = 0;
 8001bdc:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 8001be0:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be2:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001be4:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be6:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001be8:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8001bea:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bec:	f7ff fc8e 	bl	800150c <HAL_TIM_Base_Init>
 8001bf0:	b100      	cbz	r0, 8001bf4 <main+0x188>
 8001bf2:	e7fe      	b.n	8001bf2 <main+0x186>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	ad12      	add	r5, sp, #72	; 0x48
 8001bfa:	f845 3d2c 	str.w	r3, [r5, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bfe:	4629      	mov	r1, r5
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7ff fb92 	bl	800132a <HAL_TIM_ConfigClockSource>
 8001c06:	b100      	cbz	r0, 8001c0a <main+0x19e>
 8001c08:	e7fe      	b.n	8001c08 <main+0x19c>
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fcb2 	bl	8001574 <HAL_TIM_IC_Init>
 8001c10:	b100      	cbz	r0, 8001c14 <main+0x1a8>
 8001c12:	e7fe      	b.n	8001c12 <main+0x1a6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c16:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c18:	a905      	add	r1, sp, #20
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff fdd0 	bl	80017c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c20:	b100      	cbz	r0, 8001c24 <main+0x1b8>
 8001c22:	e7fe      	b.n	8001c22 <main+0x1b6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c24:	2200      	movs	r2, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c26:	2301      	movs	r3, #1
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c28:	a90b      	add	r1, sp, #44	; 0x2c
 8001c2a:	4835      	ldr	r0, [pc, #212]	; (8001d00 <main+0x294>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c2c:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c2e:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c30:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 8001c32:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c34:	f7ff fd3c 	bl	80016b0 <HAL_TIM_IC_ConfigChannel>
 8001c38:	b100      	cbz	r0, 8001c3c <main+0x1d0>
 8001c3a:	e7fe      	b.n	8001c3a <main+0x1ce>
  htim2.Instance = TIM2;
 8001c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c40:	4c31      	ldr	r4, [pc, #196]	; (8001d08 <main+0x29c>)
  htim2.Init.Prescaler = 0;
 8001c42:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 0;
 8001c46:	60e0      	str	r0, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c48:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001c4c:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8001c4e:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001c50:	f7ff fc76 	bl	8001540 <HAL_TIM_OC_Init>
 8001c54:	b100      	cbz	r0, 8001c58 <main+0x1ec>
 8001c56:	e7fe      	b.n	8001c56 <main+0x1ea>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7ff fdae 	bl	80017c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4602      	mov	r2, r0
 8001c66:	b100      	cbz	r0, 8001c6a <main+0x1fe>
 8001c68:	e7fe      	b.n	8001c68 <main+0x1fc>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c6a:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001c6c:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	a90b      	add	r1, sp, #44	; 0x2c
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff fcc3 	bl	8001600 <HAL_TIM_OC_ConfigChannel>
 8001c7a:	4605      	mov	r5, r0
 8001c7c:	b100      	cbz	r0, 8001c80 <main+0x214>
 8001c7e:	e7fe      	b.n	8001c7e <main+0x212>
  HAL_TIM_MspPostInit(&htim2);
 8001c80:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8001c82:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c86:	240c      	movs	r4, #12
  HAL_TIM_MspPostInit(&htim2);
 8001c88:	f000 f9de 	bl	8002048 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8001c8c:	481f      	ldr	r0, [pc, #124]	; (8001d0c <main+0x2a0>)
  huart1.Init.BaudRate = 115200;
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <main+0x2a4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c90:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001c92:	e880 0048 	stmia.w	r0, {r3, r6}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c96:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c98:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c9a:	6144      	str	r4, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9c:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9e:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca0:	f7ff fe4e 	bl	8001940 <HAL_UART_Init>
 8001ca4:	b100      	cbz	r0, 8001ca8 <main+0x23c>
 8001ca6:	e7fe      	b.n	8001ca6 <main+0x23a>
  huart2.Instance = USART2;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <main+0x2a8>)
 8001caa:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <main+0x2ac>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cac:	6098      	str	r0, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cae:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb0:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb6:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8001cb8:	e883 0044 	stmia.w	r3, {r2, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cbe:	f7ff fe3f 	bl	8001940 <HAL_UART_Init>
 8001cc2:	b358      	cbz	r0, 8001d1c <main+0x2b0>
 8001cc4:	e7fe      	b.n	8001cc4 <main+0x258>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40011000 	.word	0x40011000
 8001cd0:	40011400 	.word	0x40011400
 8001cd4:	20000160 	.word	0x20000160
 8001cd8:	40012400 	.word	0x40012400
 8001cdc:	2000011c 	.word	0x2000011c
 8001ce0:	40006400 	.word	0x40006400
 8001ce4:	200000c8 	.word	0x200000c8
 8001ce8:	40005400 	.word	0x40005400
 8001cec:	000186a0 	.word	0x000186a0
 8001cf0:	20000210 	.word	0x20000210
 8001cf4:	40013000 	.word	0x40013000
 8001cf8:	2000002c 	.word	0x2000002c
 8001cfc:	40003800 	.word	0x40003800
 8001d00:	200001d0 	.word	0x200001d0
 8001d04:	40012c00 	.word	0x40012c00
 8001d08:	20000268 	.word	0x20000268
 8001d0c:	20000190 	.word	0x20000190
 8001d10:	40013800 	.word	0x40013800
 8001d14:	200002a8 	.word	0x200002a8
 8001d18:	40004400 	.word	0x40004400
  huart3.Instance = USART3;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <main+0x2dc>)
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <main+0x2e0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d20:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d22:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d24:	6118      	str	r0, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d2a:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 8001d2c:	e883 0044 	stmia.w	r3, {r2, r6}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d30:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d32:	f7ff fe05 	bl	8001940 <HAL_UART_Init>
 8001d36:	b928      	cbnz	r0, 8001d44 <main+0x2d8>
	  RPi_SPI.data = ReadAnalogADC1( RPI_3V3_SENSE );
 8001d38:	4c05      	ldr	r4, [pc, #20]	; (8001d50 <main+0x2e4>)
 8001d3a:	2005      	movs	r0, #5
 8001d3c:	f7ff fe7a 	bl	8001a34 <ReadAnalogADC1>
 8001d40:	7060      	strb	r0, [r4, #1]
 8001d42:	e7fa      	b.n	8001d3a <main+0x2ce>
 8001d44:	e7fe      	b.n	8001d44 <main+0x2d8>
 8001d46:	bf00      	nop
 8001d48:	20000088 	.word	0x20000088
 8001d4c:	40004800 	.word	0x40004800
 8001d50:	20000084 	.word	0x20000084

08001d54 <HAL_SYSTICK_Callback>:


void HAL_SYSTICK_Callback(void){
 8001d54:	b508      	push	{r3, lr}
	  if(HAL_GetTick()%100==0){
 8001d56:	f7fe fa3b 	bl	80001d0 <HAL_GetTick>
 8001d5a:	2364      	movs	r3, #100	; 0x64
 8001d5c:	fbb0 f2f3 	udiv	r2, r0, r3
 8001d60:	fb02 0013 	mls	r0, r2, r3, r0
 8001d64:	b940      	cbnz	r0, 8001d78 <HAL_SYSTICK_Callback+0x24>
		  	//HAL_SPI_TransmitReceive(&hspi2, &RPi_SPI.address, &RPi_SPI.data, sizeof(RPi_SPI.data), 0x1000);
		  	//HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);


	  }
}
 8001d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001d6a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001d6e:	2140      	movs	r1, #64	; 0x40
 8001d70:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8001d74:	f7fe be27 	b.w	80009c6 <HAL_GPIO_TogglePin>
 8001d78:	bd08      	pop	{r3, pc}
	...

08001d7c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_MspInit+0x84>)
{
 8001d7e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d80:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d82:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	619a      	str	r2, [r3, #24]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	f7fe fc72 	bl	800067c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f06f 000b 	mvn.w	r0, #11
 8001d9e:	4611      	mov	r1, r2
 8001da0:	f7fe fc7e 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	f06f 000a 	mvn.w	r0, #10
 8001daa:	4611      	mov	r1, r2
 8001dac:	f7fe fc78 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	f06f 0009 	mvn.w	r0, #9
 8001db6:	4611      	mov	r1, r2
 8001db8:	f7fe fc72 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f06f 0004 	mvn.w	r0, #4
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	f7fe fc6c 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f06f 0003 	mvn.w	r0, #3
 8001dce:	4611      	mov	r1, r2
 8001dd0:	f7fe fc66 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f06f 0001 	mvn.w	r0, #1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	f7fe fc60 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	f04f 30ff 	mov.w	r0, #4294967295
 8001de6:	4611      	mov	r1, r2
 8001de8:	f7fe fc5a 	bl	80006a0 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dec:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <HAL_MspInit+0x88>)
 8001dee:	6853      	ldr	r3, [r2, #4]
 8001df0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001df8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	b003      	add	sp, #12
 8001dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000

08001e08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e08:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001e0a:	6802      	ldr	r2, [r0, #0]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_ADC_MspInit+0x50>)
{
 8001e0e:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d11f      	bne.n	8001e54 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e14:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001e18:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1a:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e20:	619a      	str	r2, [r3, #24]
 8001e22:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001e2e:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <HAL_ADC_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001e32:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e34:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f7fe fce1 	bl	80007fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8001e3a:	23f3      	movs	r3, #243	; 0xf3
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	a902      	add	r1, sp, #8
 8001e3e:	4808      	ldr	r0, [pc, #32]	; (8001e60 <HAL_ADC_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8001e40:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e42:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f7fe fcda 	bl	80007fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	a902      	add	r1, sp, #8
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <HAL_ADC_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e4c:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f7fe fcd4 	bl	80007fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e54:	b006      	add	sp, #24
 8001e56:	bd10      	pop	{r4, pc}
 8001e58:	40012400 	.word	0x40012400
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40010800 	.word	0x40010800
 8001e64:	40010c00 	.word	0x40010c00

08001e68 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8001e6a:	6802      	ldr	r2, [r0, #0]
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_CAN_MspInit+0x64>)
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d128      	bne.n	8001ec4 <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e72:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001e76:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e7a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e7e:	61da      	str	r2, [r3, #28]
 8001e80:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <HAL_CAN_MspInit+0x68>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e90:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	f7fe fcb0 	bl	80007fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	a902      	add	r1, sp, #8
 8001eaa:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <HAL_CAN_MspInit+0x68>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f7fe fca5 	bl	80007fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_CAN_MspInit+0x6c>)
 8001eb4:	6853      	ldr	r3, [r2, #4]
 8001eb6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001eba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ec4:	b007      	add	sp, #28
 8001ec6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eca:	bf00      	nop
 8001ecc:	40006400 	.word	0x40006400
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	40010000 	.word	0x40010000

08001ed8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001eda:	6802      	ldr	r2, [r0, #0]
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_I2C_MspInit+0x38>)
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d113      	bne.n	8001f0a <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ee2:	23c0      	movs	r3, #192	; 0xc0
 8001ee4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee6:	2312      	movs	r3, #18
 8001ee8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eea:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	a902      	add	r1, sp, #8
 8001eee:	4809      	ldr	r0, [pc, #36]	; (8001f14 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f7fe fc83 	bl	80007fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_I2C_MspInit+0x40>)
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001efe:	61da      	str	r2, [r3, #28]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f0a:	b007      	add	sp, #28
 8001f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f10:	40005400 	.word	0x40005400
 8001f14:	40010c00 	.word	0x40010c00
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f1c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001f1e:	6803      	ldr	r3, [r0, #0]
 8001f20:	4a2a      	ldr	r2, [pc, #168]	; (8001fcc <HAL_SPI_MspInit+0xb0>)
{
 8001f22:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d125      	bne.n	8001f74 <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_SPI_MspInit+0xb4>)
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f2c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	4829      	ldr	r0, [pc, #164]	; (8001fd4 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f34:	619a      	str	r2, [r3, #24]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001f40:	2328      	movs	r3, #40	; 0x28
 8001f42:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f7fe fc56 	bl	80007fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f50:	2310      	movs	r3, #16
 8001f52:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f54:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	a902      	add	r1, sp, #8
 8001f58:	481e      	ldr	r0, [pc, #120]	; (8001fd4 <HAL_SPI_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f7fe fc4d 	bl	80007fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_SPI_MspInit+0xbc>)
 8001f64:	6853      	ldr	r3, [r2, #4]
 8001f66:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f70:	b006      	add	sp, #24
 8001f72:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_SPI_MspInit+0xc0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d1fa      	bne.n	8001f70 <HAL_SPI_MspInit+0x54>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7c:	2400      	movs	r4, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f7e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f86:	61da      	str	r2, [r3, #28]
 8001f88:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f94:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f98:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f7fe fc2d 	bl	80007fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fac:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	a902      	add	r1, sp, #8
 8001fb0:	4808      	ldr	r0, [pc, #32]	; (8001fd4 <HAL_SPI_MspInit+0xb8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f7fe fc22 	bl	80007fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fb8:	4622      	mov	r2, r4
 8001fba:	4621      	mov	r1, r4
 8001fbc:	2024      	movs	r0, #36	; 0x24
 8001fbe:	f7fe fb6f 	bl	80006a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001fc2:	2024      	movs	r0, #36	; 0x24
 8001fc4:	f7fe fba0 	bl	8000708 <HAL_NVIC_EnableIRQ>
}
 8001fc8:	e7d2      	b.n	8001f70 <HAL_SPI_MspInit+0x54>
 8001fca:	bf00      	nop
 8001fcc:	40013000 	.word	0x40013000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40003800 	.word	0x40003800

08001fe0 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8001fe2:	6802      	ldr	r2, [r0, #0]
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_TIM_Base_MspInit+0x3c>)
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d114      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fea:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001fee:	699a      	ldr	r2, [r3, #24]
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <HAL_TIM_Base_MspInit+0x40>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002008:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200a:	2300      	movs	r3, #0
 800200c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f7fe fbf4 	bl	80007fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002014:	b007      	add	sp, #28
 8002016:	f85d fb04 	ldr.w	pc, [sp], #4
 800201a:	bf00      	nop
 800201c:	40012c00 	.word	0x40012c00
 8002020:	40010800 	.word	0x40010800

08002024 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{

  if(htim_oc->Instance==TIM2)
 8002024:	6803      	ldr	r3, [r0, #0]
{
 8002026:	b082      	sub	sp, #8
  if(htim_oc->Instance==TIM2)
 8002028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202c:	d10a      	bne.n	8002044 <HAL_TIM_OC_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	61da      	str	r2, [r3, #28]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002044:	b002      	add	sp, #8
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002048:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 800204a:	6803      	ldr	r3, [r0, #0]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002050:	d112      	bne.n	8002078 <HAL_TIM_MspPostInit+0x30>
  /* USER CODE END TIM2_MspPostInit 0 */
  
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002056:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	4669      	mov	r1, sp
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <HAL_TIM_MspPostInit+0x38>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f7fe fbcb 	bl	80007fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002066:	4a07      	ldr	r2, [pc, #28]	; (8002084 <HAL_TIM_MspPostInit+0x3c>)
 8002068:	6853      	ldr	r3, [r2, #4]
 800206a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002078:	b005      	add	sp, #20
 800207a:	f85d fb04 	ldr.w	pc, [sp], #4
 800207e:	bf00      	nop
 8002080:	40010800 	.word	0x40010800
 8002084:	40010000 	.word	0x40010000

08002088 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002088:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800208a:	6803      	ldr	r3, [r0, #0]
 800208c:	4a2f      	ldr	r2, [pc, #188]	; (800214c <HAL_UART_MspInit+0xc4>)
{
 800208e:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART1)
 8002090:	4293      	cmp	r3, r2
 8002092:	d121      	bne.n	80020d8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002094:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_UART_MspInit+0xc8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8002098:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	482e      	ldr	r0, [pc, #184]	; (8002154 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800209c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020a0:	619a      	str	r2, [r3, #24]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f7fe fb9f 	bl	80007fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020be:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	4823      	ldr	r0, [pc, #140]	; (8002154 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f7fe fb95 	bl	80007fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020d2:	b009      	add	sp, #36	; 0x24
 80020d4:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART2)
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_UART_MspInit+0xd0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d115      	bne.n	800210a <HAL_UART_MspInit+0x82>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	481b      	ldr	r0, [pc, #108]	; (8002154 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ea:	61da      	str	r2, [r3, #28]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020f6:	2304      	movs	r3, #4
 80020f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f7fe fb7b 	bl	80007fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002106:	2308      	movs	r3, #8
 8002108:	e7db      	b.n	80020c2 <HAL_UART_MspInit+0x3a>
  else if(huart->Instance==USART3)
 800210a:	4a14      	ldr	r2, [pc, #80]	; (800215c <HAL_UART_MspInit+0xd4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d1e0      	bne.n	80020d2 <HAL_UART_MspInit+0x4a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8002114:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	4812      	ldr	r0, [pc, #72]	; (8002160 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002118:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800211c:	61da      	str	r2, [r3, #28]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002124:	9303      	str	r3, [sp, #12]
 8002126:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f7fe fb61 	bl	80007fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800213a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800213e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002140:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002142:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002144:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <HAL_UART_MspInit+0xd8>)
 800214a:	e7c0      	b.n	80020ce <HAL_UART_MspInit+0x46>
 800214c:	40013800 	.word	0x40013800
 8002150:	40021000 	.word	0x40021000
 8002154:	40010800 	.word	0x40010800
 8002158:	40004400 	.word	0x40004400
 800215c:	40004800 	.word	0x40004800
 8002160:	40010c00 	.word	0x40010c00

08002164 <NMI_Handler>:
 8002164:	4770      	bx	lr

08002166 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler>

08002168 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002168:	e7fe      	b.n	8002168 <MemManage_Handler>

0800216a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800216a:	e7fe      	b.n	800216a <BusFault_Handler>

0800216c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800216c:	e7fe      	b.n	800216c <UsageFault_Handler>

0800216e <SVC_Handler>:
 800216e:	4770      	bx	lr

08002170 <DebugMon_Handler>:
 8002170:	4770      	bx	lr

08002172 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002172:	4770      	bx	lr

08002174 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002174:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002176:	f7fe f81f 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800217e:	f7fe baf1 	b.w	8000764 <HAL_SYSTICK_IRQHandler>
	...

08002184 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002184:	4801      	ldr	r0, [pc, #4]	; (800218c <SPI2_IRQHandler+0x8>)
 8002186:	f7fe bfaf 	b.w	80010e8 <HAL_SPI_IRQHandler>
 800218a:	bf00      	nop
 800218c:	2000002c 	.word	0x2000002c

08002190 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <SystemInit+0x40>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <SystemInit+0x44>)
 800219e:	400a      	ands	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80021a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80021bc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80021be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80021c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <SystemInit+0x48>)
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	f8ff0000 	.word	0xf8ff0000
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021de:	e003      	b.n	80021e8 <LoopCopyDataInit>

080021e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021e6:	3104      	adds	r1, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021e8:	480a      	ldr	r0, [pc, #40]	; (8002214 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021f0:	d3f6      	bcc.n	80021e0 <CopyDataInit>
  ldr r2, =_sbss
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021f4:	e002      	b.n	80021fc <LoopFillZerobss>

080021f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021f8:	f842 3b04 	str.w	r3, [r2], #4

080021fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002200:	d3f9      	bcc.n	80021f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002202:	f7ff ffc5 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002206:	f000 f80f 	bl	8002228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800220a:	f7ff fc2f 	bl	8001a6c <main>
  bx lr
 800220e:	4770      	bx	lr
  ldr r3, =_sidata
 8002210:	080022b8 	.word	0x080022b8
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002218:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800221c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002220:	200002f4 	.word	0x200002f4

08002224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC1_2_IRQHandler>
	...

08002228 <__libc_init_array>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	2500      	movs	r5, #0
 800222c:	4e0c      	ldr	r6, [pc, #48]	; (8002260 <__libc_init_array+0x38>)
 800222e:	4c0d      	ldr	r4, [pc, #52]	; (8002264 <__libc_init_array+0x3c>)
 8002230:	1ba4      	subs	r4, r4, r6
 8002232:	10a4      	asrs	r4, r4, #2
 8002234:	42a5      	cmp	r5, r4
 8002236:	d109      	bne.n	800224c <__libc_init_array+0x24>
 8002238:	f000 f81a 	bl	8002270 <_init>
 800223c:	2500      	movs	r5, #0
 800223e:	4e0a      	ldr	r6, [pc, #40]	; (8002268 <__libc_init_array+0x40>)
 8002240:	4c0a      	ldr	r4, [pc, #40]	; (800226c <__libc_init_array+0x44>)
 8002242:	1ba4      	subs	r4, r4, r6
 8002244:	10a4      	asrs	r4, r4, #2
 8002246:	42a5      	cmp	r5, r4
 8002248:	d105      	bne.n	8002256 <__libc_init_array+0x2e>
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002250:	4798      	blx	r3
 8002252:	3501      	adds	r5, #1
 8002254:	e7ee      	b.n	8002234 <__libc_init_array+0xc>
 8002256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800225a:	4798      	blx	r3
 800225c:	3501      	adds	r5, #1
 800225e:	e7f2      	b.n	8002246 <__libc_init_array+0x1e>
 8002260:	080022b0 	.word	0x080022b0
 8002264:	080022b0 	.word	0x080022b0
 8002268:	080022b0 	.word	0x080022b0
 800226c:	080022b4 	.word	0x080022b4

08002270 <_init>:
 8002270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002272:	bf00      	nop
 8002274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002276:	bc08      	pop	{r3}
 8002278:	469e      	mov	lr, r3
 800227a:	4770      	bx	lr

0800227c <_fini>:
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	bf00      	nop
 8002280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002282:	bc08      	pop	{r3}
 8002284:	469e      	mov	lr, r3
 8002286:	4770      	bx	lr
