
OTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003700  08003700  00013700  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080037a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000594  20000070  08003818  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000604  08003818  00020604  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e7dd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003743  00000000  00000000  0003e876  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000be0c  00000000  00000000  00041fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e48  00000000  00000000  0004ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001530  00000000  00000000  0004ec10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000919a  00000000  00000000  00050140  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000555f  00000000  00000000  000592da  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005e839  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030a4  00000000  00000000  0005e8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080036e8 	.word	0x080036e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080036e8 	.word	0x080036e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_frsub>:
 8000994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000998:	e002      	b.n	80009a0 <__addsf3>
 800099a:	bf00      	nop

0800099c <__aeabi_fsub>:
 800099c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a0 <__addsf3>:
 80009a0:	0042      	lsls	r2, r0, #1
 80009a2:	bf1f      	itttt	ne
 80009a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a8:	ea92 0f03 	teqne	r2, r3
 80009ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b4:	d06a      	beq.n	8000a8c <__addsf3+0xec>
 80009b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009be:	bfc1      	itttt	gt
 80009c0:	18d2      	addgt	r2, r2, r3
 80009c2:	4041      	eorgt	r1, r0
 80009c4:	4048      	eorgt	r0, r1
 80009c6:	4041      	eorgt	r1, r0
 80009c8:	bfb8      	it	lt
 80009ca:	425b      	neglt	r3, r3
 80009cc:	2b19      	cmp	r3, #25
 80009ce:	bf88      	it	hi
 80009d0:	4770      	bxhi	lr
 80009d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009ee:	bf18      	it	ne
 80009f0:	4249      	negne	r1, r1
 80009f2:	ea92 0f03 	teq	r2, r3
 80009f6:	d03f      	beq.n	8000a78 <__addsf3+0xd8>
 80009f8:	f1a2 0201 	sub.w	r2, r2, #1
 80009fc:	fa41 fc03 	asr.w	ip, r1, r3
 8000a00:	eb10 000c 	adds.w	r0, r0, ip
 8000a04:	f1c3 0320 	rsb	r3, r3, #32
 8000a08:	fa01 f103 	lsl.w	r1, r1, r3
 8000a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a10:	d502      	bpl.n	8000a18 <__addsf3+0x78>
 8000a12:	4249      	negs	r1, r1
 8000a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a1c:	d313      	bcc.n	8000a46 <__addsf3+0xa6>
 8000a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a22:	d306      	bcc.n	8000a32 <__addsf3+0x92>
 8000a24:	0840      	lsrs	r0, r0, #1
 8000a26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a2a:	f102 0201 	add.w	r2, r2, #1
 8000a2e:	2afe      	cmp	r2, #254	; 0xfe
 8000a30:	d251      	bcs.n	8000ad6 <__addsf3+0x136>
 8000a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3a:	bf08      	it	eq
 8000a3c:	f020 0001 	biceq.w	r0, r0, #1
 8000a40:	ea40 0003 	orr.w	r0, r0, r3
 8000a44:	4770      	bx	lr
 8000a46:	0049      	lsls	r1, r1, #1
 8000a48:	eb40 0000 	adc.w	r0, r0, r0
 8000a4c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	d1ed      	bne.n	8000a32 <__addsf3+0x92>
 8000a56:	fab0 fc80 	clz	ip, r0
 8000a5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a66:	bfaa      	itet	ge
 8000a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a6c:	4252      	neglt	r2, r2
 8000a6e:	4318      	orrge	r0, r3
 8000a70:	bfbc      	itt	lt
 8000a72:	40d0      	lsrlt	r0, r2
 8000a74:	4318      	orrlt	r0, r3
 8000a76:	4770      	bx	lr
 8000a78:	f092 0f00 	teq	r2, #0
 8000a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a80:	bf06      	itte	eq
 8000a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a86:	3201      	addeq	r2, #1
 8000a88:	3b01      	subne	r3, #1
 8000a8a:	e7b5      	b.n	80009f8 <__addsf3+0x58>
 8000a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9a:	d021      	beq.n	8000ae0 <__addsf3+0x140>
 8000a9c:	ea92 0f03 	teq	r2, r3
 8000aa0:	d004      	beq.n	8000aac <__addsf3+0x10c>
 8000aa2:	f092 0f00 	teq	r2, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	4608      	moveq	r0, r1
 8000aaa:	4770      	bx	lr
 8000aac:	ea90 0f01 	teq	r0, r1
 8000ab0:	bf1c      	itt	ne
 8000ab2:	2000      	movne	r0, #0
 8000ab4:	4770      	bxne	lr
 8000ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aba:	d104      	bne.n	8000ac6 <__addsf3+0x126>
 8000abc:	0040      	lsls	r0, r0, #1
 8000abe:	bf28      	it	cs
 8000ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ac4:	4770      	bx	lr
 8000ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aca:	bf3c      	itt	cc
 8000acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad0:	4770      	bxcc	lr
 8000ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ade:	4770      	bx	lr
 8000ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ae4:	bf16      	itet	ne
 8000ae6:	4608      	movne	r0, r1
 8000ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aec:	4601      	movne	r1, r0
 8000aee:	0242      	lsls	r2, r0, #9
 8000af0:	bf06      	itte	eq
 8000af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000af6:	ea90 0f01 	teqeq	r0, r1
 8000afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_ui2f>:
 8000b00:	f04f 0300 	mov.w	r3, #0
 8000b04:	e004      	b.n	8000b10 <__aeabi_i2f+0x8>
 8000b06:	bf00      	nop

08000b08 <__aeabi_i2f>:
 8000b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b0c:	bf48      	it	mi
 8000b0e:	4240      	negmi	r0, r0
 8000b10:	ea5f 0c00 	movs.w	ip, r0
 8000b14:	bf08      	it	eq
 8000b16:	4770      	bxeq	lr
 8000b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b1c:	4601      	mov	r1, r0
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	e01c      	b.n	8000b5e <__aeabi_l2f+0x2a>

08000b24 <__aeabi_ul2f>:
 8000b24:	ea50 0201 	orrs.w	r2, r0, r1
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f04f 0300 	mov.w	r3, #0
 8000b30:	e00a      	b.n	8000b48 <__aeabi_l2f+0x14>
 8000b32:	bf00      	nop

08000b34 <__aeabi_l2f>:
 8000b34:	ea50 0201 	orrs.w	r2, r0, r1
 8000b38:	bf08      	it	eq
 8000b3a:	4770      	bxeq	lr
 8000b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__aeabi_l2f+0x14>
 8000b42:	4240      	negs	r0, r0
 8000b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b48:	ea5f 0c01 	movs.w	ip, r1
 8000b4c:	bf02      	ittt	eq
 8000b4e:	4684      	moveq	ip, r0
 8000b50:	4601      	moveq	r1, r0
 8000b52:	2000      	moveq	r0, #0
 8000b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b58:	bf08      	it	eq
 8000b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b62:	fabc f28c 	clz	r2, ip
 8000b66:	3a08      	subs	r2, #8
 8000b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b6c:	db10      	blt.n	8000b90 <__aeabi_l2f+0x5c>
 8000b6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b72:	4463      	add	r3, ip
 8000b74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b78:	f1c2 0220 	rsb	r2, r2, #32
 8000b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b80:	fa20 f202 	lsr.w	r2, r0, r2
 8000b84:	eb43 0002 	adc.w	r0, r3, r2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f102 0220 	add.w	r2, r2, #32
 8000b94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b98:	f1c2 0220 	rsb	r2, r2, #32
 8000b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ba4:	eb43 0002 	adc.w	r0, r3, r2
 8000ba8:	bf08      	it	eq
 8000baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_fmul>:
 8000bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb8:	bf1e      	ittt	ne
 8000bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bbe:	ea92 0f0c 	teqne	r2, ip
 8000bc2:	ea93 0f0c 	teqne	r3, ip
 8000bc6:	d06f      	beq.n	8000ca8 <__aeabi_fmul+0xf8>
 8000bc8:	441a      	add	r2, r3
 8000bca:	ea80 0c01 	eor.w	ip, r0, r1
 8000bce:	0240      	lsls	r0, r0, #9
 8000bd0:	bf18      	it	ne
 8000bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bd6:	d01e      	beq.n	8000c16 <__aeabi_fmul+0x66>
 8000bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000be4:	fba0 3101 	umull	r3, r1, r0, r1
 8000be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf0:	bf3e      	ittt	cc
 8000bf2:	0049      	lslcc	r1, r1, #1
 8000bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf8:	005b      	lslcc	r3, r3, #1
 8000bfa:	ea40 0001 	orr.w	r0, r0, r1
 8000bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c02:	2afd      	cmp	r2, #253	; 0xfd
 8000c04:	d81d      	bhi.n	8000c42 <__aeabi_fmul+0x92>
 8000c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	4770      	bx	lr
 8000c16:	f090 0f00 	teq	r0, #0
 8000c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c1e:	bf08      	it	eq
 8000c20:	0249      	lsleq	r1, r1, #9
 8000c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c2a:	3a7f      	subs	r2, #127	; 0x7f
 8000c2c:	bfc2      	ittt	gt
 8000c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c36:	4770      	bxgt	lr
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	3a01      	subs	r2, #1
 8000c42:	dc5d      	bgt.n	8000d00 <__aeabi_fmul+0x150>
 8000c44:	f112 0f19 	cmn.w	r2, #25
 8000c48:	bfdc      	itt	le
 8000c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c4e:	4770      	bxle	lr
 8000c50:	f1c2 0200 	rsb	r2, r2, #0
 8000c54:	0041      	lsls	r1, r0, #1
 8000c56:	fa21 f102 	lsr.w	r1, r1, r2
 8000c5a:	f1c2 0220 	rsb	r2, r2, #32
 8000c5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c66:	f140 0000 	adc.w	r0, r0, #0
 8000c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c6e:	bf08      	it	eq
 8000c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c74:	4770      	bx	lr
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c7e:	bf02      	ittt	eq
 8000c80:	0040      	lsleq	r0, r0, #1
 8000c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c86:	3a01      	subeq	r2, #1
 8000c88:	d0f9      	beq.n	8000c7e <__aeabi_fmul+0xce>
 8000c8a:	ea40 000c 	orr.w	r0, r0, ip
 8000c8e:	f093 0f00 	teq	r3, #0
 8000c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c96:	bf02      	ittt	eq
 8000c98:	0049      	lsleq	r1, r1, #1
 8000c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c9e:	3b01      	subeq	r3, #1
 8000ca0:	d0f9      	beq.n	8000c96 <__aeabi_fmul+0xe6>
 8000ca2:	ea41 010c 	orr.w	r1, r1, ip
 8000ca6:	e78f      	b.n	8000bc8 <__aeabi_fmul+0x18>
 8000ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cac:	ea92 0f0c 	teq	r2, ip
 8000cb0:	bf18      	it	ne
 8000cb2:	ea93 0f0c 	teqne	r3, ip
 8000cb6:	d00a      	beq.n	8000cce <__aeabi_fmul+0x11e>
 8000cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cbc:	bf18      	it	ne
 8000cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cc2:	d1d8      	bne.n	8000c76 <__aeabi_fmul+0xc6>
 8000cc4:	ea80 0001 	eor.w	r0, r0, r1
 8000cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	4770      	bx	lr
 8000cce:	f090 0f00 	teq	r0, #0
 8000cd2:	bf17      	itett	ne
 8000cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	f091 0f00 	teqne	r1, #0
 8000cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ce2:	d014      	beq.n	8000d0e <__aeabi_fmul+0x15e>
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	d101      	bne.n	8000cee <__aeabi_fmul+0x13e>
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	d10f      	bne.n	8000d0e <__aeabi_fmul+0x15e>
 8000cee:	ea93 0f0c 	teq	r3, ip
 8000cf2:	d103      	bne.n	8000cfc <__aeabi_fmul+0x14c>
 8000cf4:	024b      	lsls	r3, r1, #9
 8000cf6:	bf18      	it	ne
 8000cf8:	4608      	movne	r0, r1
 8000cfa:	d108      	bne.n	8000d0e <__aeabi_fmul+0x15e>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0c:	4770      	bx	lr
 8000d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fdiv>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d069      	beq.n	8000e04 <__aeabi_fdiv+0xec>
 8000d30:	eba2 0203 	sub.w	r2, r2, r3
 8000d34:	ea80 0c01 	eor.w	ip, r0, r1
 8000d38:	0249      	lsls	r1, r1, #9
 8000d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d3e:	d037      	beq.n	8000db0 <__aeabi_fdiv+0x98>
 8000d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d50:	428b      	cmp	r3, r1
 8000d52:	bf38      	it	cc
 8000d54:	005b      	lslcc	r3, r3, #1
 8000d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	bf24      	itt	cs
 8000d62:	1a5b      	subcs	r3, r3, r1
 8000d64:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d6c:	bf24      	itt	cs
 8000d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d7a:	bf24      	itt	cs
 8000d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d88:	bf24      	itt	cs
 8000d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d9a:	d1e0      	bne.n	8000d5e <__aeabi_fdiv+0x46>
 8000d9c:	2afd      	cmp	r2, #253	; 0xfd
 8000d9e:	f63f af50 	bhi.w	8000c42 <__aeabi_fmul+0x92>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db8:	327f      	adds	r2, #127	; 0x7f
 8000dba:	bfc2      	ittt	gt
 8000dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc4:	4770      	bxgt	lr
 8000dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	3a01      	subs	r2, #1
 8000dd0:	e737      	b.n	8000c42 <__aeabi_fmul+0x92>
 8000dd2:	f092 0f00 	teq	r2, #0
 8000dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0040      	lsleq	r0, r0, #1
 8000dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000de2:	3a01      	subeq	r2, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fdiv+0xc2>
 8000de6:	ea40 000c 	orr.w	r0, r0, ip
 8000dea:	f093 0f00 	teq	r3, #0
 8000dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0049      	lsleq	r1, r1, #1
 8000df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dfa:	3b01      	subeq	r3, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fdiv+0xda>
 8000dfe:	ea41 010c 	orr.w	r1, r1, ip
 8000e02:	e795      	b.n	8000d30 <__aeabi_fdiv+0x18>
 8000e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d108      	bne.n	8000e20 <__aeabi_fdiv+0x108>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	f47f af7d 	bne.w	8000d0e <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	f47f af70 	bne.w	8000cfc <__aeabi_fmul+0x14c>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e776      	b.n	8000d0e <__aeabi_fmul+0x15e>
 8000e20:	ea93 0f0c 	teq	r3, ip
 8000e24:	d104      	bne.n	8000e30 <__aeabi_fdiv+0x118>
 8000e26:	024b      	lsls	r3, r1, #9
 8000e28:	f43f af4c 	beq.w	8000cc4 <__aeabi_fmul+0x114>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e76e      	b.n	8000d0e <__aeabi_fmul+0x15e>
 8000e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e34:	bf18      	it	ne
 8000e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	d1ca      	bne.n	8000dd2 <__aeabi_fdiv+0xba>
 8000e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e40:	f47f af5c 	bne.w	8000cfc <__aeabi_fmul+0x14c>
 8000e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e48:	f47f af3c 	bne.w	8000cc4 <__aeabi_fmul+0x114>
 8000e4c:	e75f      	b.n	8000d0e <__aeabi_fmul+0x15e>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_f2uiz>:
 8000e50:	0042      	lsls	r2, r0, #1
 8000e52:	d20e      	bcs.n	8000e72 <__aeabi_f2uiz+0x22>
 8000e54:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e58:	d30b      	bcc.n	8000e72 <__aeabi_f2uiz+0x22>
 8000e5a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e62:	d409      	bmi.n	8000e78 <__aeabi_f2uiz+0x28>
 8000e64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e70:	4770      	bx	lr
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	4770      	bx	lr
 8000e78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_f2uiz+0x32>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d102      	bne.n	8000e88 <__aeabi_f2uiz+0x38>
 8000e82:	f04f 30ff 	mov.w	r0, #4294967295
 8000e86:	4770      	bx	lr
 8000e88:	f04f 0000 	mov.w	r0, #0
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_InitTick+0x3c>)
{
 8000e94:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e96:	7818      	ldrb	r0, [r3, #0]
 8000e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <HAL_InitTick+0x40>)
 8000ea2:	6810      	ldr	r0, [r2, #0]
 8000ea4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ea8:	f000 faee 	bl	8001488 <HAL_SYSTICK_Config>
 8000eac:	4604      	mov	r4, r0
 8000eae:	b958      	cbnz	r0, 8000ec8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb0:	2d0f      	cmp	r5, #15
 8000eb2:	d809      	bhi.n	8000ec8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 faa4 	bl	8001408 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <HAL_InitTick+0x44>)
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	601d      	str	r5, [r3, #0]
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ec8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000eca:	bd38      	pop	{r3, r4, r5, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x20>)
{
 8000eda:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ede:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	f000 fa7d 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff ffd0 	bl	8000e90 <HAL_InitTick>
  HAL_MspInit();
 8000ef0:	f002 f87e 	bl	8002ff0 <HAL_MspInit>
}
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	bd08      	pop	{r3, pc}
 8000ef8:	40022000 	.word	0x40022000

08000efc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000efc:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_IncTick+0x10>)
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HAL_IncTick+0x14>)
 8000f00:	6811      	ldr	r1, [r2, #0]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	440b      	add	r3, r1
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000009c 	.word	0x2000009c
 8000f10:	20000000 	.word	0x20000000

08000f14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f14:	4b01      	ldr	r3, [pc, #4]	; (8000f1c <HAL_GetTick+0x8>)
 8000f16:	6818      	ldr	r0, [r3, #0]
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	2000009c 	.word	0x2000009c

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b538      	push	{r3, r4, r5, lr}
 8000f22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff fff6 	bl	8000f14 <HAL_GetTick>
 8000f28:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	4b04      	ldrne	r3, [pc, #16]	; (8000f40 <HAL_Delay+0x20>)
 8000f30:	781b      	ldrbne	r3, [r3, #0]
 8000f32:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	1b40      	subs	r0, r0, r5
 8000f3a:	4284      	cmp	r4, r0
 8000f3c:	d8fa      	bhi.n	8000f34 <HAL_Delay+0x14>
  {
  }
}
 8000f3e:	bd38      	pop	{r3, r4, r5, pc}
 8000f40:	20000000 	.word	0x20000000

08000f44 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f44:	6803      	ldr	r3, [r0, #0]
 8000f46:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000f4c:	2300      	movs	r3, #0
{ 
 8000f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000f50:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f52:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d074      	beq.n	8001044 <HAL_ADC_ConfigChannel+0xf8>
 8000f5a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f5c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000f5e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000f62:	2d06      	cmp	r5, #6
 8000f64:	6802      	ldr	r2, [r0, #0]
 8000f66:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000f6a:	680c      	ldr	r4, [r1, #0]
 8000f6c:	d825      	bhi.n	8000fba <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f6e:	442b      	add	r3, r5
 8000f70:	251f      	movs	r5, #31
 8000f72:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000f74:	3b05      	subs	r3, #5
 8000f76:	409d      	lsls	r5, r3
 8000f78:	ea26 0505 	bic.w	r5, r6, r5
 8000f7c:	fa04 f303 	lsl.w	r3, r4, r3
 8000f80:	432b      	orrs	r3, r5
 8000f82:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f84:	2c09      	cmp	r4, #9
 8000f86:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000f8a:	688d      	ldr	r5, [r1, #8]
 8000f8c:	d92f      	bls.n	8000fee <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f8e:	2607      	movs	r6, #7
 8000f90:	4423      	add	r3, r4
 8000f92:	68d1      	ldr	r1, [r2, #12]
 8000f94:	3b1e      	subs	r3, #30
 8000f96:	409e      	lsls	r6, r3
 8000f98:	ea21 0106 	bic.w	r1, r1, r6
 8000f9c:	fa05 f303 	lsl.w	r3, r5, r3
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fa4:	f1a4 0310 	sub.w	r3, r4, #16
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d92b      	bls.n	8001004 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000fba:	2d0c      	cmp	r5, #12
 8000fbc:	d80b      	bhi.n	8000fd6 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fbe:	442b      	add	r3, r5
 8000fc0:	251f      	movs	r5, #31
 8000fc2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000fc4:	3b23      	subs	r3, #35	; 0x23
 8000fc6:	409d      	lsls	r5, r3
 8000fc8:	ea26 0505 	bic.w	r5, r6, r5
 8000fcc:	fa04 f303 	lsl.w	r3, r4, r3
 8000fd0:	432b      	orrs	r3, r5
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd4:	e7d6      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fd6:	442b      	add	r3, r5
 8000fd8:	251f      	movs	r5, #31
 8000fda:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000fdc:	3b41      	subs	r3, #65	; 0x41
 8000fde:	409d      	lsls	r5, r3
 8000fe0:	ea26 0505 	bic.w	r5, r6, r5
 8000fe4:	fa04 f303 	lsl.w	r3, r4, r3
 8000fe8:	432b      	orrs	r3, r5
 8000fea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fec:	e7ca      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fee:	2607      	movs	r6, #7
 8000ff0:	6911      	ldr	r1, [r2, #16]
 8000ff2:	4423      	add	r3, r4
 8000ff4:	409e      	lsls	r6, r3
 8000ff6:	ea21 0106 	bic.w	r1, r1, r6
 8000ffa:	fa05 f303 	lsl.w	r3, r5, r3
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6113      	str	r3, [r2, #16]
 8001002:	e7cf      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_ADC_ConfigChannel+0xfc>)
 8001006:	429a      	cmp	r2, r3
 8001008:	d116      	bne.n	8001038 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800100a:	6893      	ldr	r3, [r2, #8]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	d4cd      	bmi.n	8000fac <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001010:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001012:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001014:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001018:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800101a:	d1c7      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_ADC_ConfigChannel+0x100>)
 800101e:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <HAL_ADC_ConfigChannel+0x104>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	fbb3 f2f2 	udiv	r2, r3, r2
 8001026:	230a      	movs	r3, #10
 8001028:	4353      	muls	r3, r2
            wait_loop_index--;
 800102a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800102c:	9b01      	ldr	r3, [sp, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0bc      	beq.n	8000fac <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8001032:	9b01      	ldr	r3, [sp, #4]
 8001034:	3b01      	subs	r3, #1
 8001036:	e7f8      	b.n	800102a <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001038:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e7b4      	b.n	8000fae <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001044:	2302      	movs	r3, #2
 8001046:	e7b5      	b.n	8000fb4 <HAL_ADC_ConfigChannel+0x68>
 8001048:	40012400 	.word	0x40012400
 800104c:	20000008 	.word	0x20000008
 8001050:	000f4240 	.word	0x000f4240

08001054 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001054:	2300      	movs	r3, #0
{
 8001056:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001058:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800105a:	6803      	ldr	r3, [r0, #0]
{
 800105c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	07d2      	lsls	r2, r2, #31
 8001062:	d502      	bpl.n	800106a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001064:	2000      	movs	r0, #0
}
 8001066:	b002      	add	sp, #8
 8001068:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	f042 0201 	orr.w	r2, r2, #1
 8001070:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <ADC_Enable+0x68>)
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <ADC_Enable+0x6c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800107c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800107e:	9b01      	ldr	r3, [sp, #4]
 8001080:	b9c3      	cbnz	r3, 80010b4 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001082:	f7ff ff47 	bl	8000f14 <HAL_GetTick>
 8001086:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	689d      	ldr	r5, [r3, #8]
 800108c:	f015 0501 	ands.w	r5, r5, #1
 8001090:	d1e8      	bne.n	8001064 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001092:	f7ff ff3f 	bl	8000f14 <HAL_GetTick>
 8001096:	1b80      	subs	r0, r0, r6
 8001098:	2802      	cmp	r0, #2
 800109a:	d9f5      	bls.n	8001088 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800109e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80010aa:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010b2:	e7d8      	b.n	8001066 <ADC_Enable+0x12>
      wait_loop_index--;
 80010b4:	9b01      	ldr	r3, [sp, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	e7e0      	b.n	800107c <ADC_Enable+0x28>
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	000f4240 	.word	0x000f4240

080010c4 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80010c4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80010c8:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80010ca:	2b01      	cmp	r3, #1
{
 80010cc:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80010ce:	d054      	beq.n	800117a <HAL_ADC_Start+0xb6>
 80010d0:	2301      	movs	r3, #1
 80010d2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80010d6:	f7ff ffbd 	bl	8001054 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80010da:	2800      	cmp	r0, #0
 80010dc:	d149      	bne.n	8001172 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80010de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010e0:	4a27      	ldr	r2, [pc, #156]	; (8001180 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010e6:	f023 0301 	bic.w	r3, r3, #1
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d104      	bne.n	8001100 <HAL_ADC_Start+0x3c>
 80010f6:	4923      	ldr	r1, [pc, #140]	; (8001184 <HAL_ADC_Start+0xc0>)
 80010f8:	684a      	ldr	r2, [r1, #4]
 80010fa:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80010fe:	d12e      	bne.n	800115e <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001100:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001102:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001106:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001108:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800110a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800110c:	bf41      	itttt	mi
 800110e:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8001110:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001114:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001118:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800111a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800111c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001120:	bf1c      	itt	ne
 8001122:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8001124:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001128:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800112a:	2200      	movs	r2, #0
 800112c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001130:	f06f 0202 	mvn.w	r2, #2
 8001134:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800113c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001140:	d113      	bne.n	800116a <HAL_ADC_Start+0xa6>
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <HAL_ADC_Start+0xbc>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d105      	bne.n	8001154 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001148:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800114c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800114e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001152:	d10a      	bne.n	800116a <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800115e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001160:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001164:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001166:	684a      	ldr	r2, [r1, #4]
 8001168:	e7cf      	b.n	800110a <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001170:	e7f3      	b.n	800115a <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8001172:	2300      	movs	r3, #0
 8001174:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001178:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800117a:	2002      	movs	r0, #2
}
 800117c:	bd10      	pop	{r4, pc}
 800117e:	bf00      	nop
 8001180:	40012800 	.word	0x40012800
 8001184:	40012400 	.word	0x40012400

08001188 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001188:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800118a:	6803      	ldr	r3, [r0, #0]
{
 800118c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	07d2      	lsls	r2, r2, #31
 8001192:	d401      	bmi.n	8001198 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001194:	2000      	movs	r0, #0
 8001196:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80011a0:	f7ff feb8 	bl	8000f14 <HAL_GetTick>
 80011a4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	07db      	lsls	r3, r3, #31
 80011ac:	d5f2      	bpl.n	8001194 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011ae:	f7ff feb1 	bl	8000f14 <HAL_GetTick>
 80011b2:	1b40      	subs	r0, r0, r5
 80011b4:	2802      	cmp	r0, #2
 80011b6:	d9f6      	bls.n	80011a6 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ba:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011ca:	bd38      	pop	{r3, r4, r5, pc}

080011cc <HAL_ADC_Init>:
{
 80011cc:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80011ce:	4604      	mov	r4, r0
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d071      	beq.n	80012b8 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011d6:	b923      	cbnz	r3, 80011e2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80011d8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80011da:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80011de:	f001 ff4d 	bl	800307c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff ffd0 	bl	8001188 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011ea:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80011ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f0:	d164      	bne.n	80012bc <HAL_ADC_Init+0xf0>
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d162      	bne.n	80012bc <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80011f6:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80011f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80011fc:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80011fe:	f023 0302 	bic.w	r3, r3, #2
 8001202:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001206:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001208:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800120a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800120c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800120e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001212:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001216:	d038      	beq.n	800128a <HAL_ADC_Init+0xbe>
 8001218:	2901      	cmp	r1, #1
 800121a:	bf14      	ite	ne
 800121c:	4606      	movne	r6, r0
 800121e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001222:	6965      	ldr	r5, [r4, #20]
 8001224:	2d01      	cmp	r5, #1
 8001226:	d107      	bne.n	8001238 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001228:	2b00      	cmp	r3, #0
 800122a:	d130      	bne.n	800128e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800122c:	69a3      	ldr	r3, [r4, #24]
 800122e:	3b01      	subs	r3, #1
 8001230:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001234:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001238:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800123a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800123e:	685d      	ldr	r5, [r3, #4]
 8001240:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001244:	ea45 0506 	orr.w	r5, r5, r6
 8001248:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800124a:	689e      	ldr	r6, [r3, #8]
 800124c:	4d1d      	ldr	r5, [pc, #116]	; (80012c4 <HAL_ADC_Init+0xf8>)
 800124e:	ea05 0506 	and.w	r5, r5, r6
 8001252:	ea45 0502 	orr.w	r5, r5, r2
 8001256:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001258:	d001      	beq.n	800125e <HAL_ADC_Init+0x92>
 800125a:	2901      	cmp	r1, #1
 800125c:	d120      	bne.n	80012a0 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800125e:	6921      	ldr	r1, [r4, #16]
 8001260:	3901      	subs	r1, #1
 8001262:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001264:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001266:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800126a:	4329      	orrs	r1, r5
 800126c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800126e:	6899      	ldr	r1, [r3, #8]
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_ADC_Init+0xfc>)
 8001272:	400b      	ands	r3, r1
 8001274:	429a      	cmp	r2, r3
 8001276:	d115      	bne.n	80012a4 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001278:	2300      	movs	r3, #0
 800127a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800127c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800127e:	f023 0303 	bic.w	r3, r3, #3
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	62a3      	str	r3, [r4, #40]	; 0x28
 8001288:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800128a:	460e      	mov	r6, r1
 800128c:	e7c9      	b.n	8001222 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800128e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001296:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800129e:	e7cb      	b.n	8001238 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80012a0:	2100      	movs	r1, #0
 80012a2:	e7df      	b.n	8001264 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80012a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012a6:	f023 0312 	bic.w	r3, r3, #18
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80012b8:	2001      	movs	r0, #1
}
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80012c2:	e7f9      	b.n	80012b8 <HAL_ADC_Init+0xec>
 80012c4:	ffe1f7fd 	.word	0xffe1f7fd
 80012c8:	ff1f0efe 	.word	0xff1f0efe

080012cc <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 80012cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0U;
  uint32_t tmp_mcr = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 80012ce:	4604      	mov	r4, r0
 80012d0:	2800      	cmp	r0, #0
 80012d2:	d069      	beq.n	80013a8 <HAL_CAN_Init+0xdc>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 80012d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012dc:	b91b      	cbnz	r3, 80012e6 <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 80012de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 80012e2:	f001 fefb 	bl	80030dc <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 80012e6:	2302      	movs	r3, #2
 80012e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	f022 0202 	bic.w	r2, r2, #2
 80012f4:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f042 0201 	orr.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 80012fe:	f7ff fe09 	bl	8000f14 <HAL_GetTick>
 8001302:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001304:	6822      	ldr	r2, [r4, #0]
 8001306:	6855      	ldr	r5, [r2, #4]
 8001308:	f015 0501 	ands.w	r5, r5, #1
 800130c:	d04e      	beq.n	80013ac <HAL_CAN_Init+0xe0>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800130e:	6853      	ldr	r3, [r2, #4]
 8001310:	07d9      	lsls	r1, r3, #31
 8001312:	d546      	bpl.n	80013a2 <HAL_CAN_Init+0xd6>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8001314:	69a3      	ldr	r3, [r4, #24]
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8001316:	69e1      	ldr	r1, [r4, #28]
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 8001318:	2b01      	cmp	r3, #1
 800131a:	bf0c      	ite	eq
 800131c:	2380      	moveq	r3, #128	; 0x80
 800131e:	2300      	movne	r3, #0
    if (hcan->Init.ABOM == ENABLE)
 8001320:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8001322:	6a21      	ldr	r1, [r4, #32]
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8001324:	bf0c      	ite	eq
 8001326:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 800132a:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 800132e:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
    }
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8001330:	6a61      	ldr	r1, [r4, #36]	; 0x24
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 8001332:	bf0c      	ite	eq
 8001334:	f043 0320 	orreq.w	r3, r3, #32
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 8001338:	f023 0320 	bicne.w	r3, r3, #32
    if (hcan->Init.NART == ENABLE)
 800133c:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 800133e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 8001340:	bf0c      	ite	eq
 8001342:	f043 0310 	orreq.w	r3, r3, #16
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 8001346:	f023 0310 	bicne.w	r3, r3, #16
    if (hcan->Init.RFLM == ENABLE)
 800134a:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
    }
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 800134c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 800134e:	bf0c      	ite	eq
 8001350:	f043 0308 	orreq.w	r3, r3, #8
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 8001354:	f023 0308 	bicne.w	r3, r3, #8
    if (hcan->Init.TXFP == ENABLE)
 8001358:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 800135a:	6811      	ldr	r1, [r2, #0]
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 800135c:	bf0c      	ite	eq
 800135e:	f043 0304 	orreq.w	r3, r3, #4
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 8001362:	f023 0304 	bicne.w	r3, r3, #4
    MODIFY_REG(hcan->Instance->MCR,
 8001366:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 800136a:	430b      	orrs	r3, r1
 800136c:	6013      	str	r3, [r2, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800136e:	68e1      	ldr	r1, [r4, #12]
 8001370:	68a3      	ldr	r3, [r4, #8]
 8001372:	430b      	orrs	r3, r1
 8001374:	6921      	ldr	r1, [r4, #16]
 8001376:	430b      	orrs	r3, r1
 8001378:	6961      	ldr	r1, [r4, #20]
 800137a:	430b      	orrs	r3, r1
 800137c:	6861      	ldr	r1, [r4, #4]
 800137e:	3901      	subs	r1, #1
 8001380:	430b      	orrs	r3, r1
 8001382:	61d3      	str	r3, [r2, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U)));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001384:	6813      	ldr	r3, [r2, #0]
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	6013      	str	r3, [r2, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 800138c:	f7ff fdc2 	bl	8000f14 <HAL_GetTick>
 8001390:	4605      	mov	r5, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	07d2      	lsls	r2, r2, #31
 8001398:	d413      	bmi.n	80013c2 <HAL_CAN_Init+0xf6>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800139a:	6858      	ldr	r0, [r3, #4]
 800139c:	f010 0001 	ands.w	r0, r0, #1
 80013a0:	d01b      	beq.n	80013da <HAL_CAN_Init+0x10e>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80013a2:	2304      	movs	r3, #4
 80013a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 80013a8:	2001      	movs	r0, #1
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80013ac:	f7ff fdb2 	bl	8000f14 <HAL_GetTick>
 80013b0:	1b80      	subs	r0, r0, r6
 80013b2:	280a      	cmp	r0, #10
 80013b4:	d9a6      	bls.n	8001304 <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80013b6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 80013b8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80013bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80013c2:	f7ff fda7 	bl	8000f14 <HAL_GetTick>
 80013c6:	1b40      	subs	r0, r0, r5
 80013c8:	280a      	cmp	r0, #10
 80013ca:	d9e2      	bls.n	8001392 <HAL_CAN_Init+0xc6>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 80013cc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 80013ce:	2300      	movs	r3, #0
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 80013d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_UNLOCK(hcan);
 80013d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80013d8:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 80013da:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013dc:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 80013de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  }
}
 80013e2:	bd70      	pop	{r4, r5, r6, pc}

080013e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80013e6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80013ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80013fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001400:	60d3      	str	r3, [r2, #12]
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140a:	b530      	push	{r4, r5, lr}
 800140c:	68dc      	ldr	r4, [r3, #12]
 800140e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001412:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	2b04      	cmp	r3, #4
 800141a:	bf28      	it	cs
 800141c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001424:	bf98      	it	ls
 8001426:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	fa05 f303 	lsl.w	r3, r5, r3
 800142c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001430:	bf88      	it	hi
 8001432:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4019      	ands	r1, r3
 8001436:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	fa05 f404 	lsl.w	r4, r5, r4
 800143c:	3c01      	subs	r4, #1
 800143e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001440:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001442:	ea42 0201 	orr.w	r2, r2, r1
 8001446:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	bfaf      	iteee	ge
 800144c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	4b06      	ldrlt	r3, [pc, #24]	; (800146c <HAL_NVIC_SetPriority+0x64>)
 8001452:	f000 000f 	andlt.w	r0, r0, #15
 8001456:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	bfa5      	ittet	ge
 800145a:	b2d2      	uxtbge	r2, r2
 800145c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001466:	bd30      	pop	{r4, r5, pc}
 8001468:	e000ed00 	.word	0xe000ed00
 800146c:	e000ed14 	.word	0xe000ed14

08001470 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001470:	2301      	movs	r3, #1
 8001472:	0942      	lsrs	r2, r0, #5
 8001474:	f000 001f 	and.w	r0, r0, #31
 8001478:	fa03 f000 	lsl.w	r0, r3, r0
 800147c:	4b01      	ldr	r3, [pc, #4]	; (8001484 <HAL_NVIC_EnableIRQ+0x14>)
 800147e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100

08001488 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	3801      	subs	r0, #1
 800148a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800148e:	d20a      	bcs.n	80014a6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80014b6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	bf0c      	ite	eq
 80014bc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014c0:	f022 0204 	bicne.w	r2, r2, #4
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	4770      	bx	lr
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80014cc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80014ce:	f001 faab 	bl	8002a28 <HAL_SYSTICK_Callback>
 80014d2:	bd08      	pop	{r3, pc}

080014d4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014d4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80014d8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d003      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014de:	2304      	movs	r3, #4
 80014e0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
 80014e4:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e6:	6803      	ldr	r3, [r0, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f022 020e 	bic.w	r2, r2, #14
 80014ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_DMA_Abort_IT+0x88>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01f      	beq.n	800153e <HAL_DMA_Abort_IT+0x6a>
 80014fe:	3214      	adds	r2, #20
 8001500:	4293      	cmp	r3, r2
 8001502:	d01e      	beq.n	8001542 <HAL_DMA_Abort_IT+0x6e>
 8001504:	3214      	adds	r2, #20
 8001506:	4293      	cmp	r3, r2
 8001508:	d01d      	beq.n	8001546 <HAL_DMA_Abort_IT+0x72>
 800150a:	3214      	adds	r2, #20
 800150c:	4293      	cmp	r3, r2
 800150e:	d01d      	beq.n	800154c <HAL_DMA_Abort_IT+0x78>
 8001510:	3214      	adds	r2, #20
 8001512:	4293      	cmp	r3, r2
 8001514:	d01d      	beq.n	8001552 <HAL_DMA_Abort_IT+0x7e>
 8001516:	3214      	adds	r2, #20
 8001518:	4293      	cmp	r3, r2
 800151a:	bf0c      	ite	eq
 800151c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001520:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001526:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001528:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800152a:	2301      	movs	r3, #1
 800152c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001530:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001532:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001536:	b17b      	cbz	r3, 8001558 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8001538:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	4620      	mov	r0, r4
 800153c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800153e:	2301      	movs	r3, #1
 8001540:	e7f0      	b.n	8001524 <HAL_DMA_Abort_IT+0x50>
 8001542:	2310      	movs	r3, #16
 8001544:	e7ee      	b.n	8001524 <HAL_DMA_Abort_IT+0x50>
 8001546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154a:	e7eb      	b.n	8001524 <HAL_DMA_Abort_IT+0x50>
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	e7e8      	b.n	8001524 <HAL_DMA_Abort_IT+0x50>
 8001552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001556:	e7e5      	b.n	8001524 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800155a:	bd10      	pop	{r4, pc}
 800155c:	40020008 	.word	0x40020008
 8001560:	40020000 	.word	0x40020000

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001568:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800156a:	4616      	mov	r6, r2
 800156c:	4b65      	ldr	r3, [pc, #404]	; (8001704 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800156e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001714 <HAL_GPIO_Init+0x1b0>
 8001572:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001718 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001576:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800157c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001580:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001584:	45a0      	cmp	r8, r4
 8001586:	d17f      	bne.n	8001688 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001588:	684d      	ldr	r5, [r1, #4]
 800158a:	2d12      	cmp	r5, #18
 800158c:	f000 80af 	beq.w	80016ee <HAL_GPIO_Init+0x18a>
 8001590:	f200 8088 	bhi.w	80016a4 <HAL_GPIO_Init+0x140>
 8001594:	2d02      	cmp	r5, #2
 8001596:	f000 80a7 	beq.w	80016e8 <HAL_GPIO_Init+0x184>
 800159a:	d87c      	bhi.n	8001696 <HAL_GPIO_Init+0x132>
 800159c:	2d00      	cmp	r5, #0
 800159e:	f000 808e 	beq.w	80016be <HAL_GPIO_Init+0x15a>
 80015a2:	2d01      	cmp	r5, #1
 80015a4:	f000 809e 	beq.w	80016e4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ac:	2cff      	cmp	r4, #255	; 0xff
 80015ae:	bf93      	iteet	ls
 80015b0:	4682      	movls	sl, r0
 80015b2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80015b6:	3d08      	subhi	r5, #8
 80015b8:	f8d0 b000 	ldrls.w	fp, [r0]
 80015bc:	bf92      	itee	ls
 80015be:	00b5      	lslls	r5, r6, #2
 80015c0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80015c4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c6:	fa09 f805 	lsl.w	r8, r9, r5
 80015ca:	ea2b 0808 	bic.w	r8, fp, r8
 80015ce:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d2:	bf88      	it	hi
 80015d4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d8:	ea48 0505 	orr.w	r5, r8, r5
 80015dc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80015e4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80015e8:	d04e      	beq.n	8001688 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ea:	4d47      	ldr	r5, [pc, #284]	; (8001708 <HAL_GPIO_Init+0x1a4>)
 80015ec:	4f46      	ldr	r7, [pc, #280]	; (8001708 <HAL_GPIO_Init+0x1a4>)
 80015ee:	69ad      	ldr	r5, [r5, #24]
 80015f0:	f026 0803 	bic.w	r8, r6, #3
 80015f4:	f045 0501 	orr.w	r5, r5, #1
 80015f8:	61bd      	str	r5, [r7, #24]
 80015fa:	69bd      	ldr	r5, [r7, #24]
 80015fc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001600:	f005 0501 	and.w	r5, r5, #1
 8001604:	9501      	str	r5, [sp, #4]
 8001606:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800160a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001610:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001614:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001618:	fa09 f90b 	lsl.w	r9, r9, fp
 800161c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001620:	4d3a      	ldr	r5, [pc, #232]	; (800170c <HAL_GPIO_Init+0x1a8>)
 8001622:	42a8      	cmp	r0, r5
 8001624:	d068      	beq.n	80016f8 <HAL_GPIO_Init+0x194>
 8001626:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800162a:	42a8      	cmp	r0, r5
 800162c:	d066      	beq.n	80016fc <HAL_GPIO_Init+0x198>
 800162e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001632:	42a8      	cmp	r0, r5
 8001634:	d064      	beq.n	8001700 <HAL_GPIO_Init+0x19c>
 8001636:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800163a:	42a8      	cmp	r0, r5
 800163c:	bf0c      	ite	eq
 800163e:	2503      	moveq	r5, #3
 8001640:	2504      	movne	r5, #4
 8001642:	fa05 f50b 	lsl.w	r5, r5, fp
 8001646:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800164a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800164e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001650:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001654:	bf14      	ite	ne
 8001656:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001658:	43a5      	biceq	r5, r4
 800165a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800165c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001662:	bf14      	ite	ne
 8001664:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001666:	43a5      	biceq	r5, r4
 8001668:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800166a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001670:	bf14      	ite	ne
 8001672:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001674:	43a5      	biceq	r5, r4
 8001676:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001678:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800167e:	bf14      	ite	ne
 8001680:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001682:	ea25 0404 	biceq.w	r4, r5, r4
 8001686:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001688:	3601      	adds	r6, #1
 800168a:	2e10      	cmp	r6, #16
 800168c:	f47f af73 	bne.w	8001576 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001690:	b003      	add	sp, #12
 8001692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001696:	2d03      	cmp	r5, #3
 8001698:	d022      	beq.n	80016e0 <HAL_GPIO_Init+0x17c>
 800169a:	2d11      	cmp	r5, #17
 800169c:	d184      	bne.n	80015a8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800169e:	68ca      	ldr	r2, [r1, #12]
 80016a0:	3204      	adds	r2, #4
          break;
 80016a2:	e781      	b.n	80015a8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80016a4:	4f1a      	ldr	r7, [pc, #104]	; (8001710 <HAL_GPIO_Init+0x1ac>)
 80016a6:	42bd      	cmp	r5, r7
 80016a8:	d009      	beq.n	80016be <HAL_GPIO_Init+0x15a>
 80016aa:	d812      	bhi.n	80016d2 <HAL_GPIO_Init+0x16e>
 80016ac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800171c <HAL_GPIO_Init+0x1b8>
 80016b0:	454d      	cmp	r5, r9
 80016b2:	d004      	beq.n	80016be <HAL_GPIO_Init+0x15a>
 80016b4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80016b8:	454d      	cmp	r5, r9
 80016ba:	f47f af75 	bne.w	80015a8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016be:	688a      	ldr	r2, [r1, #8]
 80016c0:	b1c2      	cbz	r2, 80016f4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80016c4:	bf0c      	ite	eq
 80016c6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80016ca:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ce:	2208      	movs	r2, #8
 80016d0:	e76a      	b.n	80015a8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80016d2:	4575      	cmp	r5, lr
 80016d4:	d0f3      	beq.n	80016be <HAL_GPIO_Init+0x15a>
 80016d6:	4565      	cmp	r5, ip
 80016d8:	d0f1      	beq.n	80016be <HAL_GPIO_Init+0x15a>
 80016da:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001720 <HAL_GPIO_Init+0x1bc>
 80016de:	e7eb      	b.n	80016b8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e0:	2200      	movs	r2, #0
 80016e2:	e761      	b.n	80015a8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e4:	68ca      	ldr	r2, [r1, #12]
          break;
 80016e6:	e75f      	b.n	80015a8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016e8:	68ca      	ldr	r2, [r1, #12]
 80016ea:	3208      	adds	r2, #8
          break;
 80016ec:	e75c      	b.n	80015a8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016ee:	68ca      	ldr	r2, [r1, #12]
 80016f0:	320c      	adds	r2, #12
          break;
 80016f2:	e759      	b.n	80015a8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016f4:	2204      	movs	r2, #4
 80016f6:	e757      	b.n	80015a8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f8:	2500      	movs	r5, #0
 80016fa:	e7a2      	b.n	8001642 <HAL_GPIO_Init+0xde>
 80016fc:	2501      	movs	r5, #1
 80016fe:	e7a0      	b.n	8001642 <HAL_GPIO_Init+0xde>
 8001700:	2502      	movs	r5, #2
 8001702:	e79e      	b.n	8001642 <HAL_GPIO_Init+0xde>
 8001704:	40010400 	.word	0x40010400
 8001708:	40021000 	.word	0x40021000
 800170c:	40010800 	.word	0x40010800
 8001710:	10210000 	.word	0x10210000
 8001714:	10310000 	.word	0x10310000
 8001718:	10320000 	.word	0x10320000
 800171c:	10110000 	.word	0x10110000
 8001720:	10220000 	.word	0x10220000

08001724 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001724:	b10a      	cbz	r2, 800172a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001726:	6101      	str	r1, [r0, #16]
 8001728:	4770      	bx	lr
 800172a:	0409      	lsls	r1, r1, #16
 800172c:	e7fb      	b.n	8001726 <HAL_GPIO_WritePin+0x2>

0800172e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800172e:	68c3      	ldr	r3, [r0, #12]
 8001730:	4059      	eors	r1, r3
 8001732:	60c1      	str	r1, [r0, #12]
 8001734:	4770      	bx	lr
	...

08001738 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001738:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800173a:	4604      	mov	r4, r0
 800173c:	b908      	cbnz	r0, 8001742 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 800173e:	2001      	movs	r0, #1
 8001740:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001742:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001746:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800174a:	b91b      	cbnz	r3, 8001754 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800174c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001750:	f001 fcfc 	bl	800314c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001754:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001756:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001758:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800175c:	6813      	ldr	r3, [r2, #0]
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001764:	f000 fada 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001768:	6863      	ldr	r3, [r4, #4]
 800176a:	4a2f      	ldr	r2, [pc, #188]	; (8001828 <HAL_I2C_Init+0xf0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d830      	bhi.n	80017d2 <HAL_I2C_Init+0x9a>
 8001770:	4a2e      	ldr	r2, [pc, #184]	; (800182c <HAL_I2C_Init+0xf4>)
 8001772:	4290      	cmp	r0, r2
 8001774:	d9e3      	bls.n	800173e <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001776:	4a2e      	ldr	r2, [pc, #184]	; (8001830 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001778:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800177a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800177e:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001780:	3201      	adds	r2, #1
 8001782:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001784:	4a28      	ldr	r2, [pc, #160]	; (8001828 <HAL_I2C_Init+0xf0>)
 8001786:	3801      	subs	r0, #1
 8001788:	4293      	cmp	r3, r2
 800178a:	d832      	bhi.n	80017f2 <HAL_I2C_Init+0xba>
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001792:	1c43      	adds	r3, r0, #1
 8001794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001798:	2b04      	cmp	r3, #4
 800179a:	bf38      	it	cc
 800179c:	2304      	movcc	r3, #4
 800179e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017a0:	6a22      	ldr	r2, [r4, #32]
 80017a2:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80017aa:	68e2      	ldr	r2, [r4, #12]
 80017ac:	6923      	ldr	r3, [r4, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80017b2:	69a2      	ldr	r2, [r4, #24]
 80017b4:	6963      	ldr	r3, [r4, #20]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80017ba:	680b      	ldr	r3, [r1, #0]
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017cc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80017d0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017d2:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_I2C_Init+0xfc>)
 80017d4:	4290      	cmp	r0, r2
 80017d6:	d9b2      	bls.n	800173e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80017d8:	4d15      	ldr	r5, [pc, #84]	; (8001830 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80017da:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80017de:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80017e2:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80017e4:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80017e6:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80017e8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80017ec:	fbb2 f2f5 	udiv	r2, r2, r5
 80017f0:	e7c6      	b.n	8001780 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80017f2:	68a2      	ldr	r2, [r4, #8]
 80017f4:	b952      	cbnz	r2, 800180c <HAL_I2C_Init+0xd4>
 80017f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80017fe:	1c43      	adds	r3, r0, #1
 8001800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001804:	b16b      	cbz	r3, 8001822 <HAL_I2C_Init+0xea>
 8001806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800180a:	e7c8      	b.n	800179e <HAL_I2C_Init+0x66>
 800180c:	2219      	movs	r2, #25
 800180e:	4353      	muls	r3, r2
 8001810:	fbb0 f0f3 	udiv	r0, r0, r3
 8001814:	1c43      	adds	r3, r0, #1
 8001816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181a:	b113      	cbz	r3, 8001822 <HAL_I2C_Init+0xea>
 800181c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001820:	e7bd      	b.n	800179e <HAL_I2C_Init+0x66>
 8001822:	2301      	movs	r3, #1
 8001824:	e7bb      	b.n	800179e <HAL_I2C_Init+0x66>
 8001826:	bf00      	nop
 8001828:	000186a0 	.word	0x000186a0
 800182c:	001e847f 	.word	0x001e847f
 8001830:	000f4240 	.word	0x000f4240
 8001834:	003d08ff 	.word	0x003d08ff

08001838 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001838:	6803      	ldr	r3, [r0, #0]
{
 800183a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	07db      	lsls	r3, r3, #31
{
 8001840:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	d410      	bmi.n	8001866 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	079f      	lsls	r7, r3, #30
 8001848:	d45e      	bmi.n	8001908 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	0719      	lsls	r1, r3, #28
 800184e:	f100 8095 	bmi.w	800197c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001852:	682b      	ldr	r3, [r5, #0]
 8001854:	075a      	lsls	r2, r3, #29
 8001856:	f100 80bf 	bmi.w	80019d8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185a:	69ea      	ldr	r2, [r5, #28]
 800185c:	2a00      	cmp	r2, #0
 800185e:	f040 812d 	bne.w	8001abc <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001862:	2000      	movs	r0, #0
 8001864:	e014      	b.n	8001890 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001866:	4c90      	ldr	r4, [pc, #576]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001868:	6863      	ldr	r3, [r4, #4]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d007      	beq.n	8001882 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001872:	6863      	ldr	r3, [r4, #4]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b08      	cmp	r3, #8
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x5e>
 800187c:	6863      	ldr	r3, [r4, #4]
 800187e:	03de      	lsls	r6, r3, #15
 8001880:	d509      	bpl.n	8001896 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	039c      	lsls	r4, r3, #14
 8001886:	d5dd      	bpl.n	8001844 <HAL_RCC_OscConfig+0xc>
 8001888:	686b      	ldr	r3, [r5, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1da      	bne.n	8001844 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800188e:	2001      	movs	r0, #1
}
 8001890:	b002      	add	sp, #8
 8001892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001896:	686b      	ldr	r3, [r5, #4]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d110      	bne.n	80018c0 <HAL_RCC_OscConfig+0x88>
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018a6:	f7ff fb35 	bl	8000f14 <HAL_GetTick>
 80018aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	0398      	lsls	r0, r3, #14
 80018b0:	d4c8      	bmi.n	8001844 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b2:	f7ff fb2f 	bl	8000f14 <HAL_GetTick>
 80018b6:	1b80      	subs	r0, r0, r6
 80018b8:	2864      	cmp	r0, #100	; 0x64
 80018ba:	d9f7      	bls.n	80018ac <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80018bc:	2003      	movs	r0, #3
 80018be:	e7e7      	b.n	8001890 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c0:	b99b      	cbnz	r3, 80018ea <HAL_RCC_OscConfig+0xb2>
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c8:	6023      	str	r3, [r4, #0]
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb1f 	bl	8000f14 <HAL_GetTick>
 80018d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	0399      	lsls	r1, r3, #14
 80018dc:	d5b2      	bpl.n	8001844 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018de:	f7ff fb19 	bl	8000f14 <HAL_GetTick>
 80018e2:	1b80      	subs	r0, r0, r6
 80018e4:	2864      	cmp	r0, #100	; 0x64
 80018e6:	d9f7      	bls.n	80018d8 <HAL_RCC_OscConfig+0xa0>
 80018e8:	e7e8      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	d103      	bne.n	80018fa <HAL_RCC_OscConfig+0xc2>
 80018f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f6:	6023      	str	r3, [r4, #0]
 80018f8:	e7d1      	b.n	800189e <HAL_RCC_OscConfig+0x66>
 80018fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fe:	6023      	str	r3, [r4, #0]
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001906:	e7cd      	b.n	80018a4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001908:	4c67      	ldr	r4, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 800190a:	6863      	ldr	r3, [r4, #4]
 800190c:	f013 0f0c 	tst.w	r3, #12
 8001910:	d007      	beq.n	8001922 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001912:	6863      	ldr	r3, [r4, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d110      	bne.n	800193e <HAL_RCC_OscConfig+0x106>
 800191c:	6863      	ldr	r3, [r4, #4]
 800191e:	03da      	lsls	r2, r3, #15
 8001920:	d40d      	bmi.n	800193e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	079b      	lsls	r3, r3, #30
 8001926:	d502      	bpl.n	800192e <HAL_RCC_OscConfig+0xf6>
 8001928:	692b      	ldr	r3, [r5, #16]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d1af      	bne.n	800188e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	696a      	ldr	r2, [r5, #20]
 8001932:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001936:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800193a:	6023      	str	r3, [r4, #0]
 800193c:	e785      	b.n	800184a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193e:	692a      	ldr	r2, [r5, #16]
 8001940:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 8001942:	b16a      	cbz	r2, 8001960 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001948:	f7ff fae4 	bl	8000f14 <HAL_GetTick>
 800194c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	079f      	lsls	r7, r3, #30
 8001952:	d4ec      	bmi.n	800192e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff fade 	bl	8000f14 <HAL_GetTick>
 8001958:	1b80      	subs	r0, r0, r6
 800195a:	2802      	cmp	r0, #2
 800195c:	d9f7      	bls.n	800194e <HAL_RCC_OscConfig+0x116>
 800195e:	e7ad      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001960:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001962:	f7ff fad7 	bl	8000f14 <HAL_GetTick>
 8001966:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	0798      	lsls	r0, r3, #30
 800196c:	f57f af6d 	bpl.w	800184a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff fad0 	bl	8000f14 <HAL_GetTick>
 8001974:	1b80      	subs	r0, r0, r6
 8001976:	2802      	cmp	r0, #2
 8001978:	d9f6      	bls.n	8001968 <HAL_RCC_OscConfig+0x130>
 800197a:	e79f      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197c:	69aa      	ldr	r2, [r5, #24]
 800197e:	4c4a      	ldr	r4, [pc, #296]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001980:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <HAL_RCC_OscConfig+0x278>)
 8001982:	b1da      	cbz	r2, 80019bc <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001988:	f7ff fac4 	bl	8000f14 <HAL_GetTick>
 800198c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001990:	079b      	lsls	r3, r3, #30
 8001992:	d50d      	bpl.n	80019b0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001994:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001998:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <HAL_RCC_OscConfig+0x27c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fbb3 f3f2 	udiv	r3, r3, r2
 80019a0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80019a2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80019a4:	9b01      	ldr	r3, [sp, #4]
 80019a6:	1e5a      	subs	r2, r3, #1
 80019a8:	9201      	str	r2, [sp, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f9      	bne.n	80019a2 <HAL_RCC_OscConfig+0x16a>
 80019ae:	e750      	b.n	8001852 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fab0 	bl	8000f14 <HAL_GetTick>
 80019b4:	1b80      	subs	r0, r0, r6
 80019b6:	2802      	cmp	r0, #2
 80019b8:	d9e9      	bls.n	800198e <HAL_RCC_OscConfig+0x156>
 80019ba:	e77f      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80019bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019be:	f7ff faa9 	bl	8000f14 <HAL_GetTick>
 80019c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019c6:	079f      	lsls	r7, r3, #30
 80019c8:	f57f af43 	bpl.w	8001852 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff faa2 	bl	8000f14 <HAL_GetTick>
 80019d0:	1b80      	subs	r0, r0, r6
 80019d2:	2802      	cmp	r0, #2
 80019d4:	d9f6      	bls.n	80019c4 <HAL_RCC_OscConfig+0x18c>
 80019d6:	e771      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d8:	4c33      	ldr	r4, [pc, #204]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80019da:	69e3      	ldr	r3, [r4, #28]
 80019dc:	00d8      	lsls	r0, r3, #3
 80019de:	d424      	bmi.n	8001a2a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80019e0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	69e3      	ldr	r3, [r4, #28]
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61e3      	str	r3, [r4, #28]
 80019ea:	69e3      	ldr	r3, [r4, #28]
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	4e30      	ldr	r6, [pc, #192]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80019f6:	6833      	ldr	r3, [r6, #0]
 80019f8:	05d9      	lsls	r1, r3, #23
 80019fa:	d518      	bpl.n	8001a2e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fc:	68eb      	ldr	r3, [r5, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d126      	bne.n	8001a50 <HAL_RCC_OscConfig+0x218>
 8001a02:	6a23      	ldr	r3, [r4, #32]
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fa83 	bl	8000f14 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a12:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	6a23      	ldr	r3, [r4, #32]
 8001a16:	079b      	lsls	r3, r3, #30
 8001a18:	d53f      	bpl.n	8001a9a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001a1a:	2f00      	cmp	r7, #0
 8001a1c:	f43f af1d 	beq.w	800185a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	69e3      	ldr	r3, [r4, #28]
 8001a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a26:	61e3      	str	r3, [r4, #28]
 8001a28:	e717      	b.n	800185a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2700      	movs	r7, #0
 8001a2c:	e7e2      	b.n	80019f4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2e:	6833      	ldr	r3, [r6, #0]
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a36:	f7ff fa6d 	bl	8000f14 <HAL_GetTick>
 8001a3a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	6833      	ldr	r3, [r6, #0]
 8001a3e:	05da      	lsls	r2, r3, #23
 8001a40:	d4dc      	bmi.n	80019fc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff fa67 	bl	8000f14 <HAL_GetTick>
 8001a46:	eba0 0008 	sub.w	r0, r0, r8
 8001a4a:	2864      	cmp	r0, #100	; 0x64
 8001a4c:	d9f6      	bls.n	8001a3c <HAL_RCC_OscConfig+0x204>
 8001a4e:	e735      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	b9ab      	cbnz	r3, 8001a7e <HAL_RCC_OscConfig+0x246>
 8001a52:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6223      	str	r3, [r4, #32]
 8001a5e:	6a23      	ldr	r3, [r4, #32]
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a66:	f7ff fa55 	bl	8000f14 <HAL_GetTick>
 8001a6a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	6a23      	ldr	r3, [r4, #32]
 8001a6e:	0798      	lsls	r0, r3, #30
 8001a70:	d5d3      	bpl.n	8001a1a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff fa4f 	bl	8000f14 <HAL_GetTick>
 8001a76:	1b80      	subs	r0, r0, r6
 8001a78:	4540      	cmp	r0, r8
 8001a7a:	d9f7      	bls.n	8001a6c <HAL_RCC_OscConfig+0x234>
 8001a7c:	e71e      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	6a23      	ldr	r3, [r4, #32]
 8001a82:	d103      	bne.n	8001a8c <HAL_RCC_OscConfig+0x254>
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6223      	str	r3, [r4, #32]
 8001a8a:	e7ba      	b.n	8001a02 <HAL_RCC_OscConfig+0x1ca>
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6223      	str	r3, [r4, #32]
 8001a92:	6a23      	ldr	r3, [r4, #32]
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	e7b6      	b.n	8001a08 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff fa3b 	bl	8000f14 <HAL_GetTick>
 8001a9e:	eba0 0008 	sub.w	r0, r0, r8
 8001aa2:	42b0      	cmp	r0, r6
 8001aa4:	d9b6      	bls.n	8001a14 <HAL_RCC_OscConfig+0x1dc>
 8001aa6:	e709      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	42420000 	.word	0x42420000
 8001ab0:	42420480 	.word	0x42420480
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abc:	4c22      	ldr	r4, [pc, #136]	; (8001b48 <HAL_RCC_OscConfig+0x310>)
 8001abe:	6863      	ldr	r3, [r4, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	f43f aee2 	beq.w	800188e <HAL_RCC_OscConfig+0x56>
 8001aca:	2300      	movs	r3, #0
 8001acc:	4e1f      	ldr	r6, [pc, #124]	; (8001b4c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ace:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad2:	d12b      	bne.n	8001b2c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fa1e 	bl	8000f14 <HAL_GetTick>
 8001ad8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	0199      	lsls	r1, r3, #6
 8001ade:	d41f      	bmi.n	8001b20 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae0:	6a2b      	ldr	r3, [r5, #32]
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae8:	6862      	ldr	r2, [r4, #4]
 8001aea:	68a9      	ldr	r1, [r5, #8]
 8001aec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001af0:	430a      	orrs	r2, r1
 8001af2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001af6:	6862      	ldr	r2, [r4, #4]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001afe:	4313      	orrs	r3, r2
 8001b00:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b02:	2301      	movs	r3, #1
 8001b04:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b06:	f7ff fa05 	bl	8000f14 <HAL_GetTick>
 8001b0a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	019a      	lsls	r2, r3, #6
 8001b10:	f53f aea7 	bmi.w	8001862 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff f9fe 	bl	8000f14 <HAL_GetTick>
 8001b18:	1b40      	subs	r0, r0, r5
 8001b1a:	2802      	cmp	r0, #2
 8001b1c:	d9f6      	bls.n	8001b0c <HAL_RCC_OscConfig+0x2d4>
 8001b1e:	e6cd      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f9f8 	bl	8000f14 <HAL_GetTick>
 8001b24:	1bc0      	subs	r0, r0, r7
 8001b26:	2802      	cmp	r0, #2
 8001b28:	d9d7      	bls.n	8001ada <HAL_RCC_OscConfig+0x2a2>
 8001b2a:	e6c7      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f9f2 	bl	8000f14 <HAL_GetTick>
 8001b30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	f57f ae94 	bpl.w	8001862 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff f9eb 	bl	8000f14 <HAL_GetTick>
 8001b3e:	1b40      	subs	r0, r0, r5
 8001b40:	2802      	cmp	r0, #2
 8001b42:	d9f6      	bls.n	8001b32 <HAL_RCC_OscConfig+0x2fa>
 8001b44:	e6ba      	b.n	80018bc <HAL_RCC_OscConfig+0x84>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	42420060 	.word	0x42420060

08001b50 <HAL_RCC_GetSysClockFreq>:
{
 8001b50:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001b54:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b56:	ac02      	add	r4, sp, #8
 8001b58:	f103 0510 	add.w	r5, r3, #16
 8001b5c:	4622      	mov	r2, r4
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	3308      	adds	r3, #8
 8001b64:	c203      	stmia	r2!, {r0, r1}
 8001b66:	42ab      	cmp	r3, r5
 8001b68:	4614      	mov	r4, r2
 8001b6a:	d1f7      	bne.n	8001b5c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001b72:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001b74:	4911      	ldr	r1, [pc, #68]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b76:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001b7a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b7c:	f003 020c 	and.w	r2, r3, #12
 8001b80:	2a08      	cmp	r2, #8
 8001b82:	d117      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b84:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001b88:	a806      	add	r0, sp, #24
 8001b8a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b8c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b8e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b92:	d50c      	bpl.n	8001bae <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b94:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b98:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b9e:	aa06      	add	r2, sp, #24
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ba6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001baa:	b007      	add	sp, #28
 8001bac:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x74>)
 8001bb0:	4350      	muls	r0, r2
 8001bb2:	e7fa      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001bb6:	e7f8      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x5a>
 8001bb8:	08003700 	.word	0x08003700
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	007a1200 	.word	0x007a1200
 8001bc4:	003d0900 	.word	0x003d0900

08001bc8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bc8:	4a4d      	ldr	r2, [pc, #308]	; (8001d00 <HAL_RCC_ClockConfig+0x138>)
{
 8001bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bce:	6813      	ldr	r3, [r2, #0]
{
 8001bd0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	428b      	cmp	r3, r1
{
 8001bd8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bda:	d328      	bcc.n	8001c2e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	682a      	ldr	r2, [r5, #0]
 8001bde:	0791      	lsls	r1, r2, #30
 8001be0:	d432      	bmi.n	8001c48 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	07d2      	lsls	r2, r2, #31
 8001be4:	d438      	bmi.n	8001c58 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001be6:	4a46      	ldr	r2, [pc, #280]	; (8001d00 <HAL_RCC_ClockConfig+0x138>)
 8001be8:	6813      	ldr	r3, [r2, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	429e      	cmp	r6, r3
 8001bf0:	d373      	bcc.n	8001cda <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf2:	682a      	ldr	r2, [r5, #0]
 8001bf4:	4c43      	ldr	r4, [pc, #268]	; (8001d04 <HAL_RCC_ClockConfig+0x13c>)
 8001bf6:	f012 0f04 	tst.w	r2, #4
 8001bfa:	d179      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	0713      	lsls	r3, r2, #28
 8001bfe:	d506      	bpl.n	8001c0e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c00:	6863      	ldr	r3, [r4, #4]
 8001c02:	692a      	ldr	r2, [r5, #16]
 8001c04:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c08:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c0c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0e:	f7ff ff9f 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001c12:	6863      	ldr	r3, [r4, #4]
 8001c14:	4a3c      	ldr	r2, [pc, #240]	; (8001d08 <HAL_RCC_ClockConfig+0x140>)
 8001c16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	40d8      	lsrs	r0, r3
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_RCC_ClockConfig+0x144>)
 8001c20:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff f934 	bl	8000e90 <HAL_InitTick>
  return HAL_OK;
 8001c28:	2000      	movs	r0, #0
}
 8001c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	f023 0307 	bic.w	r3, r3, #7
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	4299      	cmp	r1, r3
 8001c40:	d0cc      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001c42:	2001      	movs	r0, #1
 8001c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c48:	492e      	ldr	r1, [pc, #184]	; (8001d04 <HAL_RCC_ClockConfig+0x13c>)
 8001c4a:	68a8      	ldr	r0, [r5, #8]
 8001c4c:	684b      	ldr	r3, [r1, #4]
 8001c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c52:	4303      	orrs	r3, r0
 8001c54:	604b      	str	r3, [r1, #4]
 8001c56:	e7c4      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c58:	686a      	ldr	r2, [r5, #4]
 8001c5a:	4c2a      	ldr	r4, [pc, #168]	; (8001d04 <HAL_RCC_ClockConfig+0x13c>)
 8001c5c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c60:	d11c      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c66:	d0ec      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c68:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	4313      	orrs	r3, r2
 8001c74:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001c76:	f7ff f94d 	bl	8000f14 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001c7c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d114      	bne.n	8001cac <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c82:	6863      	ldr	r3, [r4, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d0ac      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff f942 	bl	8000f14 <HAL_GetTick>
 8001c90:	1bc0      	subs	r0, r0, r7
 8001c92:	4540      	cmp	r0, r8
 8001c94:	d9f5      	bls.n	8001c82 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001c96:	2003      	movs	r0, #3
 8001c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9c:	2a02      	cmp	r2, #2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ca4:	e7df      	b.n	8001c66 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	f013 0f02 	tst.w	r3, #2
 8001caa:	e7dc      	b.n	8001c66 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d10f      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb0:	6863      	ldr	r3, [r4, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d095      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cba:	f7ff f92b 	bl	8000f14 <HAL_GetTick>
 8001cbe:	1bc0      	subs	r0, r0, r7
 8001cc0:	4540      	cmp	r0, r8
 8001cc2:	d9f5      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0xe8>
 8001cc4:	e7e7      	b.n	8001c96 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc6:	f7ff f925 	bl	8000f14 <HAL_GetTick>
 8001cca:	1bc0      	subs	r0, r0, r7
 8001ccc:	4540      	cmp	r0, r8
 8001cce:	d8e2      	bhi.n	8001c96 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd0:	6863      	ldr	r3, [r4, #4]
 8001cd2:	f013 0f0c 	tst.w	r3, #12
 8001cd6:	d1f6      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xfe>
 8001cd8:	e785      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	6813      	ldr	r3, [r2, #0]
 8001cdc:	f023 0307 	bic.w	r3, r3, #7
 8001ce0:	4333      	orrs	r3, r6
 8001ce2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	429e      	cmp	r6, r3
 8001cec:	d1a9      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x7a>
 8001cee:	e780      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	6863      	ldr	r3, [r4, #4]
 8001cf2:	68e9      	ldr	r1, [r5, #12]
 8001cf4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6063      	str	r3, [r4, #4]
 8001cfc:	e77e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x34>
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08003786 	.word	0x08003786
 8001d0c:	20000008 	.word	0x20000008

08001d10 <HAL_RCC_GetHCLKFreq>:
}
 8001d10:	4b01      	ldr	r3, [pc, #4]	; (8001d18 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d2a:	6810      	ldr	r0, [r2, #0]
}    
 8001d2c:	40d8      	lsrs	r0, r3
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	08003796 	.word	0x08003796
 8001d38:	20000008 	.word	0x20000008

08001d3c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d4a:	6810      	ldr	r0, [r2, #0]
} 
 8001d4c:	40d8      	lsrs	r0, r3
 8001d4e:	4770      	bx	lr
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08003796 	.word	0x08003796
 8001d58:	20000008 	.word	0x20000008

08001d5c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d5c:	6803      	ldr	r3, [r0, #0]
{
 8001d5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d62:	07d9      	lsls	r1, r3, #31
{
 8001d64:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d66:	d520      	bpl.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d68:	4c35      	ldr	r4, [pc, #212]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d6a:	69e3      	ldr	r3, [r4, #28]
 8001d6c:	00da      	lsls	r2, r3, #3
 8001d6e:	d432      	bmi.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001d70:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	69e3      	ldr	r3, [r4, #28]
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	61e3      	str	r3, [r4, #28]
 8001d7a:	69e3      	ldr	r3, [r4, #28]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4e2f      	ldr	r6, [pc, #188]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001d86:	6833      	ldr	r3, [r6, #0]
 8001d88:	05db      	lsls	r3, r3, #23
 8001d8a:	d526      	bpl.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d8c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d8e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d92:	d136      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001d94:	6a23      	ldr	r3, [r4, #32]
 8001d96:	686a      	ldr	r2, [r5, #4]
 8001d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001da0:	b11f      	cbz	r7, 8001daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da2:	69e3      	ldr	r3, [r4, #28]
 8001da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001daa:	6828      	ldr	r0, [r5, #0]
 8001dac:	0783      	lsls	r3, r0, #30
 8001dae:	d506      	bpl.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001db0:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001db2:	68a9      	ldr	r1, [r5, #8]
 8001db4:	6853      	ldr	r3, [r2, #4]
 8001db6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dbe:	f010 0010 	ands.w	r0, r0, #16
 8001dc2:	d01b      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001dc6:	68e9      	ldr	r1, [r5, #12]
 8001dc8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dca:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dcc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6053      	str	r3, [r2, #4]
 8001dd4:	e012      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2700      	movs	r7, #0
 8001dd8:	e7d4      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dda:	6833      	ldr	r3, [r6, #0]
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001de2:	f7ff f897 	bl	8000f14 <HAL_GetTick>
 8001de6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	6833      	ldr	r3, [r6, #0]
 8001dea:	05d8      	lsls	r0, r3, #23
 8001dec:	d4ce      	bmi.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7ff f891 	bl	8000f14 <HAL_GetTick>
 8001df2:	eba0 0008 	sub.w	r0, r0, r8
 8001df6:	2864      	cmp	r0, #100	; 0x64
 8001df8:	d9f6      	bls.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001dfa:	2003      	movs	r0, #3
}
 8001dfc:	b002      	add	sp, #8
 8001dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e02:	686a      	ldr	r2, [r5, #4]
 8001e04:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d0c3      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e10:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e12:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e14:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001e1c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e1e:	07d9      	lsls	r1, r3, #31
 8001e20:	d5b8      	bpl.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001e22:	f7ff f877 	bl	8000f14 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001e2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	6a23      	ldr	r3, [r4, #32]
 8001e2e:	079a      	lsls	r2, r3, #30
 8001e30:	d4b0      	bmi.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff f86f 	bl	8000f14 <HAL_GetTick>
 8001e36:	1b80      	subs	r0, r0, r6
 8001e38:	4540      	cmp	r0, r8
 8001e3a:	d9f7      	bls.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001e3c:	e7dd      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40007000 	.word	0x40007000
 8001e48:	42420440 	.word	0x42420440

08001e4c <HAL_SPI_ErrorCallback>:
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001e50:	6803      	ldr	r3, [r0, #0]
{
 8001e52:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8001e54:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001e56:	689a      	ldr	r2, [r3, #8]
{
 8001e58:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001e5a:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8001e5e:	2d01      	cmp	r5, #1
{
 8001e60:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001e62:	d105      	bne.n	8001e70 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001e64:	064d      	lsls	r5, r1, #25
 8001e66:	d503      	bpl.n	8001e70 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 8001e68:	6c03      	ldr	r3, [r0, #64]	; 0x40
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 8001e6a:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8001e6c:	b005      	add	sp, #20
 8001e6e:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001e70:	0790      	lsls	r0, r2, #30
 8001e72:	d504      	bpl.n	8001e7e <HAL_SPI_IRQHandler+0x2e>
 8001e74:	060d      	lsls	r5, r1, #24
 8001e76:	d502      	bpl.n	8001e7e <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001e78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	e7f5      	b.n	8001e6a <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001e7e:	f012 0f60 	tst.w	r2, #96	; 0x60
 8001e82:	d0f3      	beq.n	8001e6c <HAL_SPI_IRQHandler+0x1c>
 8001e84:	0688      	lsls	r0, r1, #26
 8001e86:	d5f1      	bpl.n	8001e6c <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8001e88:	0655      	lsls	r5, r2, #25
 8001e8a:	d50e      	bpl.n	8001eaa <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001e8c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001e90:	2500      	movs	r5, #0
 8001e92:	2803      	cmp	r0, #3
 8001e94:	d036      	beq.n	8001f04 <HAL_SPI_IRQHandler+0xb4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e98:	f040 0004 	orr.w	r0, r0, #4
 8001e9c:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e9e:	9501      	str	r5, [sp, #4]
 8001ea0:	68d8      	ldr	r0, [r3, #12]
 8001ea2:	9001      	str	r0, [sp, #4]
 8001ea4:	6898      	ldr	r0, [r3, #8]
 8001ea6:	9001      	str	r0, [sp, #4]
 8001ea8:	9801      	ldr	r0, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8001eaa:	0690      	lsls	r0, r2, #26
 8001eac:	d50c      	bpl.n	8001ec8 <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001eae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	9203      	str	r2, [sp, #12]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	9203      	str	r2, [sp, #12]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ec8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001eca:	2a00      	cmp	r2, #0
 8001ecc:	d0ce      	beq.n	8001e6c <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ed4:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001edc:	078a      	lsls	r2, r1, #30
 8001ede:	d018      	beq.n	8001f12 <HAL_SPI_IRQHandler+0xc2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001ee0:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8001ee2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001ee4:	f022 0203 	bic.w	r2, r2, #3
 8001ee8:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8001eea:	b118      	cbz	r0, 8001ef4 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_SPI_IRQHandler+0xcc>)
 8001eee:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001ef0:	f7ff faf0 	bl	80014d4 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8001ef4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d0b8      	beq.n	8001e6c <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_SPI_IRQHandler+0xcc>)
 8001efc:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001efe:	f7ff fae9 	bl	80014d4 <HAL_DMA_Abort_IT>
 8001f02:	e7b3      	b.n	8001e6c <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f04:	9502      	str	r5, [sp, #8]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	9202      	str	r2, [sp, #8]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	9b02      	ldr	r3, [sp, #8]
        return;
 8001f10:	e7ac      	b.n	8001e6c <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8001f12:	4620      	mov	r0, r4
 8001f14:	f7ff ff9a 	bl	8001e4c <HAL_SPI_ErrorCallback>
 8001f18:	e7a8      	b.n	8001e6c <HAL_SPI_IRQHandler+0x1c>
 8001f1a:	bf00      	nop
 8001f1c:	08001f21 	.word	0x08001f21

08001f20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f20:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hspi->RxXferCount = 0U;
 8001f22:	2300      	movs	r3, #0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f24:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8001f26:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001f28:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8001f2a:	f7ff ff8f 	bl	8001e4c <HAL_SPI_ErrorCallback>
 8001f2e:	bd08      	pop	{r3, pc}

08001f30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f30:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001f32:	4604      	mov	r4, r0
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d034      	beq.n	8001fa2 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001f3c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001f40:	b90b      	cbnz	r3, 8001f46 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f42:	f001 f925 	bl	8003190 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f46:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f48:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001f4e:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f50:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f56:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f58:	6863      	ldr	r3, [r4, #4]
 8001f5a:	69a2      	ldr	r2, [r4, #24]
 8001f5c:	4303      	orrs	r3, r0
 8001f5e:	68e0      	ldr	r0, [r4, #12]
 8001f60:	4303      	orrs	r3, r0
 8001f62:	6920      	ldr	r0, [r4, #16]
 8001f64:	4303      	orrs	r3, r0
 8001f66:	6960      	ldr	r0, [r4, #20]
 8001f68:	4303      	orrs	r3, r0
 8001f6a:	69e0      	ldr	r0, [r4, #28]
 8001f6c:	4303      	orrs	r3, r0
 8001f6e:	6a20      	ldr	r0, [r4, #32]
 8001f70:	4303      	orrs	r3, r0
 8001f72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f74:	4303      	orrs	r3, r0
 8001f76:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001f7a:	4303      	orrs	r3, r0
 8001f7c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f7e:	0c12      	lsrs	r2, r2, #16
 8001f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f82:	f002 0204 	and.w	r2, r2, #4
 8001f86:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f8a:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f8c:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f8e:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f90:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f96:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001f98:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f9a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001f9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001fa0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
}
 8001fa4:	bd10      	pop	{r4, pc}

08001fa6 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fa6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001faa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	f04f 0302 	mov.w	r3, #2
 8001fb2:	d01c      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x48>
 8001fb4:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8001fb6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fba:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001fbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001fc0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fc2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001fc6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fcc:	680a      	ldr	r2, [r1, #0]
 8001fce:	2a40      	cmp	r2, #64	; 0x40
 8001fd0:	d079      	beq.n	80020c6 <HAL_TIM_ConfigClockSource+0x120>
 8001fd2:	d819      	bhi.n	8002008 <HAL_TIM_ConfigClockSource+0x62>
 8001fd4:	2a10      	cmp	r2, #16
 8001fd6:	f000 8093 	beq.w	8002100 <HAL_TIM_ConfigClockSource+0x15a>
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_TIM_ConfigClockSource+0x4c>
 8001fdc:	2a00      	cmp	r2, #0
 8001fde:	f000 8089 	beq.w	80020f4 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001fee:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ff2:	2a20      	cmp	r2, #32
 8001ff4:	f000 808a 	beq.w	800210c <HAL_TIM_ConfigClockSource+0x166>
 8001ff8:	2a30      	cmp	r2, #48	; 0x30
 8001ffa:	d1f2      	bne.n	8001fe2 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001ffc:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ffe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002002:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002006:	e036      	b.n	8002076 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002008:	2a70      	cmp	r2, #112	; 0x70
 800200a:	d036      	beq.n	800207a <HAL_TIM_ConfigClockSource+0xd4>
 800200c:	d81b      	bhi.n	8002046 <HAL_TIM_ConfigClockSource+0xa0>
 800200e:	2a50      	cmp	r2, #80	; 0x50
 8002010:	d042      	beq.n	8002098 <HAL_TIM_ConfigClockSource+0xf2>
 8002012:	2a60      	cmp	r2, #96	; 0x60
 8002014:	d1e5      	bne.n	8001fe2 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002016:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002018:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800201a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800201e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002020:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002022:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002024:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002026:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800202a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800202e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002032:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002036:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002038:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800203a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800203c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002040:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002044:	e017      	b.n	8002076 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002046:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800204a:	d011      	beq.n	8002070 <HAL_TIM_ConfigClockSource+0xca>
 800204c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002050:	d1c7      	bne.n	8001fe2 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002052:	688a      	ldr	r2, [r1, #8]
 8002054:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002056:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002058:	68c9      	ldr	r1, [r1, #12]
 800205a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800205c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002060:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002064:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002066:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800206e:	e002      	b.n	8002076 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e7b3      	b.n	8001fe2 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800207a:	688a      	ldr	r2, [r1, #8]
 800207c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800207e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002080:	68c9      	ldr	r1, [r1, #12]
 8002082:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002084:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002088:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800208c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800208e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002090:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002092:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002096:	e7ee      	b.n	8002076 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002098:	684c      	ldr	r4, [r1, #4]
 800209a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800209c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800209e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020a0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a4:	f025 0501 	bic.w	r5, r5, #1
 80020a8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020aa:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80020ac:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020b2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80020b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020b8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80020ba:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020c0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80020c4:	e7d7      	b.n	8002076 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c6:	684c      	ldr	r4, [r1, #4]
 80020c8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80020ca:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020cc:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ce:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020d2:	f025 0501 	bic.w	r5, r5, #1
 80020d6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020d8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80020da:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020e0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80020e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020e6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80020e8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020ee:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80020f2:	e7c0      	b.n	8002076 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80020f4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020fa:	f042 0207 	orr.w	r2, r2, #7
 80020fe:	e7ba      	b.n	8002076 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002100:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002102:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002106:	f042 0217 	orr.w	r2, r2, #23
 800210a:	e7b4      	b.n	8002076 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800210c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800210e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002112:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002116:	e7ae      	b.n	8002076 <HAL_TIM_ConfigClockSource+0xd0>

08002118 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002118:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800211a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800211c:	4290      	cmp	r0, r2
 800211e:	d00a      	beq.n	8002136 <TIM_Base_SetConfig+0x1e>
 8002120:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002124:	d007      	beq.n	8002136 <TIM_Base_SetConfig+0x1e>
 8002126:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800212a:	4290      	cmp	r0, r2
 800212c:	d003      	beq.n	8002136 <TIM_Base_SetConfig+0x1e>
 800212e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002132:	4290      	cmp	r0, r2
 8002134:	d115      	bne.n	8002162 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002136:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800213c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <TIM_Base_SetConfig+0x6c>)
 8002140:	4290      	cmp	r0, r2
 8002142:	d00a      	beq.n	800215a <TIM_Base_SetConfig+0x42>
 8002144:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002148:	d007      	beq.n	800215a <TIM_Base_SetConfig+0x42>
 800214a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800214e:	4290      	cmp	r0, r2
 8002150:	d003      	beq.n	800215a <TIM_Base_SetConfig+0x42>
 8002152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002156:	4290      	cmp	r0, r2
 8002158:	d103      	bne.n	8002162 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800215c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002160:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002162:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002168:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800216a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800216c:	688b      	ldr	r3, [r1, #8]
 800216e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002170:	680b      	ldr	r3, [r1, #0]
 8002172:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <TIM_Base_SetConfig+0x6c>)
 8002176:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	bf04      	itt	eq
 800217a:	690b      	ldreq	r3, [r1, #16]
 800217c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800217e:	2301      	movs	r3, #1
 8002180:	6143      	str	r3, [r0, #20]
 8002182:	4770      	bx	lr
 8002184:	40012c00 	.word	0x40012c00

08002188 <HAL_TIM_Base_Init>:
{
 8002188:	b510      	push	{r4, lr}
  if(htim == NULL)
 800218a:	4604      	mov	r4, r0
 800218c:	b1a0      	cbz	r0, 80021b8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800218e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002192:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002196:	b91b      	cbnz	r3, 80021a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002198:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800219c:	f001 f860 	bl	8003260 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80021a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80021a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a8:	1d21      	adds	r1, r4, #4
 80021aa:	f7ff ffb5 	bl	8002118 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80021ae:	2301      	movs	r3, #1
  return HAL_OK;
 80021b0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80021b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80021b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021b8:	2001      	movs	r0, #1
}
 80021ba:	bd10      	pop	{r4, pc}

080021bc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80021bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80021c0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	f04f 0302 	mov.w	r3, #2
 80021c8:	d018      	beq.n	80021fc <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80021ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021ce:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80021d0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021d2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80021d4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021da:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4322      	orrs	r2, r4
 80021e0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021f6:	2300      	movs	r3, #0
 80021f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80021fc:	4618      	mov	r0, r3

  return HAL_OK;
}
 80021fe:	bd10      	pop	{r4, pc}

08002200 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002200:	6803      	ldr	r3, [r0, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002208:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002212:	2320      	movs	r3, #32
 8002214:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002218:	4770      	bx	lr
	...

0800221c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800221c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002220:	6805      	ldr	r5, [r0, #0]
 8002222:	68c2      	ldr	r2, [r0, #12]
 8002224:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002226:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002228:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800222c:	4313      	orrs	r3, r2
 800222e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002230:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002232:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002234:	430b      	orrs	r3, r1
 8002236:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002238:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800223c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002240:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002242:	4313      	orrs	r3, r2
 8002244:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002246:	696b      	ldr	r3, [r5, #20]
 8002248:	6982      	ldr	r2, [r0, #24]
 800224a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224e:	4313      	orrs	r3, r2
 8002250:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002252:	4b40      	ldr	r3, [pc, #256]	; (8002354 <UART_SetConfig+0x138>)
{
 8002254:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002256:	429d      	cmp	r5, r3
 8002258:	f04f 0419 	mov.w	r4, #25
 800225c:	d146      	bne.n	80022ec <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800225e:	f7ff fd6d 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002262:	fb04 f300 	mul.w	r3, r4, r0
 8002266:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800226a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800226e:	00b6      	lsls	r6, r6, #2
 8002270:	fbb3 f3f6 	udiv	r3, r3, r6
 8002274:	fbb3 f3f8 	udiv	r3, r3, r8
 8002278:	011e      	lsls	r6, r3, #4
 800227a:	f7ff fd5f 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800227e:	4360      	muls	r0, r4
 8002280:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	fbb0 f7f3 	udiv	r7, r0, r3
 800228a:	f7ff fd57 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800228e:	4360      	muls	r0, r4
 8002290:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fbb0 f3f3 	udiv	r3, r0, r3
 800229a:	fbb3 f3f8 	udiv	r3, r3, r8
 800229e:	fb08 7313 	mls	r3, r8, r3, r7
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	3332      	adds	r3, #50	; 0x32
 80022a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80022aa:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80022ae:	f7ff fd45 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80022b2:	4360      	muls	r0, r4
 80022b4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	fbb0 faf2 	udiv	sl, r0, r2
 80022be:	f7ff fd3d 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022c2:	4360      	muls	r0, r4
 80022c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80022d2:	fb08 a313 	mls	r3, r8, r3, sl
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	3332      	adds	r3, #50	; 0x32
 80022da:	fbb3 f3f8 	udiv	r3, r3, r8
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	433b      	orrs	r3, r7
 80022e4:	4433      	add	r3, r6
 80022e6:	60ab      	str	r3, [r5, #8]
 80022e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022ec:	f7ff fd16 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 80022f0:	fb04 f300 	mul.w	r3, r4, r0
 80022f4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80022f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80022fc:	00b6      	lsls	r6, r6, #2
 80022fe:	fbb3 f3f6 	udiv	r3, r3, r6
 8002302:	fbb3 f3f8 	udiv	r3, r3, r8
 8002306:	011e      	lsls	r6, r3, #4
 8002308:	f7ff fd08 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 800230c:	4360      	muls	r0, r4
 800230e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fbb0 f7f3 	udiv	r7, r0, r3
 8002318:	f7ff fd00 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 800231c:	4360      	muls	r0, r4
 800231e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fbb0 f3f3 	udiv	r3, r0, r3
 8002328:	fbb3 f3f8 	udiv	r3, r3, r8
 800232c:	fb08 7313 	mls	r3, r8, r3, r7
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	3332      	adds	r3, #50	; 0x32
 8002334:	fbb3 f3f8 	udiv	r3, r3, r8
 8002338:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800233c:	f7ff fcee 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 8002340:	4360      	muls	r0, r4
 8002342:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	fbb0 faf2 	udiv	sl, r0, r2
 800234c:	f7ff fce6 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 8002350:	e7b7      	b.n	80022c2 <UART_SetConfig+0xa6>
 8002352:	bf00      	nop
 8002354:	40013800 	.word	0x40013800

08002358 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	460e      	mov	r6, r1
 800235e:	4617      	mov	r7, r2
 8002360:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002362:	6821      	ldr	r1, [r4, #0]
 8002364:	680b      	ldr	r3, [r1, #0]
 8002366:	ea36 0303 	bics.w	r3, r6, r3
 800236a:	d101      	bne.n	8002370 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800236c:	2000      	movs	r0, #0
}
 800236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002370:	1c6b      	adds	r3, r5, #1
 8002372:	d0f7      	beq.n	8002364 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002374:	b995      	cbnz	r5, 800239c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002376:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002378:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002380:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800238a:	2320      	movs	r3, #32
 800238c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002390:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002394:	2300      	movs	r3, #0
 8002396:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800239a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800239c:	f7fe fdba 	bl	8000f14 <HAL_GetTick>
 80023a0:	1bc0      	subs	r0, r0, r7
 80023a2:	4285      	cmp	r5, r0
 80023a4:	d2dd      	bcs.n	8002362 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80023a6:	e7e6      	b.n	8002376 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080023a8 <HAL_UART_Init>:
{
 80023a8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80023aa:	4604      	mov	r4, r0
 80023ac:	b340      	cbz	r0, 8002400 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80023ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023b6:	b91b      	cbnz	r3, 80023c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80023bc:	f000 ff64 	bl	8003288 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80023c0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80023c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80023c8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80023ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80023cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80023d2:	f7ff ff23 	bl	800221c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80023f2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80023f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80023fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80023fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002400:	2001      	movs	r0, #1
}
 8002402:	bd10      	pop	{r4, pc}

08002404 <HAL_UART_Transmit>:
{
 8002404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002408:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800240a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800240e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8002410:	2b20      	cmp	r3, #32
{
 8002412:	460d      	mov	r5, r1
 8002414:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002416:	d14e      	bne.n	80024b6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002418:	2900      	cmp	r1, #0
 800241a:	d049      	beq.n	80024b0 <HAL_UART_Transmit+0xac>
 800241c:	2a00      	cmp	r2, #0
 800241e:	d047      	beq.n	80024b0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002420:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002424:	2b01      	cmp	r3, #1
 8002426:	d046      	beq.n	80024b6 <HAL_UART_Transmit+0xb2>
 8002428:	2301      	movs	r3, #1
 800242a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242e:	2300      	movs	r3, #0
 8002430:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002432:	2321      	movs	r3, #33	; 0x21
 8002434:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002438:	f7fe fd6c 	bl	8000f14 <HAL_GetTick>
 800243c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800243e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002442:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002446:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002448:	b29b      	uxth	r3, r3
 800244a:	b96b      	cbnz	r3, 8002468 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244c:	463b      	mov	r3, r7
 800244e:	4632      	mov	r2, r6
 8002450:	2140      	movs	r1, #64	; 0x40
 8002452:	4620      	mov	r0, r4
 8002454:	f7ff ff80 	bl	8002358 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002458:	b9a8      	cbnz	r0, 8002486 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800245a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800245c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002460:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002468:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800246a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800246c:	3b01      	subs	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002472:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002474:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800247a:	4620      	mov	r0, r4
 800247c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800247e:	d10e      	bne.n	800249e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002480:	f7ff ff6a 	bl	8002358 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002484:	b110      	cbz	r0, 800248c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002486:	2003      	movs	r0, #3
 8002488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800248c:	882b      	ldrh	r3, [r5, #0]
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002494:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002496:	6923      	ldr	r3, [r4, #16]
 8002498:	b943      	cbnz	r3, 80024ac <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800249a:	3502      	adds	r5, #2
 800249c:	e7d3      	b.n	8002446 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800249e:	f7ff ff5b 	bl	8002358 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d1ef      	bne.n	8002486 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	782a      	ldrb	r2, [r5, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	3501      	adds	r5, #1
 80024ae:	e7ca      	b.n	8002446 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
 80024b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80024b6:	2002      	movs	r0, #2
}
 80024b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024bc <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80024bc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d120      	bne.n	8002506 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80024c4:	b1e9      	cbz	r1, 8002502 <HAL_UART_Receive_IT+0x46>
 80024c6:	b1e2      	cbz	r2, 8002502 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80024c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d01a      	beq.n	8002506 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80024d0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80024d2:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d4:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024d6:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024da:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024de:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80024e0:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024e2:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80024e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024e8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80024ec:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024ee:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80024f0:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024f2:	f041 0101 	orr.w	r1, r1, #1
 80024f6:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024f8:	68d1      	ldr	r1, [r2, #12]
 80024fa:	f041 0120 	orr.w	r1, r1, #32
 80024fe:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002500:	4770      	bx	lr
      return HAL_ERROR;
 8002502:	2001      	movs	r0, #1
 8002504:	4770      	bx	lr
    return HAL_BUSY;
 8002506:	2002      	movs	r0, #2
}
 8002508:	4770      	bx	lr

0800250a <HAL_UART_TxCpltCallback>:
 800250a:	4770      	bx	lr

0800250c <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800250c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002510:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002512:	2b22      	cmp	r3, #34	; 0x22
 8002514:	d136      	bne.n	8002584 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002516:	6883      	ldr	r3, [r0, #8]
 8002518:	6901      	ldr	r1, [r0, #16]
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251e:	6802      	ldr	r2, [r0, #0]
 8002520:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002522:	d123      	bne.n	800256c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002524:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002526:	b9e9      	cbnz	r1, 8002564 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800252c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002530:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002532:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002534:	3c01      	subs	r4, #1
 8002536:	b2a4      	uxth	r4, r4
 8002538:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800253a:	b98c      	cbnz	r4, 8002560 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800253c:	6803      	ldr	r3, [r0, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	f022 0220 	bic.w	r2, r2, #32
 8002544:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800254c:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002556:	2320      	movs	r3, #32
 8002558:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800255c:	f000 fa06 	bl	800296c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002560:	2000      	movs	r0, #0
}
 8002562:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f823 2b01 	strh.w	r2, [r3], #1
 800256a:	e7e1      	b.n	8002530 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800256c:	b921      	cbnz	r1, 8002578 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800256e:	1c59      	adds	r1, r3, #1
 8002570:	6852      	ldr	r2, [r2, #4]
 8002572:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e7dc      	b.n	8002532 <UART_Receive_IT+0x26>
 8002578:	6852      	ldr	r2, [r2, #4]
 800257a:	1c59      	adds	r1, r3, #1
 800257c:	6281      	str	r1, [r0, #40]	; 0x28
 800257e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002582:	e7f7      	b.n	8002574 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002584:	2002      	movs	r0, #2
 8002586:	bd10      	pop	{r4, pc}

08002588 <HAL_UART_ErrorCallback>:
 8002588:	4770      	bx	lr
	...

0800258c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800258c:	6803      	ldr	r3, [r0, #0]
{
 800258e:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002590:	681a      	ldr	r2, [r3, #0]
{
 8002592:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002594:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002596:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002598:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800259a:	d107      	bne.n	80025ac <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800259c:	0696      	lsls	r6, r2, #26
 800259e:	d55a      	bpl.n	8002656 <HAL_UART_IRQHandler+0xca>
 80025a0:	068d      	lsls	r5, r1, #26
 80025a2:	d558      	bpl.n	8002656 <HAL_UART_IRQHandler+0xca>
}
 80025a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80025a8:	f7ff bfb0 	b.w	800250c <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025ac:	f015 0501 	ands.w	r5, r5, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_UART_IRQHandler+0x2c>
 80025b2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80025b6:	d04e      	beq.n	8002656 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025b8:	07d3      	lsls	r3, r2, #31
 80025ba:	d505      	bpl.n	80025c8 <HAL_UART_IRQHandler+0x3c>
 80025bc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025be:	bf42      	ittt	mi
 80025c0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80025c2:	f043 0301 	orrmi.w	r3, r3, #1
 80025c6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c8:	0750      	lsls	r0, r2, #29
 80025ca:	d504      	bpl.n	80025d6 <HAL_UART_IRQHandler+0x4a>
 80025cc:	b11d      	cbz	r5, 80025d6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025d6:	0793      	lsls	r3, r2, #30
 80025d8:	d504      	bpl.n	80025e4 <HAL_UART_IRQHandler+0x58>
 80025da:	b11d      	cbz	r5, 80025e4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025e4:	0716      	lsls	r6, r2, #28
 80025e6:	d504      	bpl.n	80025f2 <HAL_UART_IRQHandler+0x66>
 80025e8:	b11d      	cbz	r5, 80025f2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d066      	beq.n	80026c6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f8:	0695      	lsls	r5, r2, #26
 80025fa:	d504      	bpl.n	8002606 <HAL_UART_IRQHandler+0x7a>
 80025fc:	0688      	lsls	r0, r1, #26
 80025fe:	d502      	bpl.n	8002606 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff ff83 	bl	800250c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002606:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002608:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800260a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800260c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800260e:	0711      	lsls	r1, r2, #28
 8002610:	d402      	bmi.n	8002618 <HAL_UART_IRQHandler+0x8c>
 8002612:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002616:	d01a      	beq.n	800264e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002618:	f7ff fdf2 	bl	8002200 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	0652      	lsls	r2, r2, #25
 8002622:	d510      	bpl.n	8002646 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002624:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002626:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800262e:	b150      	cbz	r0, 8002646 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_UART_IRQHandler+0x13c>)
 8002632:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002634:	f7fe ff4e 	bl	80014d4 <HAL_DMA_Abort_IT>
 8002638:	2800      	cmp	r0, #0
 800263a:	d044      	beq.n	80026c6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800263c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800263e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002642:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002644:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff ff9e 	bl	8002588 <HAL_UART_ErrorCallback>
 800264c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800264e:	f7ff ff9b 	bl	8002588 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002654:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002656:	0616      	lsls	r6, r2, #24
 8002658:	d527      	bpl.n	80026aa <HAL_UART_IRQHandler+0x11e>
 800265a:	060d      	lsls	r5, r1, #24
 800265c:	d525      	bpl.n	80026aa <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800265e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002662:	2a21      	cmp	r2, #33	; 0x21
 8002664:	d12f      	bne.n	80026c6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002666:	68a2      	ldr	r2, [r4, #8]
 8002668:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800266c:	6a22      	ldr	r2, [r4, #32]
 800266e:	d117      	bne.n	80026a0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002670:	8811      	ldrh	r1, [r2, #0]
 8002672:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002676:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002678:	6921      	ldr	r1, [r4, #16]
 800267a:	b979      	cbnz	r1, 800269c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 800267c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800267e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002680:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002682:	3a01      	subs	r2, #1
 8002684:	b292      	uxth	r2, r2
 8002686:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002688:	b9ea      	cbnz	r2, 80026c6 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002690:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800269c:	3201      	adds	r2, #1
 800269e:	e7ee      	b.n	800267e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026a0:	1c51      	adds	r1, r2, #1
 80026a2:	6221      	str	r1, [r4, #32]
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	e7ea      	b.n	8002680 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026aa:	0650      	lsls	r0, r2, #25
 80026ac:	d50b      	bpl.n	80026c6 <HAL_UART_IRQHandler+0x13a>
 80026ae:	064a      	lsls	r2, r1, #25
 80026b0:	d509      	bpl.n	80026c6 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026b2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80026b4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ba:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026bc:	2320      	movs	r3, #32
 80026be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80026c2:	f7ff ff22 	bl	800250a <HAL_UART_TxCpltCallback>
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
 80026c8:	080026cd 	.word	0x080026cd

080026cc <UART_DMAAbortOnError>:
{
 80026cc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80026ce:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80026d2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026d4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80026d6:	f7ff ff57 	bl	8002588 <HAL_UART_ErrorCallback>
 80026da:	bd08      	pop	{r3, pc}

080026dc <setIdleState>:
//OT
void initOT(void){

}
void setIdleState(void){
	HAL_GPIO_WritePin(OT_RXO_GPIO_Port, OT_RXO_Pin, GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e2:	4801      	ldr	r0, [pc, #4]	; (80026e8 <setIdleState+0xc>)
 80026e4:	f7ff b81e 	b.w	8001724 <HAL_GPIO_WritePin>
 80026e8:	40010800 	.word	0x40010800

080026ec <activateBoiler>:
}
void setActiveState(void){
	HAL_GPIO_WritePin(OT_RXO_GPIO_Port, OT_RXO_Pin, GPIO_PIN_RESET);
}
void activateBoiler(void){
 80026ec:	b508      	push	{r3, lr}
	setIdleState();
 80026ee:	f7ff fff5 	bl	80026dc <setIdleState>
	HAL_Delay(1000);
}
 80026f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 80026f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026fa:	f7fe bc11 	b.w	8000f20 <HAL_Delay>
	...

08002700 <OWInit>:
void OWTransmit(void);
void OWReceive(void);

//1 wire
void OWInit(void){
temp.TransmitReceive = false;
 8002700:	2200      	movs	r2, #0
temp.busy = true;
 8002702:	2101      	movs	r1, #1
temp.TransmitReceive = false;
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <OWInit+0x10>)
 8002706:	721a      	strb	r2, [r3, #8]
temp.busy = true;
 8002708:	7259      	strb	r1, [r3, #9]
temp.transmitInProgress = false;
 800270a:	729a      	strb	r2, [r3, #10]
temp.receiveInProgress = false;
 800270c:	72da      	strb	r2, [r3, #11]
 800270e:	4770      	bx	lr
 8002710:	20000250 	.word	0x20000250

08002714 <OWTick200>:
//temp.TransmitReceive = false;
//HAL_Delay(200);
//OWReceive();
}
void OWTick200(void){
    if(!temp.transmitInProgress && !temp.receiveInProgress){
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <OWTick200+0x18>)
 8002716:	7a9a      	ldrb	r2, [r3, #10]
 8002718:	b932      	cbnz	r2, 8002728 <OWTick200+0x14>
 800271a:	7ad9      	ldrb	r1, [r3, #11]
 800271c:	b921      	cbnz	r1, 8002728 <OWTick200+0x14>
        temp.TransmitReceive = ! temp.TransmitReceive;
 800271e:	7a1a      	ldrb	r2, [r3, #8]
        temp.busy = false;
 8002720:	7259      	strb	r1, [r3, #9]
        temp.TransmitReceive = ! temp.TransmitReceive;
 8002722:	f082 0201 	eor.w	r2, r2, #1
 8002726:	721a      	strb	r2, [r3, #8]
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000250 	.word	0x20000250

08002730 <OWReset>:
bool OWReset(void){
	uint8_t tx = 0xf0;
	uint8_t rx = 0;

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
 8002730:	f44f 5316 	mov.w	r3, #9600	; 0x2580
bool OWReset(void){
 8002734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	huart2.Instance = USART2;
 8002738:	4c19      	ldr	r4, [pc, #100]	; (80027a0 <OWReset+0x70>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 800273a:	270c      	movs	r7, #12
	huart2.Init.BaudRate = 9600;
 800273c:	6063      	str	r3, [r4, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	2300      	movs	r3, #0
	huart2.Instance = USART2;
 8002740:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80027a4 <OWReset+0x74>
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002744:	4620      	mov	r0, r4
	huart2.Instance = USART2;
 8002746:	f8c4 8000 	str.w	r8, [r4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	60a3      	str	r3, [r4, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800274c:	60e3      	str	r3, [r4, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800274e:	6123      	str	r3, [r4, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002750:	6167      	str	r7, [r4, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	61a3      	str	r3, [r4, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	61e3      	str	r3, [r4, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002756:	f7ff fe27 	bl	80023a8 <HAL_UART_Init>
 800275a:	4605      	mov	r5, r0
 800275c:	b100      	cbz	r0, 8002760 <OWReset+0x30>
 800275e:	e7fe      	b.n	800275e <OWReset+0x2e>
	{
	  _Error_Handler(__FILE__, __LINE__);
	}

	huart2.Instance->DR = tx;
 8002760:	22f0      	movs	r2, #240	; 0xf0
 8002762:	6823      	ldr	r3, [r4, #0]
	HAL_Delay(10);
 8002764:	200a      	movs	r0, #10
	huart2.Instance->DR = tx;
 8002766:	605a      	str	r2, [r3, #4]
	HAL_Delay(10);
 8002768:	f7fe fbda 	bl	8000f20 <HAL_Delay>
	rx = huart2.Instance->DR;
 800276c:	6823      	ldr	r3, [r4, #0]
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800276e:	4620      	mov	r0, r4
	rx = huart2.Instance->DR;
 8002770:	685e      	ldr	r6, [r3, #4]
	huart2.Init.BaudRate = 115200;
 8002772:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	rx = huart2.Instance->DR;
 8002776:	b2f6      	uxtb	r6, r6
	huart2.Instance = USART2;
 8002778:	f8c4 8000 	str.w	r8, [r4]
	huart2.Init.BaudRate = 115200;
 800277c:	6063      	str	r3, [r4, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800277e:	60a5      	str	r5, [r4, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002780:	60e5      	str	r5, [r4, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002782:	6125      	str	r5, [r4, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002784:	6167      	str	r7, [r4, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002786:	61a5      	str	r5, [r4, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	61e5      	str	r5, [r4, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800278a:	f7ff fe0d 	bl	80023a8 <HAL_UART_Init>
 800278e:	b100      	cbz	r0, 8002792 <OWReset+0x62>
 8002790:	e7fe      	b.n	8002790 <OWReset+0x60>
    }
	if(rx==0xf0)
		return false;

	return true;
}
 8002792:	f1b6 00f0 	subs.w	r0, r6, #240	; 0xf0
 8002796:	bf18      	it	ne
 8002798:	2001      	movne	r0, #1
 800279a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800279e:	bf00      	nop
 80027a0:	200005a0 	.word	0x200005a0
 80027a4:	40004400 	.word	0x40004400

080027a8 <OWTransmit>:

void OWTransmit(void){
    temp.transmitInProgress = true;
 80027a8:	2301      	movs	r3, #1
void OWTransmit(void){
 80027aa:	b510      	push	{r4, lr}
    temp.transmitInProgress = true;
 80027ac:	4c07      	ldr	r4, [pc, #28]	; (80027cc <OWTransmit+0x24>)
 80027ae:	72a3      	strb	r3, [r4, #10]
    //temp.busy = true;
	temp.reset = OWReset();
 80027b0:	f7ff ffbe 	bl	8002730 <OWReset>
 80027b4:	70a0      	strb	r0, [r4, #2]
	if(temp.reset) HAL_UART_Transmit(&huart2,&convert_T,16,5000);
 80027b6:	b130      	cbz	r0, 80027c6 <OWTransmit+0x1e>
 80027b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80027bc:	2210      	movs	r2, #16
 80027be:	4904      	ldr	r1, [pc, #16]	; (80027d0 <OWTransmit+0x28>)
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <OWTransmit+0x2c>)
 80027c2:	f7ff fe1f 	bl	8002404 <HAL_UART_Transmit>
    //temp.TransmitReceive = false;
    temp.transmitInProgress = false;
 80027c6:	2300      	movs	r3, #0
 80027c8:	72a3      	strb	r3, [r4, #10]
 80027ca:	bd10      	pop	{r4, pc}
 80027cc:	20000250 	.word	0x20000250
 80027d0:	08003756 	.word	0x08003756
 80027d4:	200005a0 	.word	0x200005a0

080027d8 <OWReceive>:
}
void OWReceive(void){
    temp.receiveInProgress = true;
 80027d8:	2301      	movs	r3, #1
void OWReceive(void){
 80027da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    temp.receiveInProgress = true;
 80027de:	4c1d      	ldr	r4, [pc, #116]	; (8002854 <OWReceive+0x7c>)
 80027e0:	72e3      	strb	r3, [r4, #11]
    //temp.busy = true;
	uint8_t rx=0;
	uint8_t i=0;

	temp.reset = OWReset();
 80027e2:	f7ff ffa5 	bl	8002730 <OWReset>
 80027e6:	70a0      	strb	r0, [r4, #2]
	if( temp.reset ){
 80027e8:	b378      	cbz	r0, 800284a <OWReceive+0x72>
		temp.raw = 0;
 80027ea:	2300      	movs	r3, #0
				HAL_UART_Transmit(&huart2,&read_scratch,16,5000);
 80027ec:	2210      	movs	r2, #16
		temp.raw = 0;
 80027ee:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2,&read_scratch,16,5000);
 80027f0:	4919      	ldr	r1, [pc, #100]	; (8002858 <OWReceive+0x80>)
 80027f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80027f6:	4819      	ldr	r0, [pc, #100]	; (800285c <OWReceive+0x84>)
 80027f8:	f7ff fe04 	bl	8002404 <HAL_UART_Transmit>
 80027fc:	2510      	movs	r5, #16

				for(i=0;i<16;i++){
					huart2.Instance->DR = 0xff;
 80027fe:	27ff      	movs	r7, #255	; 0xff
 8002800:	4e16      	ldr	r6, [pc, #88]	; (800285c <OWReceive+0x84>)
					HAL_Delay(10);
					rx = huart2.Instance->DR;

					if (rx == 0xff) {
						temp.raw = (temp.raw>>1) | 0x8000;
 8002802:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002860 <OWReceive+0x88>
					huart2.Instance->DR = 0xff;
 8002806:	6833      	ldr	r3, [r6, #0]
					HAL_Delay(10);
 8002808:	200a      	movs	r0, #10
					huart2.Instance->DR = 0xff;
 800280a:	605f      	str	r7, [r3, #4]
					HAL_Delay(10);
 800280c:	f7fe fb88 	bl	8000f20 <HAL_Delay>
					rx = huart2.Instance->DR;
 8002810:	6833      	ldr	r3, [r6, #0]
 8002812:	3d01      	subs	r5, #1
 8002814:	685b      	ldr	r3, [r3, #4]
					if (rx == 0xff) {
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2bff      	cmp	r3, #255	; 0xff
						temp.raw = (temp.raw>>1) | 0x8000;
 800281a:	8823      	ldrh	r3, [r4, #0]
 800281c:	bf0c      	ite	eq
 800281e:	ea48 0353 	orreq.w	r3, r8, r3, lsr #1
					} else {
						temp.raw = temp.raw>>1;
 8002822:	085b      	lsrne	r3, r3, #1
				for(i=0;i<16;i++){
 8002824:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
						temp.raw = temp.raw>>1;
 8002828:	8023      	strh	r3, [r4, #0]
				for(i=0;i<16;i++){
 800282a:	d1ec      	bne.n	8002806 <OWReceive+0x2e>
					}
				}
				//HAL_UART_Receive(&huart2,&scratch,16,2000);
				//HAL_UART_*/
				HAL_Delay(1);
 800282c:	2001      	movs	r0, #1
 800282e:	f7fe fb77 	bl	8000f20 <HAL_Delay>
				temp.out = (temp.out + (int)(temp.raw>>4) )/2;
 8002832:	8820      	ldrh	r0, [r4, #0]
 8002834:	0900      	lsrs	r0, r0, #4
 8002836:	f7fe f967 	bl	8000b08 <__aeabi_i2f>
 800283a:	6861      	ldr	r1, [r4, #4]
 800283c:	f7fe f8b0 	bl	80009a0 <__addsf3>
 8002840:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002844:	f7fe f9b4 	bl	8000bb0 <__aeabi_fmul>
 8002848:	6060      	str	r0, [r4, #4]
			}
    //temp.TransmitReceive = true;
    temp.receiveInProgress = false;
 800284a:	2300      	movs	r3, #0
 800284c:	72e3      	strb	r3, [r4, #11]
 800284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002852:	bf00      	nop
 8002854:	20000250 	.word	0x20000250
 8002858:	08003766 	.word	0x08003766
 800285c:	200005a0 	.word	0x200005a0
 8002860:	ffff8000 	.word	0xffff8000

08002864 <OWRoute>:
    if(!temp.busy){
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <OWRoute+0x18>)
 8002866:	7a5a      	ldrb	r2, [r3, #9]
 8002868:	b93a      	cbnz	r2, 800287a <OWRoute+0x16>
        temp.busy = true;
 800286a:	2201      	movs	r2, #1
 800286c:	725a      	strb	r2, [r3, #9]
        if(temp.TransmitReceive)
 800286e:	7a1b      	ldrb	r3, [r3, #8]
 8002870:	b10b      	cbz	r3, 8002876 <OWRoute+0x12>
            OWTransmit();
 8002872:	f7ff bf99 	b.w	80027a8 <OWTransmit>
            OWReceive();
 8002876:	f7ff bfaf 	b.w	80027d8 <OWReceive>
 800287a:	4770      	bx	lr
 800287c:	20000250 	.word	0x20000250

08002880 <RPiRXRoute>:
UART_Struct RPi_UART;

void RPiRXRoute(void);

//toRPIlib
void RPiRXRoute(void){
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i=0;i<4;i++)
        rpiframe.raw[i] = RPi_UART.rx_buff[i];
 8002882:	4c32      	ldr	r4, [pc, #200]	; (800294c <RPiRXRoute+0xcc>)
 8002884:	4d32      	ldr	r5, [pc, #200]	; (8002950 <RPiRXRoute+0xd0>)
 8002886:	7967      	ldrb	r7, [r4, #5]
 8002888:	79a6      	ldrb	r6, [r4, #6]
 800288a:	702f      	strb	r7, [r5, #0]
 800288c:	706e      	strb	r6, [r5, #1]

    switch(rpiframe.frame.address){
 800288e:	882b      	ldrh	r3, [r5, #0]
        rpiframe.raw[i] = RPi_UART.rx_buff[i];
 8002890:	79e1      	ldrb	r1, [r4, #7]
 8002892:	7a22      	ldrb	r2, [r4, #8]
    switch(rpiframe.frame.address){
 8002894:	3b01      	subs	r3, #1
        rpiframe.raw[i] = RPi_UART.rx_buff[i];
 8002896:	70a9      	strb	r1, [r5, #2]
 8002898:	70ea      	strb	r2, [r5, #3]
    switch(rpiframe.frame.address){
 800289a:	2b0a      	cmp	r3, #10
 800289c:	d815      	bhi.n	80028ca <RPiRXRoute+0x4a>
 800289e:	e8df f003 	tbb	[pc, r3]
 80028a2:	3306      	.short	0x3306
 80028a4:	143b3b37 	.word	0x143b3b37
 80028a8:	40141414 	.word	0x40141414
 80028ac:	48          	.byte	0x48
 80028ad:	00          	.byte	0x00
    case RPi_ECHO_UART_ADDRESS:
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80028ae:	2140      	movs	r1, #64	; 0x40
 80028b0:	4828      	ldr	r0, [pc, #160]	; (8002954 <RPiRXRoute+0xd4>)
 80028b2:	f7fe ff3c 	bl	800172e <HAL_GPIO_TogglePin>
        //frame.frame.address = 1;
        //if(!frame.frame.read)
            for (int i=0;i<4;i++)
                RPi_UART.tx_buff[i] = rpiframe.raw[i];
 80028b6:	782b      	ldrb	r3, [r5, #0]
 80028b8:	73e3      	strb	r3, [r4, #15]
 80028ba:	786b      	ldrb	r3, [r5, #1]
 80028bc:	7423      	strb	r3, [r4, #16]
 80028be:	78ab      	ldrb	r3, [r5, #2]
 80028c0:	7463      	strb	r3, [r4, #17]
 80028c2:	78eb      	ldrb	r3, [r5, #3]
 80028c4:	74a3      	strb	r3, [r4, #18]
        //else
        //	for (int i=0;i<4;i++)
        //		RPi_UART.tx_buff[i] = 0;
        RPi_UART.transmitRequered = true;
 80028c6:	2301      	movs	r3, #1
 80028c8:	7023      	strb	r3, [r4, #0]
            RPi_UART.tx_buff[i] = rpiframe.raw[i];
        RPi_UART.transmitRequered = true;
        break;
    }

    if(RPi_UART.rx_buff[0]=='H' && RPi_UART.rx_buff[1]=='e' && RPi_UART.rx_buff[2]=='l'){
 80028ca:	7963      	ldrb	r3, [r4, #5]
 80028cc:	2b48      	cmp	r3, #72	; 0x48
 80028ce:	d108      	bne.n	80028e2 <RPiRXRoute+0x62>
 80028d0:	f646 4365 	movw	r3, #27749	; 0x6c65
 80028d4:	88e2      	ldrh	r2, [r4, #6]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d103      	bne.n	80028e2 <RPiRXRoute+0x62>
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80028da:	2140      	movs	r1, #64	; 0x40
 80028dc:	481d      	ldr	r0, [pc, #116]	; (8002954 <RPiRXRoute+0xd4>)
 80028de:	f7fe ff26 	bl	800172e <HAL_GPIO_TogglePin>
    }
    if(RPi_UART.rx_buff[0]=='t' && RPi_UART.rx_buff[1]=='m' && RPi_UART.rx_buff[2]=='p'){
 80028e2:	7963      	ldrb	r3, [r4, #5]
 80028e4:	2b74      	cmp	r3, #116	; 0x74
 80028e6:	d108      	bne.n	80028fa <RPiRXRoute+0x7a>
 80028e8:	f247 036d 	movw	r3, #28781	; 0x706d
 80028ec:	88e2      	ldrh	r2, [r4, #6]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d103      	bne.n	80028fa <RPiRXRoute+0x7a>
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80028f2:	2140      	movs	r1, #64	; 0x40
 80028f4:	4817      	ldr	r0, [pc, #92]	; (8002954 <RPiRXRoute+0xd4>)
 80028f6:	f7fe ff1a 	bl	800172e <HAL_GPIO_TogglePin>
        //RPi_UART.tx_buff
    }
    HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,4);
}
 80028fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,4);
 80028fe:	2204      	movs	r2, #4
 8002900:	4915      	ldr	r1, [pc, #84]	; (8002958 <RPiRXRoute+0xd8>)
 8002902:	4816      	ldr	r0, [pc, #88]	; (800295c <RPiRXRoute+0xdc>)
 8002904:	f7ff bdda 	b.w	80024bc <HAL_UART_Receive_IT>
        ot.RPiRequestHI = rpiframe.frame.data;
 8002908:	886a      	ldrh	r2, [r5, #2]
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <RPiRXRoute+0xe0>)
 800290c:	801a      	strh	r2, [r3, #0]
        break;
 800290e:	e7dc      	b.n	80028ca <RPiRXRoute+0x4a>
        ot.RPiRequestLO = rpiframe.frame.data;
 8002910:	886a      	ldrh	r2, [r5, #2]
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <RPiRXRoute+0xe0>)
 8002914:	805a      	strh	r2, [r3, #2]
        break;
 8002916:	e7d8      	b.n	80028ca <RPiRXRoute+0x4a>
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	480e      	ldr	r0, [pc, #56]	; (8002954 <RPiRXRoute+0xd4>)
 800291c:	f7fe ff07 	bl	800172e <HAL_GPIO_TogglePin>
        break;
 8002920:	e7d3      	b.n	80028ca <RPiRXRoute+0x4a>
        OTCommon.targetTemp = rpiframe.frame.data;
 8002922:	8868      	ldrh	r0, [r5, #2]
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <RPiRXRoute+0xe4>)
            RPi_UART.tx_buff[i] = rpiframe.raw[i];
 8002926:	73e7      	strb	r7, [r4, #15]
        OTCommon.targetTemp = rpiframe.frame.data;
 8002928:	8018      	strh	r0, [r3, #0]
            RPi_UART.tx_buff[i] = rpiframe.raw[i];
 800292a:	7426      	strb	r6, [r4, #16]
 800292c:	7461      	strb	r1, [r4, #17]
 800292e:	74a2      	strb	r2, [r4, #18]
 8002930:	e7c9      	b.n	80028c6 <RPiRXRoute+0x46>
        rpiframe.frame.data = temp.out;
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <RPiRXRoute+0xe8>)
 8002934:	6858      	ldr	r0, [r3, #4]
 8002936:	f7fe fa8b 	bl	8000e50 <__aeabi_f2uiz>
 800293a:	8068      	strh	r0, [r5, #2]
            RPi_UART.tx_buff[i] = rpiframe.raw[i];
 800293c:	7460      	strb	r0, [r4, #17]
 800293e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002942:	73e7      	strb	r7, [r4, #15]
 8002944:	7426      	strb	r6, [r4, #16]
 8002946:	74a0      	strb	r0, [r4, #18]
 8002948:	e7bd      	b.n	80028c6 <RPiRXRoute+0x46>
 800294a:	bf00      	nop
 800294c:	2000025c 	.word	0x2000025c
 8002950:	2000008c 	.word	0x2000008c
 8002954:	40011000 	.word	0x40011000
 8002958:	20000261 	.word	0x20000261
 800295c:	20000178 	.word	0x20000178
 8002960:	20000538 	.word	0x20000538
 8002964:	2000011c 	.word	0x2000011c
 8002968:	20000250 	.word	0x20000250

0800296c <HAL_UART_RxCpltCallback>:
			//HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800296c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (huart->Instance==USART3){
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_UART_RxCpltCallback+0x64>)
{
 8002974:	4604      	mov	r4, r0
	if (huart->Instance==USART3){
 8002976:	429a      	cmp	r2, r3
 8002978:	d101      	bne.n	800297e <HAL_UART_RxCpltCallback+0x12>
        RPiRXRoute();
 800297a:	f7ff ff81 	bl	8002880 <RPiRXRoute>
	}
	if (huart->Instance==USART1){
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_UART_RxCpltCallback+0x68>)
 8002982:	429a      	cmp	r2, r3
 8002984:	d122      	bne.n	80029cc <HAL_UART_RxCpltCallback+0x60>
 8002986:	2400      	movs	r4, #0

			    size_t len = strlen(gprs.RX);
			    char *str2 = malloc(len + 1 + 1 ); /* one for extra char, one for trailing zero */
			    strcpy(str2, gprs.RX);
			    str2[len] = gprs.rx_buff[i];
			    str2[len + 1] = '\0';
 8002988:	46a1      	mov	r9, r4
			if(gprs.rx_buff[i]!='\0'){
 800298a:	4e13      	ldr	r6, [pc, #76]	; (80029d8 <HAL_UART_RxCpltCallback+0x6c>)
 800298c:	19a3      	adds	r3, r4, r6
 800298e:	7a1f      	ldrb	r7, [r3, #8]
 8002990:	b197      	cbz	r7, 80029b8 <HAL_UART_RxCpltCallback+0x4c>
			    size_t len = strlen(gprs.RX);
 8002992:	f8d6 8054 	ldr.w	r8, [r6, #84]	; 0x54
 8002996:	4640      	mov	r0, r8
 8002998:	f7fd fbda 	bl	8000150 <strlen>
 800299c:	4605      	mov	r5, r0
			    char *str2 = malloc(len + 1 + 1 ); /* one for extra char, one for trailing zero */
 800299e:	3002      	adds	r0, #2
 80029a0:	f000 fd90 	bl	80034c4 <malloc>
			    strcpy(str2, gprs.RX);
 80029a4:	4641      	mov	r1, r8
 80029a6:	f000 fe57 	bl	8003658 <strcpy>
			    str2[len] = gprs.rx_buff[i];
 80029aa:	5547      	strb	r7, [r0, r5]
			    str2[len + 1] = '\0';
 80029ac:	4405      	add	r5, r0
 80029ae:	f885 9001 	strb.w	r9, [r5, #1]

			    gprs.RX = str2;
 80029b2:	6570      	str	r0, [r6, #84]	; 0x54
			    free(str2);
 80029b4:	f000 fd8e 	bl	80034d4 <free>
		for(int i=0;i<2;i++){
 80029b8:	3401      	adds	r4, #1
 80029ba:	2c02      	cmp	r4, #2
 80029bc:	d1e6      	bne.n	800298c <HAL_UART_RxCpltCallback+0x20>
				}else{
					gprs.index++;
				}*/
			}
		}
		HAL_UART_Receive_IT(&huart1,gprs.rx_buff,2);
 80029be:	4622      	mov	r2, r4
	}
}
 80029c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		HAL_UART_Receive_IT(&huart1,gprs.rx_buff,2);
 80029c4:	4905      	ldr	r1, [pc, #20]	; (80029dc <HAL_UART_RxCpltCallback+0x70>)
 80029c6:	4806      	ldr	r0, [pc, #24]	; (80029e0 <HAL_UART_RxCpltCallback+0x74>)
 80029c8:	f7ff bd78 	b.w	80024bc <HAL_UART_Receive_IT>
 80029cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029d0:	40004800 	.word	0x40004800
 80029d4:	40013800 	.word	0x40013800
 80029d8:	200002a8 	.word	0x200002a8
 80029dc:	200002b0 	.word	0x200002b0
 80029e0:	20000404 	.word	0x20000404

080029e4 <strpos>:
int strpos(char *hay, char *needle, int offset)
{
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	460e      	mov	r6, r1
 80029ea:	4614      	mov	r4, r2
 80029ec:	4605      	mov	r5, r0
   char haystack[strlen(hay)];
 80029ee:	f7fd fbaf 	bl	8000150 <strlen>
 80029f2:	3007      	adds	r0, #7
 80029f4:	f020 0007 	bic.w	r0, r0, #7
 80029f8:	ebad 0d00 	sub.w	sp, sp, r0
   strncpy(haystack, hay+offset, strlen(hay)-offset);
 80029fc:	4628      	mov	r0, r5
 80029fe:	f7fd fba7 	bl	8000150 <strlen>
 8002a02:	1929      	adds	r1, r5, r4
 8002a04:	1b02      	subs	r2, r0, r4
 8002a06:	4668      	mov	r0, sp
 8002a08:	f000 fe2e 	bl	8003668 <strncpy>
   char *p = strstr(haystack, needle);
 8002a0c:	4631      	mov	r1, r6
 8002a0e:	4668      	mov	r0, sp
 8002a10:	f000 fe3f 	bl	8003692 <strstr>
   if (p)
 8002a14:	b120      	cbz	r0, 8002a20 <strpos+0x3c>
      return p - haystack+offset;
 8002a16:	466b      	mov	r3, sp
 8002a18:	1ac0      	subs	r0, r0, r3
 8002a1a:	4420      	add	r0, r4
   return -1;
}
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   return -1;
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	e7fa      	b.n	8002a1c <strpos+0x38>
	...

08002a28 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 8002a28:	b510      	push	{r4, lr}
	if(strpos(gprs.RX,str2,0)>=0)
		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);*/



	if(strlen(gprs.RX)>0){
 8002a2a:	4c25      	ldr	r4, [pc, #148]	; (8002ac0 <HAL_SYSTICK_Callback+0x98>)
 8002a2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a2e:	7803      	ldrb	r3, [r0, #0]
 8002a30:	b37b      	cbz	r3, 8002a92 <HAL_SYSTICK_Callback+0x6a>
		char * found = strstr(gprs.RX,"OK"); /* should return 0x18 */
 8002a32:	4924      	ldr	r1, [pc, #144]	; (8002ac4 <HAL_SYSTICK_Callback+0x9c>)
 8002a34:	f000 fe2d 	bl	8003692 <strstr>
		if (found != NULL)                     /* strstr returns NULL if item not found */
 8002a38:	b358      	cbz	r0, 8002a92 <HAL_SYSTICK_Callback+0x6a>
		{
		  int index = found - gprs.RX;          /* index is 8 */
											   /* source[8] gets you "i" */
		  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002a3a:	2140      	movs	r1, #64	; 0x40
 8002a3c:	4822      	ldr	r0, [pc, #136]	; (8002ac8 <HAL_SYSTICK_Callback+0xa0>)
 8002a3e:	f7fe fe76 	bl	800172e <HAL_GPIO_TogglePin>
		  gprs.waitForResponse = false;
 8002a42:	2200      	movs	r2, #0

		  //gprs.RX = "";
		  gprs.index++;
 8002a44:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
		  gprs.waitForResponse = false;
 8002a48:	7062      	strb	r2, [r4, #1]
		  gprs.index++;
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
		  if(gprs.index>5)
 8002a4e:	2b05      	cmp	r3, #5
			  gprs.index=0;
 8002a50:	bf88      	it	hi
 8002a52:	f884 2158 	strbhi.w	r2, [r4, #344]	; 0x158

		  if(strpos(gprs.RX,"+COPS?",0)>0){
 8002a56:	491d      	ldr	r1, [pc, #116]	; (8002acc <HAL_SYSTICK_Callback+0xa4>)
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
		  gprs.index++;
 8002a5e:	bf98      	it	ls
 8002a60:	f884 3158 	strbls.w	r3, [r4, #344]	; 0x158
		  if(strpos(gprs.RX,"+COPS?",0)>0){
 8002a64:	f7ff ffbe 	bl	80029e4 <strpos>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	dd03      	ble.n	8002a74 <HAL_SYSTICK_Callback+0x4c>
			  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	4816      	ldr	r0, [pc, #88]	; (8002ac8 <HAL_SYSTICK_Callback+0xa0>)
 8002a70:	f7fe fe5d 	bl	800172e <HAL_GPIO_TogglePin>
			  //printf("+CSQ");
			  //char *token = strtok(gprs.RX, "+CSQ: ");
			 // quality = strtol(gprs.RX, ',', 10);
		  }
		  gprs.RX = "";
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_SYSTICK_Callback+0xa8>)
 8002a76:	6563      	str	r3, [r4, #84]	; 0x54
		  //strcpy(gprs.TX,a[gprs.index]);
		  switch(gprs.index){
 8002a78:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d806      	bhi.n	8002a8e <HAL_SYSTICK_Callback+0x66>
 8002a80:	e8df f003 	tbb	[pc, r3]
 8002a84:	17151303 	.word	0x17151303
 8002a88:	1b19      	.short	0x1b19
		  case 0:
			  gprs.TX = "AT\r\n";
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_SYSTICK_Callback+0xac>)
			  break;
		  case 4:
			  gprs.TX = "AT+CREG?\r\n";
			  break;
		  case 5:
			  gprs.TX = "AT+COPS?\r\n";
 8002a8c:	6063      	str	r3, [r4, #4]
			  break;
		  }
		  gprs.transmitRequered = true;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	7023      	strb	r3, [r4, #0]
	}
	//strstr( gprs.RX, "in" );

	//if(index>=0)

      if(HAL_GetTick()%200==0)
 8002a92:	f7fe fa3f 	bl	8000f14 <HAL_GetTick>
 8002a96:	23c8      	movs	r3, #200	; 0xc8
 8002a98:	fbb0 f2f3 	udiv	r2, r0, r3
 8002a9c:	fb02 0013 	mls	r0, r2, r3, r0
 8002aa0:	b968      	cbnz	r0, 8002abe <HAL_SYSTICK_Callback+0x96>
		  	HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);
*/


     // }
}
 8002aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
              OWTick200();
 8002aa6:	f7ff be35 	b.w	8002714 <OWTick200>
			  gprs.TX = "AT+CFUN=1\r\n";
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_SYSTICK_Callback+0xb0>)
 8002aac:	e7ee      	b.n	8002a8c <HAL_SYSTICK_Callback+0x64>
			  gprs.TX = "AT+CSQ\r\n";
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_SYSTICK_Callback+0xb4>)
 8002ab0:	e7ec      	b.n	8002a8c <HAL_SYSTICK_Callback+0x64>
			  gprs.TX = "AT+CREG=1\r\n";
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_SYSTICK_Callback+0xb8>)
 8002ab4:	e7ea      	b.n	8002a8c <HAL_SYSTICK_Callback+0x64>
			  gprs.TX = "AT+CREG?\r\n";
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_SYSTICK_Callback+0xbc>)
 8002ab8:	e7e8      	b.n	8002a8c <HAL_SYSTICK_Callback+0x64>
			  gprs.TX = "AT+COPS?\r\n";
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_SYSTICK_Callback+0xc0>)
 8002abc:	e7e6      	b.n	8002a8c <HAL_SYSTICK_Callback+0x64>
 8002abe:	bd10      	pop	{r4, pc}
 8002ac0:	200002a8 	.word	0x200002a8
 8002ac4:	08003710 	.word	0x08003710
 8002ac8:	40011000 	.word	0x40011000
 8002acc:	08003713 	.word	0x08003713
 8002ad0:	0800373f 	.word	0x0800373f
 8002ad4:	0800371a 	.word	0x0800371a
 8002ad8:	0800371f 	.word	0x0800371f
 8002adc:	0800372b 	.word	0x0800372b
 8002ae0:	08003734 	.word	0x08003734
 8002ae4:	08003740 	.word	0x08003740
 8002ae8:	0800374b 	.word	0x0800374b

08002aec <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aec:	2301      	movs	r3, #1
{
 8002aee:	b510      	push	{r4, lr}
 8002af0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002af2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002af4:	2310      	movs	r3, #16
 8002af6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002af8:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002afa:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002afc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002afe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b02:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b04:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b06:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002b08:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0a:	f7fe fe95 	bl	8001838 <HAL_RCC_OscConfig>
 8002b0e:	b100      	cbz	r0, 8002b12 <SystemClock_Config+0x26>
 8002b10:	e7fe      	b.n	8002b10 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b12:	230f      	movs	r3, #15
 8002b14:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b1a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b1c:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b1e:	4621      	mov	r1, r4
 8002b20:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b22:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b24:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b26:	f7ff f84f 	bl	8001bc8 <HAL_RCC_ClockConfig>
 8002b2a:	b100      	cbz	r0, 8002b2e <SystemClock_Config+0x42>
 8002b2c:	e7fe      	b.n	8002b2c <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b32:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b34:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002b36:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b38:	f7ff f910 	bl	8001d5c <HAL_RCCEx_PeriphCLKConfig>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	b100      	cbz	r0, 8002b42 <SystemClock_Config+0x56>
 8002b40:	e7fe      	b.n	8002b40 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b42:	f7ff f8e5 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b4e:	f7fe fc9b 	bl	8001488 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b52:	2004      	movs	r0, #4
 8002b54:	f7fe fcae 	bl	80014b4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b58:	4622      	mov	r2, r4
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	f7fe fc52 	bl	8001408 <HAL_NVIC_SetPriority>
}
 8002b64:	b014      	add	sp, #80	; 0x50
 8002b66:	bd10      	pop	{r4, pc}

08002b68 <initADC>:
}

/* USER CODE BEGIN 4 */

void initADC(void){
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8002b68:	2200      	movs	r2, #0
	adcChannel.Rank = 1;
 8002b6a:	2101      	movs	r1, #1
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <initADC+0x14>)



	  //ADC1
	  //HAL_ADC_MspInit(&hadc1);
	  HAL_ADC_Start(&hadc1);
 8002b6e:	4804      	ldr	r0, [pc, #16]	; (8002b80 <initADC+0x18>)
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8002b70:	601a      	str	r2, [r3, #0]
	adcChannel.Rank = 1;
 8002b72:	6059      	str	r1, [r3, #4]
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b74:	609a      	str	r2, [r3, #8]
	  HAL_ADC_Start(&hadc1);
 8002b76:	f7fe baa5 	b.w	80010c4 <HAL_ADC_Start>
 8002b7a:	bf00      	nop
 8002b7c:	200005e0 	.word	0x200005e0
 8002b80:	20000278 	.word	0x20000278

08002b84 <ReadAnalogADC1>:
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
	return HAL_ADC_GetValue(&hadc1);
}
int ReadAnalogADC1( uint32_t ch ){
	adcChannel.Channel = ch;//B
	adcChannel.Rank = 1;
 8002b84:	2301      	movs	r3, #1
	adcChannel.Channel = ch;//B
 8002b86:	490b      	ldr	r1, [pc, #44]	; (8002bb4 <ReadAnalogADC1+0x30>)
int ReadAnalogADC1( uint32_t ch ){
 8002b88:	b510      	push	{r4, lr}
	adcChannel.Rank = 1;
 8002b8a:	604b      	str	r3, [r1, #4]
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b8c:	2300      	movs	r3, #0

	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8002b8e:	4c0a      	ldr	r4, [pc, #40]	; (8002bb8 <ReadAnalogADC1+0x34>)
	adcChannel.Channel = ch;//B
 8002b90:	6008      	str	r0, [r1, #0]
	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8002b92:	4620      	mov	r0, r4
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b94:	608b      	str	r3, [r1, #8]
	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8002b96:	f7fe f9d9 	bl	8000f4c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7fe fa92 	bl	80010c4 <HAL_ADC_Start>
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
 8002ba0:	6822      	ldr	r2, [r4, #0]
 8002ba2:	6813      	ldr	r3, [r2, #0]
 8002ba4:	079b      	lsls	r3, r3, #30
 8002ba6:	d5fc      	bpl.n	8002ba2 <ReadAnalogADC1+0x1e>
	return HAL_ADC_GetValue(&hadc1);
 8002ba8:	4803      	ldr	r0, [pc, #12]	; (8002bb8 <ReadAnalogADC1+0x34>)
}
 8002baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return HAL_ADC_GetValue(&hadc1);
 8002bae:	f7fe b9c9 	b.w	8000f44 <HAL_ADC_GetValue>
 8002bb2:	bf00      	nop
 8002bb4:	200005e0 	.word	0x200005e0
 8002bb8:	20000278 	.word	0x20000278
 8002bbc:	00000000 	.word	0x00000000

08002bc0 <main>:
{
 8002bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc4:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002bc6:	f7fe f987 	bl	8000ed8 <HAL_Init>
  SystemClock_Config();
 8002bca:	f7ff ff8f 	bl	8002aec <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bce:	4b8d      	ldr	r3, [pc, #564]	; (8002e04 <main+0x244>)
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002bd0:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002bd4:	488c      	ldr	r0, [pc, #560]	; (8002e08 <main+0x248>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd6:	f042 0210 	orr.w	r2, r2, #16
 8002bda:	619a      	str	r2, [r3, #24]
 8002bdc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bde:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be0:	f002 0210 	and.w	r2, r2, #16
 8002be4:	9200      	str	r2, [sp, #0]
 8002be6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2402      	movs	r4, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bec:	f042 0204 	orr.w	r2, r2, #4
 8002bf0:	619a      	str	r2, [r3, #24]
 8002bf2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf4:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	f002 0204 	and.w	r2, r2, #4
 8002bfa:	9201      	str	r2, [sp, #4]
 8002bfc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	f042 0208 	orr.w	r2, r2, #8
 8002c04:	619a      	str	r2, [r3, #24]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	f002 0208 	and.w	r2, r2, #8
 8002c0c:	9202      	str	r2, [sp, #8]
 8002c0e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	f042 0220 	orr.w	r2, r2, #32
 8002c16:	619a      	str	r2, [r3, #24]
 8002c18:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002c1a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	9303      	str	r3, [sp, #12]
 8002c22:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002c24:	f7fe fd7e 	bl	8001724 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OT_RXO_GPIO_Port, OT_RXO_Pin, GPIO_PIN_RESET);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c2e:	4877      	ldr	r0, [pc, #476]	; (8002e0c <main+0x24c>)
 8002c30:	f7fe fd78 	bl	8001724 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2104      	movs	r1, #4
 8002c38:	4875      	ldr	r0, [pc, #468]	; (8002e10 <main+0x250>)
 8002c3a:	f7fe fd73 	bl	8001724 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002c3e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002c40:	a906      	add	r1, sp, #24
 8002c42:	4871      	ldr	r0, [pc, #452]	; (8002e08 <main+0x248>)
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002c44:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c48:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002c4a:	f7fe fc8b 	bl	8001564 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OT_RXO_Pin;
 8002c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(OT_RXO_GPIO_Port, &GPIO_InitStruct);
 8002c52:	a906      	add	r1, sp, #24
 8002c54:	486d      	ldr	r0, [pc, #436]	; (8002e0c <main+0x24c>)
  GPIO_InitStruct.Pin = OT_RXO_Pin;
 8002c56:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(OT_RXO_GPIO_Port, &GPIO_InitStruct);
 8002c5c:	f7fe fc82 	bl	8001564 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OT_TXI_Pin;
 8002c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(OT_TXI_GPIO_Port, &GPIO_InitStruct);
 8002c64:	a906      	add	r1, sp, #24
 8002c66:	4869      	ldr	r0, [pc, #420]	; (8002e0c <main+0x24c>)
  GPIO_InitStruct.Pin = OT_TXI_Pin;
 8002c68:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(OT_TXI_GPIO_Port, &GPIO_InitStruct);
 8002c6e:	f7fe fc79 	bl	8001564 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NSS1_Pin;
 8002c72:	2304      	movs	r3, #4
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8002c74:	4866      	ldr	r0, [pc, #408]	; (8002e10 <main+0x250>)
 8002c76:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = NSS1_Pin;
 8002c78:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7c:	9607      	str	r6, [sp, #28]
  hadc1.Instance = ADC1;
 8002c7e:	4c65      	ldr	r4, [pc, #404]	; (8002e14 <main+0x254>)
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8002c80:	f7fe fc70 	bl	8001564 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8002c84:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <main+0x258>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c86:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8002c88:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c8a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c8e:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c90:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c92:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c94:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c96:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002c98:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c9a:	f7fe fa97 	bl	80011cc <HAL_ADC_Init>
 8002c9e:	b100      	cbz	r0, 8002ca2 <main+0xe2>
 8002ca0:	e7fe      	b.n	8002ca0 <main+0xe0>
  sConfig.Channel = ADC_CHANNEL_0;
 8002ca2:	9006      	str	r0, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ca4:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ca6:	a906      	add	r1, sp, #24
 8002ca8:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002caa:	9607      	str	r6, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cac:	f7fe f94e 	bl	8000f4c <HAL_ADC_ConfigChannel>
 8002cb0:	b100      	cbz	r0, 8002cb4 <main+0xf4>
 8002cb2:	e7fe      	b.n	8002cb2 <main+0xf2>
  hcan.Init.Prescaler = 16;
 8002cb4:	2610      	movs	r6, #16
  hcan.Instance = CAN1;
 8002cb6:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <main+0x25c>)
  hcan.Init.Prescaler = 16;
 8002cb8:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <main+0x260>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002cba:	6098      	str	r0, [r3, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 8002cbc:	60d8      	str	r0, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_1TQ;
 8002cbe:	6118      	str	r0, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_1TQ;
 8002cc0:	6158      	str	r0, [r3, #20]
  hcan.Init.TTCM = DISABLE;
 8002cc2:	6198      	str	r0, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 8002cc4:	61d8      	str	r0, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 8002cc6:	6218      	str	r0, [r3, #32]
  hcan.Init.NART = DISABLE;
 8002cc8:	6258      	str	r0, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8002cca:	6298      	str	r0, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8002ccc:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002cce:	4618      	mov	r0, r3
  hcan.Init.Prescaler = 16;
 8002cd0:	e883 0044 	stmia.w	r3, {r2, r6}
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002cd4:	f7fe fafa 	bl	80012cc <HAL_CAN_Init>
 8002cd8:	b100      	cbz	r0, 8002cdc <main+0x11c>
 8002cda:	e7fe      	b.n	8002cda <main+0x11a>
  hi2c1.Instance = I2C1;
 8002cdc:	4b51      	ldr	r3, [pc, #324]	; (8002e24 <main+0x264>)
  hi2c1.Init.ClockSpeed = 100000;
 8002cde:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <main+0x268>)
 8002ce0:	4d52      	ldr	r5, [pc, #328]	; (8002e2c <main+0x26c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ce2:	6098      	str	r0, [r3, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002ce4:	e883 0024 	stmia.w	r3, {r2, r5}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002cec:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cee:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002cf0:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cf2:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cf4:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cf6:	4618      	mov	r0, r3
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cf8:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cfa:	f7fe fd1d 	bl	8001738 <HAL_I2C_Init>
 8002cfe:	b100      	cbz	r0, 8002d02 <main+0x142>
 8002d00:	e7fe      	b.n	8002d00 <main+0x140>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d02:	f44f 7482 	mov.w	r4, #260	; 0x104
  hspi1.Instance = SPI1;
 8002d06:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <main+0x270>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d08:	4a4a      	ldr	r2, [pc, #296]	; (8002e34 <main+0x274>)
  hspi1.Init.CRCPolynomial = 10;
 8002d0a:	250a      	movs	r5, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d0c:	e883 0014 	stmia.w	r3, {r2, r4}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d16:	2228      	movs	r2, #40	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d18:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d1a:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d1c:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d1e:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d20:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d22:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d24:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d26:	4618      	mov	r0, r3
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d28:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 8002d2a:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d2c:	f7ff f900 	bl	8001f30 <HAL_SPI_Init>
 8002d30:	b100      	cbz	r0, 8002d34 <main+0x174>
 8002d32:	e7fe      	b.n	8002d32 <main+0x172>
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d34:	2420      	movs	r4, #32
  hspi2.Instance = SPI2;
 8002d36:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <main+0x278>)
 8002d38:	4a40      	ldr	r2, [pc, #256]	; (8002e3c <main+0x27c>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002d3a:	6058      	str	r0, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d3c:	6098      	str	r0, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d3e:	60d8      	str	r0, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d40:	6118      	str	r0, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d42:	6158      	str	r0, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002d44:	6198      	str	r0, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d46:	6218      	str	r0, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d48:	6258      	str	r0, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d4a:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d4c:	4618      	mov	r0, r3
  hspi2.Instance = SPI2;
 8002d4e:	601a      	str	r2, [r3, #0]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d50:	61dc      	str	r4, [r3, #28]
  hspi2.Init.CRCPolynomial = 10;
 8002d52:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d54:	f7ff f8ec 	bl	8001f30 <HAL_SPI_Init>
 8002d58:	b100      	cbz	r0, 8002d5c <main+0x19c>
 8002d5a:	e7fe      	b.n	8002d5a <main+0x19a>
  huart1.Init.BaudRate = 9600;
 8002d5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d60:	250c      	movs	r5, #12
  huart1.Instance = USART1;
 8002d62:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <main+0x280>)
  huart1.Init.BaudRate = 9600;
 8002d64:	4937      	ldr	r1, [pc, #220]	; (8002e44 <main+0x284>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d66:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d68:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d6a:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6c:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d6e:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d70:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 8002d72:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d76:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d78:	f7ff fb16 	bl	80023a8 <HAL_UART_Init>
 8002d7c:	b100      	cbz	r0, 8002d80 <main+0x1c0>
 8002d7e:	e7fe      	b.n	8002d7e <main+0x1be>
  huart2.Init.BaudRate = 115200;
 8002d80:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart2.Instance = USART2;
 8002d84:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <main+0x288>)
  huart2.Init.BaudRate = 115200;
 8002d86:	4a31      	ldr	r2, [pc, #196]	; (8002e4c <main+0x28c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d88:	6098      	str	r0, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d8a:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d8c:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8e:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d90:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d92:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8002d94:	e883 0044 	stmia.w	r3, {r2, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d98:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d9a:	f7ff fb05 	bl	80023a8 <HAL_UART_Init>
 8002d9e:	b100      	cbz	r0, 8002da2 <main+0x1e2>
 8002da0:	e7fe      	b.n	8002da0 <main+0x1e0>
  huart3.Instance = USART3;
 8002da2:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <main+0x290>)
 8002da4:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <main+0x294>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002da6:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002da8:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002daa:	6118      	str	r0, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dac:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dae:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002db0:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 8002db2:	e883 0044 	stmia.w	r3, {r2, r6}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002db6:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002db8:	f7ff faf6 	bl	80023a8 <HAL_UART_Init>
 8002dbc:	b100      	cbz	r0, 8002dc0 <main+0x200>
 8002dbe:	e7fe      	b.n	8002dbe <main+0x1fe>
  htim4.Instance = TIM4;
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <main+0x298>)
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <main+0x29c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc4:	6098      	str	r0, [r3, #8]
  htim4.Init.Prescaler = 32;
 8002dc6:	e883 0014 	stmia.w	r3, {r2, r4}
  htim4.Init.Period = 65000;
 8002dca:	f64f 52e8 	movw	r2, #65000	; 0xfde8
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dce:	6118      	str	r0, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd0:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dd2:	4618      	mov	r0, r3
  htim4.Init.Period = 65000;
 8002dd4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dd6:	f7ff f9d7 	bl	8002188 <HAL_TIM_Base_Init>
 8002dda:	b100      	cbz	r0, 8002dde <main+0x21e>
 8002ddc:	e7fe      	b.n	8002ddc <main+0x21c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002de2:	a906      	add	r1, sp, #24
 8002de4:	481c      	ldr	r0, [pc, #112]	; (8002e58 <main+0x298>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de6:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002de8:	f7ff f8dd 	bl	8001fa6 <HAL_TIM_ConfigClockSource>
 8002dec:	b100      	cbz	r0, 8002df0 <main+0x230>
 8002dee:	e7fe      	b.n	8002dee <main+0x22e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df0:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df2:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002df4:	a904      	add	r1, sp, #16
 8002df6:	4818      	ldr	r0, [pc, #96]	; (8002e58 <main+0x298>)
 8002df8:	f7ff f9e0 	bl	80021bc <HAL_TIMEx_MasterConfigSynchronization>
 8002dfc:	4605      	mov	r5, r0
 8002dfe:	b378      	cbz	r0, 8002e60 <main+0x2a0>
 8002e00:	e7fe      	b.n	8002e00 <main+0x240>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	40010800 	.word	0x40010800
 8002e10:	40011400 	.word	0x40011400
 8002e14:	20000278 	.word	0x20000278
 8002e18:	40012400 	.word	0x40012400
 8002e1c:	2000020c 	.word	0x2000020c
 8002e20:	40006400 	.word	0x40006400
 8002e24:	200001b8 	.word	0x200001b8
 8002e28:	40005400 	.word	0x40005400
 8002e2c:	000186a0 	.word	0x000186a0
 8002e30:	200004e0 	.word	0x200004e0
 8002e34:	40013000 	.word	0x40013000
 8002e38:	200000c4 	.word	0x200000c4
 8002e3c:	40003800 	.word	0x40003800
 8002e40:	20000404 	.word	0x20000404
 8002e44:	40013800 	.word	0x40013800
 8002e48:	200005a0 	.word	0x200005a0
 8002e4c:	40004400 	.word	0x40004400
 8002e50:	20000178 	.word	0x20000178
 8002e54:	40004800 	.word	0x40004800
 8002e58:	20000120 	.word	0x20000120
 8002e5c:	40000800 	.word	0x40000800
  HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,4);
 8002e60:	4c55      	ldr	r4, [pc, #340]	; (8002fb8 <main+0x3f8>)
  micros=0;
 8002e62:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <main+0x3fc>)
  HAL_UART_Receive_IT(&huart1,gprs.rx_buff,2);
 8002e64:	4e56      	ldr	r6, [pc, #344]	; (8002fc0 <main+0x400>)
  micros=0;
 8002e66:	6018      	str	r0, [r3, #0]
  initADC();
 8002e68:	f7ff fe7e 	bl	8002b68 <initADC>
  HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,4);
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	2204      	movs	r2, #4
 8002e70:	4854      	ldr	r0, [pc, #336]	; (8002fc4 <main+0x404>)
 8002e72:	f7ff fb23 	bl	80024bc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1,gprs.rx_buff,2);
 8002e76:	2202      	movs	r2, #2
 8002e78:	4631      	mov	r1, r6
 8002e7a:	4853      	ldr	r0, [pc, #332]	; (8002fc8 <main+0x408>)
  RPi_UART.transmitRequered = false;
 8002e7c:	f804 5c05 	strb.w	r5, [r4, #-5]
  HAL_UART_Receive_IT(&huart1,gprs.rx_buff,2);
 8002e80:	f7ff fb1c 	bl	80024bc <HAL_UART_Receive_IT>
  gprs.RX = "";
 8002e84:	4b51      	ldr	r3, [pc, #324]	; (8002fcc <main+0x40c>)
 8002e86:	f1a6 0408 	sub.w	r4, r6, #8
 8002e8a:	6563      	str	r3, [r4, #84]	; 0x54
  gprs.transmitRequered = false;
 8002e8c:	f806 5c08 	strb.w	r5, [r6, #-8]
  gprs.waitForResponse = false;
 8002e90:	7065      	strb	r5, [r4, #1]
  OWInit();
 8002e92:	f7ff fc35 	bl	8002700 <OWInit>
  activateBoiler();
 8002e96:	f7ff fc29 	bl	80026ec <activateBoiler>
  uint32_t counter2 = *(__IO uint32_t *)0x08010004;
 8002e9a:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <main+0x410>)
  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002e9c:	2140      	movs	r1, #64	; 0x40
 8002e9e:	484d      	ldr	r0, [pc, #308]	; (8002fd4 <main+0x414>)
  uint32_t counter2 = *(__IO uint32_t *)0x08010004;
 8002ea0:	681b      	ldr	r3, [r3, #0]
  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002ea2:	f7fe fc44 	bl	800172e <HAL_GPIO_TogglePin>
  gprs.TX = "AT\r\n";
 8002ea6:	4b4c      	ldr	r3, [pc, #304]	; (8002fd8 <main+0x418>)
  gprs.index=0;
 8002ea8:	f884 5158 	strb.w	r5, [r4, #344]	; 0x158
  gprs.TX = "AT\r\n";
 8002eac:	6063      	str	r3, [r4, #4]
  gprs.transmitRequered = true;
 8002eae:	2301      	movs	r3, #1
  gprs.readIndex=0;
 8002eb0:	f884 5159 	strb.w	r5, [r4, #345]	; 0x159
  gprs.transmitRequered = true;
 8002eb4:	f806 3c08 	strb.w	r3, [r6, #-8]
  gprs.waitForResponse = true;
 8002eb8:	7063      	strb	r3, [r4, #1]
          OWRoute();
 8002eba:	f7ff fcd3 	bl	8002864 <OWRoute>
	  if(gprs.transmitRequered){
 8002ebe:	7823      	ldrb	r3, [r4, #0]
 8002ec0:	b193      	cbz	r3, 8002ee8 <main+0x328>
		  HAL_Delay(1000);
 8002ec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec6:	f7fe f82b 	bl	8000f20 <HAL_Delay>
		  HAL_UART_Transmit(&huart1,gprs.TX,strlen(gprs.TX),5000);
 8002eca:	6865      	ldr	r5, [r4, #4]
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f7fd f93f 	bl	8000150 <strlen>
 8002ed2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ed6:	b282      	uxth	r2, r0
 8002ed8:	4629      	mov	r1, r5
 8002eda:	483b      	ldr	r0, [pc, #236]	; (8002fc8 <main+0x408>)
 8002edc:	f7ff fa92 	bl	8002404 <HAL_UART_Transmit>
		  gprs.transmitRequered = false;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	7023      	strb	r3, [r4, #0]
		  gprs.waitForResponse = true;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	7063      	strb	r3, [r4, #1]
	  RPi_SPI.tx_buff[2] = temp.raw;
 8002ee8:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <main+0x41c>)
 8002eea:	4f3d      	ldr	r7, [pc, #244]	; (8002fe0 <main+0x420>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
	  adc.in[ V4_SENSE ] = ReadAnalogADC1( V4_SENSE );
 8002eee:	2004      	movs	r0, #4
	  RPi_SPI.tx_buff[2] = temp.raw;
 8002ef0:	73fb      	strb	r3, [r7, #15]
	  adc.in[ V4_SENSE ] = ReadAnalogADC1( V4_SENSE );
 8002ef2:	f7ff fe47 	bl	8002b84 <ReadAnalogADC1>
 8002ef6:	4d3b      	ldr	r5, [pc, #236]	; (8002fe4 <main+0x424>)
 8002ef8:	6168      	str	r0, [r5, #20]
	  adc.in[ RPI_3V3_SENSE ] = ReadAnalogADC1( RPI_3V3_SENSE );
 8002efa:	2005      	movs	r0, #5
 8002efc:	f7ff fe42 	bl	8002b84 <ReadAnalogADC1>
 8002f00:	61a8      	str	r0, [r5, #24]
	  adc.in[ USB_5V_SENSE ] = ReadAnalogADC1( USB_5V_SENSE );
 8002f02:	2006      	movs	r0, #6
 8002f04:	f7ff fe3e 	bl	8002b84 <ReadAnalogADC1>
 8002f08:	61e8      	str	r0, [r5, #28]
	  adc.in[ VIN_SENSE ] = ReadAnalogADC1( VIN_SENSE );
 8002f0a:	2007      	movs	r0, #7
 8002f0c:	f7ff fe3a 	bl	8002b84 <ReadAnalogADC1>
 8002f10:	6228      	str	r0, [r5, #32]
	  adc.in[ A14 ] = ReadAnalogADC1( A14 );
 8002f12:	200e      	movs	r0, #14
 8002f14:	f7ff fe36 	bl	8002b84 <ReadAnalogADC1>
 8002f18:	63e8      	str	r0, [r5, #60]	; 0x3c
	  adc.in[ A15 ] = ReadAnalogADC1( A15 );
 8002f1a:	200f      	movs	r0, #15
 8002f1c:	f7ff fe32 	bl	8002b84 <ReadAnalogADC1>
 8002f20:	462e      	mov	r6, r5
 8002f22:	f105 0b80 	add.w	fp, r5, #128	; 0x80
 8002f26:	f846 0f40 	str.w	r0, [r6, #64]!
		  adc.v[i] = ( adc.v[i] + adc.in[i]*(3.3/4095.0)*(3.9+2.2)/3.9 )/2.0;
 8002f2a:	f856 0c3c 	ldr.w	r0, [r6, #-60]
 8002f2e:	f7fd fa69 	bl	8000404 <__aeabi_i2d>
 8002f32:	a31b      	add	r3, pc, #108	; (adr r3, 8002fa0 <main+0x3e0>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd faca 	bl	80004d0 <__aeabi_dmul>
 8002f3c:	a31a      	add	r3, pc, #104	; (adr r3, 8002fa8 <main+0x3e8>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd fac5 	bl	80004d0 <__aeabi_dmul>
 8002f46:	a31a      	add	r3, pc, #104	; (adr r3, 8002fb0 <main+0x3f0>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f7fd fbea 	bl	8000724 <__aeabi_ddiv>
 8002f50:	4680      	mov	r8, r0
 8002f52:	6870      	ldr	r0, [r6, #4]
 8002f54:	4689      	mov	r9, r1
 8002f56:	f7fd fa67 	bl	8000428 <__aeabi_f2d>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4640      	mov	r0, r8
 8002f60:	4649      	mov	r1, r9
 8002f62:	f7fd f903 	bl	800016c <__adddf3>
 8002f66:	2200      	movs	r2, #0
 8002f68:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <main+0x428>)
 8002f6a:	f7fd fab1 	bl	80004d0 <__aeabi_dmul>
 8002f6e:	f7fd fcc1 	bl	80008f4 <__aeabi_d2f>
 8002f72:	f846 0f04 	str.w	r0, [r6, #4]!
	  for(i=0;i<16;i++)
 8002f76:	45b3      	cmp	fp, r6
 8002f78:	d1d7      	bne.n	8002f2a <main+0x36a>
	  RPi_SPI.tx_buff[0] = (uint8_t)(adc.rpi_3v3>>8);
 8002f7a:	682b      	ldr	r3, [r5, #0]
	  if(RPi_UART.transmitRequered){
 8002f7c:	4d1b      	ldr	r5, [pc, #108]	; (8002fec <main+0x42c>)
	  RPi_SPI.tx_buff[0] = (uint8_t)(adc.rpi_3v3>>8);
 8002f7e:	121a      	asrs	r2, r3, #8
	  RPi_SPI.tx_buff[1] = (uint8_t)adc.rpi_3v3;
 8002f80:	73bb      	strb	r3, [r7, #14]
	  if(RPi_UART.transmitRequered){
 8002f82:	782b      	ldrb	r3, [r5, #0]
	  RPi_SPI.tx_buff[0] = (uint8_t)(adc.rpi_3v3>>8);
 8002f84:	737a      	strb	r2, [r7, #13]
	  if(RPi_UART.transmitRequered){
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d097      	beq.n	8002eba <main+0x2fa>
		  HAL_UART_Transmit(&huart3,RPi_UART.tx_buff,4,1000);
 8002f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f8e:	2204      	movs	r2, #4
 8002f90:	f105 010f 	add.w	r1, r5, #15
 8002f94:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <main+0x404>)
 8002f96:	f7ff fa35 	bl	8002404 <HAL_UART_Transmit>
		  RPi_UART.transmitRequered = false;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	702b      	strb	r3, [r5, #0]
 8002f9e:	e78c      	b.n	8002eba <main+0x2fa>
 8002fa0:	e734d9b4 	.word	0xe734d9b4
 8002fa4:	3f4a680c 	.word	0x3f4a680c
 8002fa8:	66666666 	.word	0x66666666
 8002fac:	40186666 	.word	0x40186666
 8002fb0:	33333333 	.word	0x33333333
 8002fb4:	400f3333 	.word	0x400f3333
 8002fb8:	20000261 	.word	0x20000261
 8002fbc:	200004c8 	.word	0x200004c8
 8002fc0:	200002b0 	.word	0x200002b0
 8002fc4:	20000178 	.word	0x20000178
 8002fc8:	20000404 	.word	0x20000404
 8002fcc:	0800373f 	.word	0x0800373f
 8002fd0:	08010004 	.word	0x08010004
 8002fd4:	40011000 	.word	0x40011000
 8002fd8:	0800371a 	.word	0x0800371a
 8002fdc:	20000250 	.word	0x20000250
 8002fe0:	20000160 	.word	0x20000160
 8002fe4:	20000444 	.word	0x20000444
 8002fe8:	3fe00000 	.word	0x3fe00000
 8002fec:	2000025c 	.word	0x2000025c

08002ff0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_MspInit+0x84>)
{
 8002ff2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ff4:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff6:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	619a      	str	r2, [r3, #24]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003008:	f7fe f9ec 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800300c:	2200      	movs	r2, #0
 800300e:	f06f 000b 	mvn.w	r0, #11
 8003012:	4611      	mov	r1, r2
 8003014:	f7fe f9f8 	bl	8001408 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	f06f 000a 	mvn.w	r0, #10
 800301e:	4611      	mov	r1, r2
 8003020:	f7fe f9f2 	bl	8001408 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	f06f 0009 	mvn.w	r0, #9
 800302a:	4611      	mov	r1, r2
 800302c:	f7fe f9ec 	bl	8001408 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003030:	2200      	movs	r2, #0
 8003032:	f06f 0004 	mvn.w	r0, #4
 8003036:	4611      	mov	r1, r2
 8003038:	f7fe f9e6 	bl	8001408 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	f06f 0003 	mvn.w	r0, #3
 8003042:	4611      	mov	r1, r2
 8003044:	f7fe f9e0 	bl	8001408 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	f06f 0001 	mvn.w	r0, #1
 800304e:	4611      	mov	r1, r2
 8003050:	f7fe f9da 	bl	8001408 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	f04f 30ff 	mov.w	r0, #4294967295
 800305a:	4611      	mov	r1, r2
 800305c:	f7fe f9d4 	bl	8001408 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003060:	4a05      	ldr	r2, [pc, #20]	; (8003078 <HAL_MspInit+0x88>)
 8003062:	6853      	ldr	r3, [r2, #4]
 8003064:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800306c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800306e:	b003      	add	sp, #12
 8003070:	f85d fb04 	ldr.w	pc, [sp], #4
 8003074:	40021000 	.word	0x40021000
 8003078:	40010000 	.word	0x40010000

0800307c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800307c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800307e:	6802      	ldr	r2, [r0, #0]
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_ADC_MspInit+0x50>)
{
 8003082:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8003084:	429a      	cmp	r2, r3
 8003086:	d11f      	bne.n	80030c8 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003088:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800308c:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800308e:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003094:	619a      	str	r2, [r3, #24]
 8003096:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003098:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800309a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80030a2:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a4:	480a      	ldr	r0, [pc, #40]	; (80030d0 <HAL_ADC_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80030a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030a8:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030aa:	f7fe fa5b 	bl	8001564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80030ae:	23f3      	movs	r3, #243	; 0xf3
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b0:	a902      	add	r1, sp, #8
 80030b2:	4808      	ldr	r0, [pc, #32]	; (80030d4 <HAL_ADC_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80030b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030b6:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b8:	f7fe fa54 	bl	8001564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030bc:	a902      	add	r1, sp, #8
 80030be:	4806      	ldr	r0, [pc, #24]	; (80030d8 <HAL_ADC_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030c0:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c4:	f7fe fa4e 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030c8:	b006      	add	sp, #24
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	40012400 	.word	0x40012400
 80030d0:	40011000 	.word	0x40011000
 80030d4:	40010800 	.word	0x40010800
 80030d8:	40010c00 	.word	0x40010c00

080030dc <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80030dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 80030de:	6802      	ldr	r2, [r0, #0]
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_CAN_MspInit+0x64>)
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d128      	bne.n	8003138 <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80030e6:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80030ea:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ec:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80030ee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80030f2:	61da      	str	r2, [r3, #28]
 80030f4:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f6:	4813      	ldr	r0, [pc, #76]	; (8003144 <HAL_CAN_MspInit+0x68>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003104:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003106:	2300      	movs	r3, #0
 8003108:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	f7fe fa2a 	bl	8001564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003114:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800311a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311c:	a902      	add	r1, sp, #8
 800311e:	4809      	ldr	r0, [pc, #36]	; (8003144 <HAL_CAN_MspInit+0x68>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003120:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003122:	f7fe fa1f 	bl	8001564 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003126:	4a08      	ldr	r2, [pc, #32]	; (8003148 <HAL_CAN_MspInit+0x6c>)
 8003128:	6853      	ldr	r3, [r2, #4]
 800312a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800312e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003136:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003138:	b007      	add	sp, #28
 800313a:	f85d fb04 	ldr.w	pc, [sp], #4
 800313e:	bf00      	nop
 8003140:	40006400 	.word	0x40006400
 8003144:	40010c00 	.word	0x40010c00
 8003148:	40010000 	.word	0x40010000

0800314c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800314c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800314e:	6802      	ldr	r2, [r0, #0]
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <HAL_I2C_MspInit+0x38>)
 8003152:	429a      	cmp	r2, r3
 8003154:	d113      	bne.n	800317e <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003156:	23c0      	movs	r3, #192	; 0xc0
 8003158:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800315a:	2312      	movs	r3, #18
 800315c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800315e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003160:	a902      	add	r1, sp, #8
 8003162:	4809      	ldr	r0, [pc, #36]	; (8003188 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003164:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003166:	f7fe f9fd 	bl	8001564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_I2C_MspInit+0x40>)
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003172:	61da      	str	r2, [r3, #28]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800317e:	b007      	add	sp, #28
 8003180:	f85d fb04 	ldr.w	pc, [sp], #4
 8003184:	40005400 	.word	0x40005400
 8003188:	40010c00 	.word	0x40010c00
 800318c:	40021000 	.word	0x40021000

08003190 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003190:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003192:	6803      	ldr	r3, [r0, #0]
 8003194:	4a2d      	ldr	r2, [pc, #180]	; (800324c <HAL_SPI_MspInit+0xbc>)
{
 8003196:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8003198:	4293      	cmp	r3, r2
 800319a:	d12d      	bne.n	80031f8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800319c:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <HAL_SPI_MspInit+0xc0>)
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319e:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031a0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a2:	482c      	ldr	r0, [pc, #176]	; (8003254 <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a8:	619a      	str	r2, [r3, #24]
 80031aa:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ac:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80031b6:	2328      	movs	r3, #40	; 0x28
 80031b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031be:	2303      	movs	r3, #3
 80031c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c2:	f7fe f9cf 	bl	8001564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031c6:	2310      	movs	r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c8:	a902      	add	r1, sp, #8
 80031ca:	4822      	ldr	r0, [pc, #136]	; (8003254 <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ce:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d2:	f7fe f9c7 	bl	8001564 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80031d6:	4a20      	ldr	r2, [pc, #128]	; (8003258 <HAL_SPI_MspInit+0xc8>)

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80031d8:	2023      	movs	r0, #35	; 0x23
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80031da:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80031dc:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80031de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80031e8:	4622      	mov	r2, r4
 80031ea:	f7fe f90d 	bl	8001408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80031ee:	2023      	movs	r0, #35	; 0x23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031f0:	f7fe f93e 	bl	8001470 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80031f4:	b006      	add	sp, #24
 80031f6:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 80031f8:	4a18      	ldr	r2, [pc, #96]	; (800325c <HAL_SPI_MspInit+0xcc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d1fa      	bne.n	80031f4 <HAL_SPI_MspInit+0x64>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003200:	2400      	movs	r4, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003202:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003204:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320a:	61da      	str	r2, [r3, #28]
 800320c:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320e:	4811      	ldr	r0, [pc, #68]	; (8003254 <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003218:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800321c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800321e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003222:	f7fe f99f 	bl	8001564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800322a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	2302      	movs	r3, #2
 800322e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003230:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003232:	a902      	add	r1, sp, #8
 8003234:	4807      	ldr	r0, [pc, #28]	; (8003254 <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003236:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003238:	f7fe f994 	bl	8001564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800323c:	2024      	movs	r0, #36	; 0x24
 800323e:	4622      	mov	r2, r4
 8003240:	4621      	mov	r1, r4
 8003242:	f7fe f8e1 	bl	8001408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003246:	2024      	movs	r0, #36	; 0x24
 8003248:	e7d2      	b.n	80031f0 <HAL_SPI_MspInit+0x60>
 800324a:	bf00      	nop
 800324c:	40013000 	.word	0x40013000
 8003250:	40021000 	.word	0x40021000
 8003254:	40010c00 	.word	0x40010c00
 8003258:	40010000 	.word	0x40010000
 800325c:	40003800 	.word	0x40003800

08003260 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM4)
 8003260:	6802      	ldr	r2, [r0, #0]
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_TIM_Base_MspInit+0x24>)
{
 8003264:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 8003266:	429a      	cmp	r2, r3
 8003268:	d10a      	bne.n	8003280 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800326a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	f042 0204 	orr.w	r2, r2, #4
 8003274:	61da      	str	r2, [r3, #28]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003280:	b002      	add	sp, #8
 8003282:	4770      	bx	lr
 8003284:	40000800 	.word	0x40000800

08003288 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003288:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800328a:	6803      	ldr	r3, [r0, #0]
 800328c:	4a3b      	ldr	r2, [pc, #236]	; (800337c <HAL_UART_MspInit+0xf4>)
{
 800328e:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8003290:	4293      	cmp	r3, r2
 8003292:	d127      	bne.n	80032e4 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_UART_MspInit+0xf8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003296:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8003298:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329a:	483a      	ldr	r0, [pc, #232]	; (8003384 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800329c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a0:	619a      	str	r2, [r3, #24]
 80032a2:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032a4:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b8:	2303      	movs	r3, #3
 80032ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032bc:	f7fe f952 	bl	8001564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c4:	a904      	add	r1, sp, #16
 80032c6:	482f      	ldr	r0, [pc, #188]	; (8003384 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ca:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	f7fe f949 	bl	8001564 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032d2:	2025      	movs	r0, #37	; 0x25
 80032d4:	4622      	mov	r2, r4
 80032d6:	4621      	mov	r1, r4
 80032d8:	f7fe f896 	bl	8001408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032dc:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032de:	f7fe f8c7 	bl	8001470 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032e2:	e01f      	b.n	8003324 <HAL_UART_MspInit+0x9c>
  else if(huart->Instance==USART2)
 80032e4:	4a28      	ldr	r2, [pc, #160]	; (8003388 <HAL_UART_MspInit+0x100>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d11e      	bne.n	8003328 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <HAL_UART_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ec:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 80032ee:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f0:	4824      	ldr	r0, [pc, #144]	; (8003384 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80032f6:	61da      	str	r2, [r3, #28]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003302:	2304      	movs	r3, #4
 8003304:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003306:	2302      	movs	r3, #2
 8003308:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f7fe f929 	bl	8001564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003312:	2308      	movs	r3, #8
 8003314:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003316:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	a904      	add	r1, sp, #16
 800331a:	481a      	ldr	r0, [pc, #104]	; (8003384 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800331c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003320:	f7fe f920 	bl	8001564 <HAL_GPIO_Init>
}
 8003324:	b008      	add	sp, #32
 8003326:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_UART_MspInit+0x104>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d1fa      	bne.n	8003324 <HAL_UART_MspInit+0x9c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_UART_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003330:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003332:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003334:	4816      	ldr	r0, [pc, #88]	; (8003390 <HAL_UART_MspInit+0x108>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003336:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800333a:	61da      	str	r2, [r3, #28]
 800333c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800333e:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8003340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003344:	9303      	str	r3, [sp, #12]
 8003346:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003352:	2303      	movs	r3, #3
 8003354:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003356:	f7fe f905 	bl	8001564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800335a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335e:	a904      	add	r1, sp, #16
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003362:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003364:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003368:	f7fe f8fc 	bl	8001564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800336c:	2027      	movs	r0, #39	; 0x27
 800336e:	4622      	mov	r2, r4
 8003370:	4621      	mov	r1, r4
 8003372:	f7fe f849 	bl	8001408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003376:	2027      	movs	r0, #39	; 0x27
 8003378:	e7b1      	b.n	80032de <HAL_UART_MspInit+0x56>
 800337a:	bf00      	nop
 800337c:	40013800 	.word	0x40013800
 8003380:	40021000 	.word	0x40021000
 8003384:	40010800 	.word	0x40010800
 8003388:	40004400 	.word	0x40004400
 800338c:	40004800 	.word	0x40004800
 8003390:	40010c00 	.word	0x40010c00

08003394 <NMI_Handler>:
 8003394:	4770      	bx	lr

08003396 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003396:	e7fe      	b.n	8003396 <HardFault_Handler>

08003398 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003398:	e7fe      	b.n	8003398 <MemManage_Handler>

0800339a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800339a:	e7fe      	b.n	800339a <BusFault_Handler>

0800339c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800339c:	e7fe      	b.n	800339c <UsageFault_Handler>

0800339e <SVC_Handler>:
 800339e:	4770      	bx	lr

080033a0 <DebugMon_Handler>:
 80033a0:	4770      	bx	lr

080033a2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80033a2:	4770      	bx	lr

080033a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80033a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a6:	f7fd fda9 	bl	8000efc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80033ae:	f7fe b88d 	b.w	80014cc <HAL_SYSTICK_IRQHandler>
	...

080033b4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <SPI1_IRQHandler+0x8>)
 80033b6:	f7fe bd4b 	b.w	8001e50 <HAL_SPI_IRQHandler>
 80033ba:	bf00      	nop
 80033bc:	200004e0 	.word	0x200004e0

080033c0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <SPI2_IRQHandler+0x8>)
 80033c2:	f7fe bd45 	b.w	8001e50 <HAL_SPI_IRQHandler>
 80033c6:	bf00      	nop
 80033c8:	200000c4 	.word	0x200000c4

080033cc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <USART1_IRQHandler+0x8>)
 80033ce:	f7ff b8dd 	b.w	800258c <HAL_UART_IRQHandler>
 80033d2:	bf00      	nop
 80033d4:	20000404 	.word	0x20000404

080033d8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80033d8:	4801      	ldr	r0, [pc, #4]	; (80033e0 <USART3_IRQHandler+0x8>)
 80033da:	f7ff b8d7 	b.w	800258c <HAL_UART_IRQHandler>
 80033de:	bf00      	nop
 80033e0:	20000178 	.word	0x20000178

080033e4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <SystemInit+0x40>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <SystemInit+0x44>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80033fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003400:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003408:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003410:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003412:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003416:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003418:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <SystemInit+0x48>)
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	f8ff0000 	.word	0xf8ff0000
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003430:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003432:	e003      	b.n	800343c <LoopCopyDataInit>

08003434 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003436:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003438:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800343a:	3104      	adds	r1, #4

0800343c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800343c:	480a      	ldr	r0, [pc, #40]	; (8003468 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003440:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003442:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003444:	d3f6      	bcc.n	8003434 <CopyDataInit>
  ldr r2, =_sbss
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003448:	e002      	b.n	8003450 <LoopFillZerobss>

0800344a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800344c:	f842 3b04 	str.w	r3, [r2], #4

08003450 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003452:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003454:	d3f9      	bcc.n	800344a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003456:	f7ff ffc5 	bl	80033e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800345a:	f000 f80f 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800345e:	f7ff fbaf 	bl	8002bc0 <main>
  bx lr
 8003462:	4770      	bx	lr
  ldr r3, =_sidata
 8003464:	080037a8 	.word	0x080037a8
  ldr r0, =_sdata
 8003468:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800346c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003470:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003474:	20000604 	.word	0x20000604

08003478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003478:	e7fe      	b.n	8003478 <ADC1_2_IRQHandler>
	...

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	2500      	movs	r5, #0
 8003480:	4e0c      	ldr	r6, [pc, #48]	; (80034b4 <__libc_init_array+0x38>)
 8003482:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003484:	1ba4      	subs	r4, r4, r6
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	42a5      	cmp	r5, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	f000 f92c 	bl	80036e8 <_init>
 8003490:	2500      	movs	r5, #0
 8003492:	4e0a      	ldr	r6, [pc, #40]	; (80034bc <__libc_init_array+0x40>)
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <__libc_init_array+0x44>)
 8003496:	1ba4      	subs	r4, r4, r6
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	42a5      	cmp	r5, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a4:	4798      	blx	r3
 80034a6:	3501      	adds	r5, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ae:	4798      	blx	r3
 80034b0:	3501      	adds	r5, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	080037a0 	.word	0x080037a0
 80034b8:	080037a0 	.word	0x080037a0
 80034bc:	080037a0 	.word	0x080037a0
 80034c0:	080037a4 	.word	0x080037a4

080034c4 <malloc>:
 80034c4:	4b02      	ldr	r3, [pc, #8]	; (80034d0 <malloc+0xc>)
 80034c6:	4601      	mov	r1, r0
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	f000 b857 	b.w	800357c <_malloc_r>
 80034ce:	bf00      	nop
 80034d0:	2000000c 	.word	0x2000000c

080034d4 <free>:
 80034d4:	4b02      	ldr	r3, [pc, #8]	; (80034e0 <free+0xc>)
 80034d6:	4601      	mov	r1, r0
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	f000 b803 	b.w	80034e4 <_free_r>
 80034de:	bf00      	nop
 80034e0:	2000000c 	.word	0x2000000c

080034e4 <_free_r>:
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	4605      	mov	r5, r0
 80034e8:	2900      	cmp	r1, #0
 80034ea:	d043      	beq.n	8003574 <_free_r+0x90>
 80034ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034f0:	1f0c      	subs	r4, r1, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bfb8      	it	lt
 80034f6:	18e4      	addlt	r4, r4, r3
 80034f8:	f000 f8e6 	bl	80036c8 <__malloc_lock>
 80034fc:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <_free_r+0x94>)
 80034fe:	6813      	ldr	r3, [r2, #0]
 8003500:	4610      	mov	r0, r2
 8003502:	b933      	cbnz	r3, 8003512 <_free_r+0x2e>
 8003504:	6063      	str	r3, [r4, #4]
 8003506:	6014      	str	r4, [r2, #0]
 8003508:	4628      	mov	r0, r5
 800350a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800350e:	f000 b8dc 	b.w	80036ca <__malloc_unlock>
 8003512:	42a3      	cmp	r3, r4
 8003514:	d90b      	bls.n	800352e <_free_r+0x4a>
 8003516:	6821      	ldr	r1, [r4, #0]
 8003518:	1862      	adds	r2, r4, r1
 800351a:	4293      	cmp	r3, r2
 800351c:	bf01      	itttt	eq
 800351e:	681a      	ldreq	r2, [r3, #0]
 8003520:	685b      	ldreq	r3, [r3, #4]
 8003522:	1852      	addeq	r2, r2, r1
 8003524:	6022      	streq	r2, [r4, #0]
 8003526:	6063      	str	r3, [r4, #4]
 8003528:	6004      	str	r4, [r0, #0]
 800352a:	e7ed      	b.n	8003508 <_free_r+0x24>
 800352c:	4613      	mov	r3, r2
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	b10a      	cbz	r2, 8003536 <_free_r+0x52>
 8003532:	42a2      	cmp	r2, r4
 8003534:	d9fa      	bls.n	800352c <_free_r+0x48>
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	1858      	adds	r0, r3, r1
 800353a:	42a0      	cmp	r0, r4
 800353c:	d10b      	bne.n	8003556 <_free_r+0x72>
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	4401      	add	r1, r0
 8003542:	1858      	adds	r0, r3, r1
 8003544:	4282      	cmp	r2, r0
 8003546:	6019      	str	r1, [r3, #0]
 8003548:	d1de      	bne.n	8003508 <_free_r+0x24>
 800354a:	6810      	ldr	r0, [r2, #0]
 800354c:	6852      	ldr	r2, [r2, #4]
 800354e:	4401      	add	r1, r0
 8003550:	6019      	str	r1, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	e7d8      	b.n	8003508 <_free_r+0x24>
 8003556:	d902      	bls.n	800355e <_free_r+0x7a>
 8003558:	230c      	movs	r3, #12
 800355a:	602b      	str	r3, [r5, #0]
 800355c:	e7d4      	b.n	8003508 <_free_r+0x24>
 800355e:	6820      	ldr	r0, [r4, #0]
 8003560:	1821      	adds	r1, r4, r0
 8003562:	428a      	cmp	r2, r1
 8003564:	bf01      	itttt	eq
 8003566:	6811      	ldreq	r1, [r2, #0]
 8003568:	6852      	ldreq	r2, [r2, #4]
 800356a:	1809      	addeq	r1, r1, r0
 800356c:	6021      	streq	r1, [r4, #0]
 800356e:	6062      	str	r2, [r4, #4]
 8003570:	605c      	str	r4, [r3, #4]
 8003572:	e7c9      	b.n	8003508 <_free_r+0x24>
 8003574:	bd38      	pop	{r3, r4, r5, pc}
 8003576:	bf00      	nop
 8003578:	20000090 	.word	0x20000090

0800357c <_malloc_r>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	1ccd      	adds	r5, r1, #3
 8003580:	f025 0503 	bic.w	r5, r5, #3
 8003584:	3508      	adds	r5, #8
 8003586:	2d0c      	cmp	r5, #12
 8003588:	bf38      	it	cc
 800358a:	250c      	movcc	r5, #12
 800358c:	2d00      	cmp	r5, #0
 800358e:	4606      	mov	r6, r0
 8003590:	db01      	blt.n	8003596 <_malloc_r+0x1a>
 8003592:	42a9      	cmp	r1, r5
 8003594:	d903      	bls.n	800359e <_malloc_r+0x22>
 8003596:	230c      	movs	r3, #12
 8003598:	6033      	str	r3, [r6, #0]
 800359a:	2000      	movs	r0, #0
 800359c:	bd70      	pop	{r4, r5, r6, pc}
 800359e:	f000 f893 	bl	80036c8 <__malloc_lock>
 80035a2:	4a23      	ldr	r2, [pc, #140]	; (8003630 <_malloc_r+0xb4>)
 80035a4:	6814      	ldr	r4, [r2, #0]
 80035a6:	4621      	mov	r1, r4
 80035a8:	b991      	cbnz	r1, 80035d0 <_malloc_r+0x54>
 80035aa:	4c22      	ldr	r4, [pc, #136]	; (8003634 <_malloc_r+0xb8>)
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	b91b      	cbnz	r3, 80035b8 <_malloc_r+0x3c>
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 f841 	bl	8003638 <_sbrk_r>
 80035b6:	6020      	str	r0, [r4, #0]
 80035b8:	4629      	mov	r1, r5
 80035ba:	4630      	mov	r0, r6
 80035bc:	f000 f83c 	bl	8003638 <_sbrk_r>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d126      	bne.n	8003612 <_malloc_r+0x96>
 80035c4:	230c      	movs	r3, #12
 80035c6:	4630      	mov	r0, r6
 80035c8:	6033      	str	r3, [r6, #0]
 80035ca:	f000 f87e 	bl	80036ca <__malloc_unlock>
 80035ce:	e7e4      	b.n	800359a <_malloc_r+0x1e>
 80035d0:	680b      	ldr	r3, [r1, #0]
 80035d2:	1b5b      	subs	r3, r3, r5
 80035d4:	d41a      	bmi.n	800360c <_malloc_r+0x90>
 80035d6:	2b0b      	cmp	r3, #11
 80035d8:	d90f      	bls.n	80035fa <_malloc_r+0x7e>
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	18cc      	adds	r4, r1, r3
 80035de:	50cd      	str	r5, [r1, r3]
 80035e0:	4630      	mov	r0, r6
 80035e2:	f000 f872 	bl	80036ca <__malloc_unlock>
 80035e6:	f104 000b 	add.w	r0, r4, #11
 80035ea:	1d23      	adds	r3, r4, #4
 80035ec:	f020 0007 	bic.w	r0, r0, #7
 80035f0:	1ac3      	subs	r3, r0, r3
 80035f2:	d01b      	beq.n	800362c <_malloc_r+0xb0>
 80035f4:	425a      	negs	r2, r3
 80035f6:	50e2      	str	r2, [r4, r3]
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
 80035fa:	428c      	cmp	r4, r1
 80035fc:	bf0b      	itete	eq
 80035fe:	6863      	ldreq	r3, [r4, #4]
 8003600:	684b      	ldrne	r3, [r1, #4]
 8003602:	6013      	streq	r3, [r2, #0]
 8003604:	6063      	strne	r3, [r4, #4]
 8003606:	bf18      	it	ne
 8003608:	460c      	movne	r4, r1
 800360a:	e7e9      	b.n	80035e0 <_malloc_r+0x64>
 800360c:	460c      	mov	r4, r1
 800360e:	6849      	ldr	r1, [r1, #4]
 8003610:	e7ca      	b.n	80035a8 <_malloc_r+0x2c>
 8003612:	1cc4      	adds	r4, r0, #3
 8003614:	f024 0403 	bic.w	r4, r4, #3
 8003618:	42a0      	cmp	r0, r4
 800361a:	d005      	beq.n	8003628 <_malloc_r+0xac>
 800361c:	1a21      	subs	r1, r4, r0
 800361e:	4630      	mov	r0, r6
 8003620:	f000 f80a 	bl	8003638 <_sbrk_r>
 8003624:	3001      	adds	r0, #1
 8003626:	d0cd      	beq.n	80035c4 <_malloc_r+0x48>
 8003628:	6025      	str	r5, [r4, #0]
 800362a:	e7d9      	b.n	80035e0 <_malloc_r+0x64>
 800362c:	bd70      	pop	{r4, r5, r6, pc}
 800362e:	bf00      	nop
 8003630:	20000090 	.word	0x20000090
 8003634:	20000094 	.word	0x20000094

08003638 <_sbrk_r>:
 8003638:	b538      	push	{r3, r4, r5, lr}
 800363a:	2300      	movs	r3, #0
 800363c:	4c05      	ldr	r4, [pc, #20]	; (8003654 <_sbrk_r+0x1c>)
 800363e:	4605      	mov	r5, r0
 8003640:	4608      	mov	r0, r1
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	f000 f842 	bl	80036cc <_sbrk>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d102      	bne.n	8003652 <_sbrk_r+0x1a>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	b103      	cbz	r3, 8003652 <_sbrk_r+0x1a>
 8003650:	602b      	str	r3, [r5, #0]
 8003652:	bd38      	pop	{r3, r4, r5, pc}
 8003654:	20000600 	.word	0x20000600

08003658 <strcpy>:
 8003658:	4603      	mov	r3, r0
 800365a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800365e:	f803 2b01 	strb.w	r2, [r3], #1
 8003662:	2a00      	cmp	r2, #0
 8003664:	d1f9      	bne.n	800365a <strcpy+0x2>
 8003666:	4770      	bx	lr

08003668 <strncpy>:
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	4604      	mov	r4, r0
 800366c:	b902      	cbnz	r2, 8003670 <strncpy+0x8>
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	4623      	mov	r3, r4
 8003672:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003676:	1e56      	subs	r6, r2, #1
 8003678:	f803 5b01 	strb.w	r5, [r3], #1
 800367c:	b91d      	cbnz	r5, 8003686 <strncpy+0x1e>
 800367e:	4414      	add	r4, r2
 8003680:	42a3      	cmp	r3, r4
 8003682:	d103      	bne.n	800368c <strncpy+0x24>
 8003684:	bd70      	pop	{r4, r5, r6, pc}
 8003686:	461c      	mov	r4, r3
 8003688:	4632      	mov	r2, r6
 800368a:	e7ef      	b.n	800366c <strncpy+0x4>
 800368c:	f803 5b01 	strb.w	r5, [r3], #1
 8003690:	e7f6      	b.n	8003680 <strncpy+0x18>

08003692 <strstr>:
 8003692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003694:	7803      	ldrb	r3, [r0, #0]
 8003696:	b133      	cbz	r3, 80036a6 <strstr+0x14>
 8003698:	4603      	mov	r3, r0
 800369a:	4618      	mov	r0, r3
 800369c:	1c5e      	adds	r6, r3, #1
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b933      	cbnz	r3, 80036b0 <strstr+0x1e>
 80036a2:	4618      	mov	r0, r3
 80036a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a6:	780b      	ldrb	r3, [r1, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf18      	it	ne
 80036ac:	2000      	movne	r0, #0
 80036ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b0:	1e4d      	subs	r5, r1, #1
 80036b2:	1e44      	subs	r4, r0, #1
 80036b4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80036b8:	2a00      	cmp	r2, #0
 80036ba:	d0f3      	beq.n	80036a4 <strstr+0x12>
 80036bc:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80036c0:	4633      	mov	r3, r6
 80036c2:	4297      	cmp	r7, r2
 80036c4:	d0f6      	beq.n	80036b4 <strstr+0x22>
 80036c6:	e7e8      	b.n	800369a <strstr+0x8>

080036c8 <__malloc_lock>:
 80036c8:	4770      	bx	lr

080036ca <__malloc_unlock>:
 80036ca:	4770      	bx	lr

080036cc <_sbrk>:
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <_sbrk+0x14>)
 80036ce:	4602      	mov	r2, r0
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	b909      	cbnz	r1, 80036d8 <_sbrk+0xc>
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <_sbrk+0x18>)
 80036d6:	6019      	str	r1, [r3, #0]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	4402      	add	r2, r0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	4770      	bx	lr
 80036e0:	20000098 	.word	0x20000098
 80036e4:	20000604 	.word	0x20000604

080036e8 <_init>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	bf00      	nop
 80036ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ee:	bc08      	pop	{r3}
 80036f0:	469e      	mov	lr, r3
 80036f2:	4770      	bx	lr

080036f4 <_fini>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	bf00      	nop
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr
