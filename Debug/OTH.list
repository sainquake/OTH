
OTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a24  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003b34  08003b34  00013b34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003b90  08003b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b4  20000000  08003b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000640  200000b4  08003c4c  000200b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200006f4  08003c4c  000206f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f13a  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000037c7  00000000  00000000  0003f217  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bf67  00000000  00000000  000429de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ec0  00000000  00000000  0004e948  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000015b8  00000000  00000000  0004f808  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000940a  00000000  00000000  00050dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000056f7  00000000  00000000  0005a1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005f8c1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000031dc  00000000  00000000  0005f940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b4 	.word	0x200000b4
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b1c 	.word	0x08003b1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b8 	.word	0x200000b8
 800014c:	08003b1c 	.word	0x08003b1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2f>:
 8000944:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000948:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800094c:	bf24      	itt	cs
 800094e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000952:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000956:	d90d      	bls.n	8000974 <__aeabi_d2f+0x30>
 8000958:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800095c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000960:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000964:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000968:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800096c:	bf08      	it	eq
 800096e:	f020 0001 	biceq.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000978:	d121      	bne.n	80009be <__aeabi_d2f+0x7a>
 800097a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800097e:	bfbc      	itt	lt
 8000980:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000984:	4770      	bxlt	lr
 8000986:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800098a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800098e:	f1c2 0218 	rsb	r2, r2, #24
 8000992:	f1c2 0c20 	rsb	ip, r2, #32
 8000996:	fa10 f30c 	lsls.w	r3, r0, ip
 800099a:	fa20 f002 	lsr.w	r0, r0, r2
 800099e:	bf18      	it	ne
 80009a0:	f040 0001 	orrne.w	r0, r0, #1
 80009a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ac:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b0:	ea40 000c 	orr.w	r0, r0, ip
 80009b4:	fa23 f302 	lsr.w	r3, r3, r2
 80009b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009bc:	e7cc      	b.n	8000958 <__aeabi_d2f+0x14>
 80009be:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009c2:	d107      	bne.n	80009d4 <__aeabi_d2f+0x90>
 80009c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c8:	bf1e      	ittt	ne
 80009ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009d2:	4770      	bxne	lr
 80009d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_InitTick+0x3c>)
{
 80009e8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ea:	7818      	ldrb	r0, [r3, #0]
 80009ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <HAL_InitTick+0x40>)
 80009f6:	6810      	ldr	r0, [r2, #0]
 80009f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80009fc:	f000 faee 	bl	8000fdc <HAL_SYSTICK_Config>
 8000a00:	4604      	mov	r4, r0
 8000a02:	b958      	cbnz	r0, 8000a1c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a04:	2d0f      	cmp	r5, #15
 8000a06:	d809      	bhi.n	8000a1c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	4602      	mov	r2, r0
 8000a0a:	4629      	mov	r1, r5
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 faa4 	bl	8000f5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <HAL_InitTick+0x44>)
 8000a16:	4620      	mov	r0, r4
 8000a18:	601d      	str	r5, [r3, #0]
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a1c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a1e:	bd38      	pop	{r3, r4, r5, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	2000004c 	.word	0x2000004c
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x20>)
{
 8000a2e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a32:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	f043 0310 	orr.w	r3, r3, #16
 8000a38:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3a:	f000 fa7d 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff ffd0 	bl	80009e4 <HAL_InitTick>
  HAL_MspInit();
 8000a44:	f002 fc72 	bl	800332c <HAL_MspInit>
}
 8000a48:	2000      	movs	r0, #0
 8000a4a:	bd08      	pop	{r3, pc}
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <HAL_IncTick+0x10>)
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <HAL_IncTick+0x14>)
 8000a54:	6811      	ldr	r1, [r2, #0]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	440b      	add	r3, r1
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200000e8 	.word	0x200000e8
 8000a64:	20000000 	.word	0x20000000

08000a68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a68:	4b01      	ldr	r3, [pc, #4]	; (8000a70 <HAL_GetTick+0x8>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200000e8 	.word	0x200000e8

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b538      	push	{r3, r4, r5, lr}
 8000a76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff fff6 	bl	8000a68 <HAL_GetTick>
 8000a7c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a80:	bf1e      	ittt	ne
 8000a82:	4b04      	ldrne	r3, [pc, #16]	; (8000a94 <HAL_Delay+0x20>)
 8000a84:	781b      	ldrbne	r3, [r3, #0]
 8000a86:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a88:	f7ff ffee 	bl	8000a68 <HAL_GetTick>
 8000a8c:	1b40      	subs	r0, r0, r5
 8000a8e:	4284      	cmp	r4, r0
 8000a90:	d8fa      	bhi.n	8000a88 <HAL_Delay+0x14>
  {
  }
}
 8000a92:	bd38      	pop	{r3, r4, r5, pc}
 8000a94:	20000000 	.word	0x20000000

08000a98 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a98:	6803      	ldr	r3, [r0, #0]
 8000a9a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000a9c:	4770      	bx	lr
	...

08000aa0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000aa0:	2300      	movs	r3, #0
{ 
 8000aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000aa4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d074      	beq.n	8000b98 <HAL_ADC_ConfigChannel+0xf8>
 8000aae:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ab0:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000ab2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000ab6:	2d06      	cmp	r5, #6
 8000ab8:	6802      	ldr	r2, [r0, #0]
 8000aba:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000abe:	680c      	ldr	r4, [r1, #0]
 8000ac0:	d825      	bhi.n	8000b0e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ac2:	442b      	add	r3, r5
 8000ac4:	251f      	movs	r5, #31
 8000ac6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000ac8:	3b05      	subs	r3, #5
 8000aca:	409d      	lsls	r5, r3
 8000acc:	ea26 0505 	bic.w	r5, r6, r5
 8000ad0:	fa04 f303 	lsl.w	r3, r4, r3
 8000ad4:	432b      	orrs	r3, r5
 8000ad6:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ad8:	2c09      	cmp	r4, #9
 8000ada:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000ade:	688d      	ldr	r5, [r1, #8]
 8000ae0:	d92f      	bls.n	8000b42 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ae2:	2607      	movs	r6, #7
 8000ae4:	4423      	add	r3, r4
 8000ae6:	68d1      	ldr	r1, [r2, #12]
 8000ae8:	3b1e      	subs	r3, #30
 8000aea:	409e      	lsls	r6, r3
 8000aec:	ea21 0106 	bic.w	r1, r1, r6
 8000af0:	fa05 f303 	lsl.w	r3, r5, r3
 8000af4:	430b      	orrs	r3, r1
 8000af6:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000af8:	f1a4 0310 	sub.w	r3, r4, #16
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d92b      	bls.n	8000b58 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000b0e:	2d0c      	cmp	r5, #12
 8000b10:	d80b      	bhi.n	8000b2a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b12:	442b      	add	r3, r5
 8000b14:	251f      	movs	r5, #31
 8000b16:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000b18:	3b23      	subs	r3, #35	; 0x23
 8000b1a:	409d      	lsls	r5, r3
 8000b1c:	ea26 0505 	bic.w	r5, r6, r5
 8000b20:	fa04 f303 	lsl.w	r3, r4, r3
 8000b24:	432b      	orrs	r3, r5
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	e7d6      	b.n	8000ad8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b2a:	442b      	add	r3, r5
 8000b2c:	251f      	movs	r5, #31
 8000b2e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000b30:	3b41      	subs	r3, #65	; 0x41
 8000b32:	409d      	lsls	r5, r3
 8000b34:	ea26 0505 	bic.w	r5, r6, r5
 8000b38:	fa04 f303 	lsl.w	r3, r4, r3
 8000b3c:	432b      	orrs	r3, r5
 8000b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b40:	e7ca      	b.n	8000ad8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b42:	2607      	movs	r6, #7
 8000b44:	6911      	ldr	r1, [r2, #16]
 8000b46:	4423      	add	r3, r4
 8000b48:	409e      	lsls	r6, r3
 8000b4a:	ea21 0106 	bic.w	r1, r1, r6
 8000b4e:	fa05 f303 	lsl.w	r3, r5, r3
 8000b52:	430b      	orrs	r3, r1
 8000b54:	6113      	str	r3, [r2, #16]
 8000b56:	e7cf      	b.n	8000af8 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_ADC_ConfigChannel+0xfc>)
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d116      	bne.n	8000b8c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b5e:	6893      	ldr	r3, [r2, #8]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	d4cd      	bmi.n	8000b00 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b64:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b66:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b6c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b6e:	d1c7      	bne.n	8000b00 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_ADC_ConfigChannel+0x100>)
 8000b72:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <HAL_ADC_ConfigChannel+0x104>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b7a:	230a      	movs	r3, #10
 8000b7c:	4353      	muls	r3, r2
            wait_loop_index--;
 8000b7e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0bc      	beq.n	8000b00 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000b86:	9b01      	ldr	r3, [sp, #4]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	e7f8      	b.n	8000b7e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b8e:	f043 0320 	orr.w	r3, r3, #32
 8000b92:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e7b4      	b.n	8000b02 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e7b5      	b.n	8000b08 <HAL_ADC_ConfigChannel+0x68>
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	2000004c 	.word	0x2000004c
 8000ba4:	000f4240 	.word	0x000f4240

08000ba8 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000ba8:	2300      	movs	r3, #0
{
 8000baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000bac:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bae:	6803      	ldr	r3, [r0, #0]
{
 8000bb0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	07d2      	lsls	r2, r2, #31
 8000bb6:	d502      	bpl.n	8000bbe <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000bb8:	2000      	movs	r0, #0
}
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	f042 0201 	orr.w	r2, r2, #1
 8000bc4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <ADC_Enable+0x68>)
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <ADC_Enable+0x6c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000bd0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000bd2:	9b01      	ldr	r3, [sp, #4]
 8000bd4:	b9c3      	cbnz	r3, 8000c08 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000bd6:	f7ff ff47 	bl	8000a68 <HAL_GetTick>
 8000bda:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	689d      	ldr	r5, [r3, #8]
 8000be0:	f015 0501 	ands.w	r5, r5, #1
 8000be4:	d1e8      	bne.n	8000bb8 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000be6:	f7ff ff3f 	bl	8000a68 <HAL_GetTick>
 8000bea:	1b80      	subs	r0, r0, r6
 8000bec:	2802      	cmp	r0, #2
 8000bee:	d9f5      	bls.n	8000bdc <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000bf2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000bfe:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c06:	e7d8      	b.n	8000bba <ADC_Enable+0x12>
      wait_loop_index--;
 8000c08:	9b01      	ldr	r3, [sp, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	e7e0      	b.n	8000bd0 <ADC_Enable+0x28>
 8000c0e:	bf00      	nop
 8000c10:	2000004c 	.word	0x2000004c
 8000c14:	000f4240 	.word	0x000f4240

08000c18 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000c18:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000c1c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000c1e:	2b01      	cmp	r3, #1
{
 8000c20:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000c22:	d054      	beq.n	8000cce <HAL_ADC_Start+0xb6>
 8000c24:	2301      	movs	r3, #1
 8000c26:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000c2a:	f7ff ffbd 	bl	8000ba8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d149      	bne.n	8000cc6 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8000c32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c34:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8000c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c3a:	f023 0301 	bic.w	r3, r3, #1
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c42:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d104      	bne.n	8000c54 <HAL_ADC_Start+0x3c>
 8000c4a:	4923      	ldr	r1, [pc, #140]	; (8000cd8 <HAL_ADC_Start+0xc0>)
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000c52:	d12e      	bne.n	8000cb2 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c56:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000c5a:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c5c:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c5e:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c60:	bf41      	itttt	mi
 8000c62:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000c64:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000c68:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000c6c:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c74:	bf1c      	itt	ne
 8000c76:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000c78:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000c7c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c84:	f06f 0202 	mvn.w	r2, #2
 8000c88:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000c90:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000c94:	d113      	bne.n	8000cbe <HAL_ADC_Start+0xa6>
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_ADC_Start+0xbc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d105      	bne.n	8000ca8 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c9c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000ca0:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ca2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000ca6:	d10a      	bne.n	8000cbe <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cb8:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cba:	684a      	ldr	r2, [r1, #4]
 8000cbc:	e7cf      	b.n	8000c5e <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cc4:	e7f3      	b.n	8000cae <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000ccc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000cce:	2002      	movs	r0, #2
}
 8000cd0:	bd10      	pop	{r4, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40012800 	.word	0x40012800
 8000cd8:	40012400 	.word	0x40012400

08000cdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000cde:	6803      	ldr	r3, [r0, #0]
{
 8000ce0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	07d2      	lsls	r2, r2, #31
 8000ce6:	d401      	bmi.n	8000cec <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ce8:	2000      	movs	r0, #0
 8000cea:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	f022 0201 	bic.w	r2, r2, #1
 8000cf2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000cf4:	f7ff feb8 	bl	8000a68 <HAL_GetTick>
 8000cf8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	07db      	lsls	r3, r3, #31
 8000d00:	d5f2      	bpl.n	8000ce8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d02:	f7ff feb1 	bl	8000a68 <HAL_GetTick>
 8000d06:	1b40      	subs	r0, r0, r5
 8000d08:	2802      	cmp	r0, #2
 8000d0a:	d9f6      	bls.n	8000cfa <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d0e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}

08000d20 <HAL_ADC_Init>:
{
 8000d20:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000d22:	4604      	mov	r4, r0
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d071      	beq.n	8000e0c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d2a:	b923      	cbnz	r3, 8000d36 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000d2c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000d2e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000d32:	f002 fb41 	bl	80033b8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff ffd0 	bl	8000cdc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d3e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000d42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d44:	d164      	bne.n	8000e10 <HAL_ADC_Init+0xf0>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	d162      	bne.n	8000e10 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000d4a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000d4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000d50:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000d52:	f023 0302 	bic.w	r3, r3, #2
 8000d56:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000d5a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d5c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000d5e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000d60:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d62:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000d66:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d6a:	d038      	beq.n	8000dde <HAL_ADC_Init+0xbe>
 8000d6c:	2901      	cmp	r1, #1
 8000d6e:	bf14      	ite	ne
 8000d70:	4606      	movne	r6, r0
 8000d72:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d76:	6965      	ldr	r5, [r4, #20]
 8000d78:	2d01      	cmp	r5, #1
 8000d7a:	d107      	bne.n	8000d8c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d130      	bne.n	8000de2 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d80:	69a3      	ldr	r3, [r4, #24]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000d88:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000d8c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d8e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000d92:	685d      	ldr	r5, [r3, #4]
 8000d94:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000d98:	ea45 0506 	orr.w	r5, r5, r6
 8000d9c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000d9e:	689e      	ldr	r6, [r3, #8]
 8000da0:	4d1d      	ldr	r5, [pc, #116]	; (8000e18 <HAL_ADC_Init+0xf8>)
 8000da2:	ea05 0506 	and.w	r5, r5, r6
 8000da6:	ea45 0502 	orr.w	r5, r5, r2
 8000daa:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dac:	d001      	beq.n	8000db2 <HAL_ADC_Init+0x92>
 8000dae:	2901      	cmp	r1, #1
 8000db0:	d120      	bne.n	8000df4 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000db2:	6921      	ldr	r1, [r4, #16]
 8000db4:	3901      	subs	r1, #1
 8000db6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000db8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000dba:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000dbe:	4329      	orrs	r1, r5
 8000dc0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dc2:	6899      	ldr	r1, [r3, #8]
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_ADC_Init+0xfc>)
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d115      	bne.n	8000df8 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000dd2:	f023 0303 	bic.w	r3, r3, #3
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dde:	460e      	mov	r6, r1
 8000de0:	e7c9      	b.n	8000d76 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000df2:	e7cb      	b.n	8000d8c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000df4:	2100      	movs	r1, #0
 8000df6:	e7df      	b.n	8000db8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000dfa:	f023 0312 	bic.w	r3, r3, #18
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000e0c:	2001      	movs	r0, #1
}
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e16:	e7f9      	b.n	8000e0c <HAL_ADC_Init+0xec>
 8000e18:	ffe1f7fd 	.word	0xffe1f7fd
 8000e1c:	ff1f0efe 	.word	0xff1f0efe

08000e20 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000e20:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0U;
  uint32_t tmp_mcr = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000e22:	4604      	mov	r4, r0
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d069      	beq.n	8000efc <HAL_CAN_Init+0xdc>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000e28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e30:	b91b      	cbnz	r3, 8000e3a <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000e32:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000e36:	f002 faef 	bl	8003418 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	f022 0202 	bic.w	r2, r2, #2
 8000e48:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	f042 0201 	orr.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 8000e52:	f7ff fe09 	bl	8000a68 <HAL_GetTick>
 8000e56:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000e58:	6822      	ldr	r2, [r4, #0]
 8000e5a:	6855      	ldr	r5, [r2, #4]
 8000e5c:	f015 0501 	ands.w	r5, r5, #1
 8000e60:	d04e      	beq.n	8000f00 <HAL_CAN_Init+0xe0>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000e62:	6853      	ldr	r3, [r2, #4]
 8000e64:	07d9      	lsls	r1, r3, #31
 8000e66:	d546      	bpl.n	8000ef6 <HAL_CAN_Init+0xd6>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000e68:	69a3      	ldr	r3, [r4, #24]
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000e6a:	69e1      	ldr	r1, [r4, #28]
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	bf0c      	ite	eq
 8000e70:	2380      	moveq	r3, #128	; 0x80
 8000e72:	2300      	movne	r3, #0
    if (hcan->Init.ABOM == ENABLE)
 8000e74:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000e76:	6a21      	ldr	r1, [r4, #32]
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8000e78:	bf0c      	ite	eq
 8000e7a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 8000e7e:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 8000e82:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
    }
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000e84:	6a61      	ldr	r1, [r4, #36]	; 0x24
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 8000e86:	bf0c      	ite	eq
 8000e88:	f043 0320 	orreq.w	r3, r3, #32
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 8000e8c:	f023 0320 	bicne.w	r3, r3, #32
    if (hcan->Init.NART == ENABLE)
 8000e90:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000e92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 8000e94:	bf0c      	ite	eq
 8000e96:	f043 0310 	orreq.w	r3, r3, #16
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 8000e9a:	f023 0310 	bicne.w	r3, r3, #16
    if (hcan->Init.RFLM == ENABLE)
 8000e9e:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
    }
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000ea0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000ea2:	bf0c      	ite	eq
 8000ea4:	f043 0308 	orreq.w	r3, r3, #8
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000ea8:	f023 0308 	bicne.w	r3, r3, #8
    if (hcan->Init.TXFP == ENABLE)
 8000eac:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8000eae:	6811      	ldr	r1, [r2, #0]
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000eb0:	bf0c      	ite	eq
 8000eb2:	f043 0304 	orreq.w	r3, r3, #4
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000eb6:	f023 0304 	bicne.w	r3, r3, #4
    MODIFY_REG(hcan->Instance->MCR,
 8000eba:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6013      	str	r3, [r2, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ec2:	68e1      	ldr	r1, [r4, #12]
 8000ec4:	68a3      	ldr	r3, [r4, #8]
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	6921      	ldr	r1, [r4, #16]
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	6961      	ldr	r1, [r4, #20]
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	6861      	ldr	r1, [r4, #4]
 8000ed2:	3901      	subs	r1, #1
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	61d3      	str	r3, [r2, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U)));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ed8:	6813      	ldr	r3, [r2, #0]
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 8000ee0:	f7ff fdc2 	bl	8000a68 <HAL_GetTick>
 8000ee4:	4605      	mov	r5, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	07d2      	lsls	r2, r2, #31
 8000eec:	d413      	bmi.n	8000f16 <HAL_CAN_Init+0xf6>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000eee:	6858      	ldr	r0, [r3, #4]
 8000ef0:	f010 0001 	ands.w	r0, r0, #1
 8000ef4:	d01b      	beq.n	8000f2e <HAL_CAN_Init+0x10e>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 8000efc:	2001      	movs	r0, #1
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000f00:	f7ff fdb2 	bl	8000a68 <HAL_GetTick>
 8000f04:	1b80      	subs	r0, r0, r6
 8000f06:	280a      	cmp	r0, #10
 8000f08:	d9a6      	bls.n	8000e58 <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f0a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8000f0c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f10:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 8000f14:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000f16:	f7ff fda7 	bl	8000a68 <HAL_GetTick>
 8000f1a:	1b40      	subs	r0, r0, r5
 8000f1c:	280a      	cmp	r0, #10
 8000f1e:	d9e2      	bls.n	8000ee6 <HAL_CAN_Init+0xc6>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f20:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 8000f22:	2300      	movs	r3, #0
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f24:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_UNLOCK(hcan);
 8000f28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000f2c:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 8000f2e:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f30:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8000f32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  }
}
 8000f36:	bd70      	pop	{r4, r5, r6, pc}

08000f38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f3a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f3e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	0c1b      	lsrs	r3, r3, #16
 8000f4a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000f52:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f54:	60d3      	str	r3, [r2, #12]
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5e:	b530      	push	{r4, r5, lr}
 8000f60:	68dc      	ldr	r4, [r3, #12]
 8000f62:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f66:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	bf28      	it	cs
 8000f70:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f78:	bf98      	it	ls
 8000f7a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f80:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f84:	bf88      	it	hi
 8000f86:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4019      	ands	r1, r3
 8000f8a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	fa05 f404 	lsl.w	r4, r5, r4
 8000f90:	3c01      	subs	r4, #1
 8000f92:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000f94:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f96:	ea42 0201 	orr.w	r2, r2, r1
 8000f9a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	bfaf      	iteee	ge
 8000fa0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	4b06      	ldrlt	r3, [pc, #24]	; (8000fc0 <HAL_NVIC_SetPriority+0x64>)
 8000fa6:	f000 000f 	andlt.w	r0, r0, #15
 8000faa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	bfa5      	ittet	ge
 8000fae:	b2d2      	uxtbge	r2, r2
 8000fb0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fba:	bd30      	pop	{r4, r5, pc}
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	e000ed14 	.word	0xe000ed14

08000fc4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	0942      	lsrs	r2, r0, #5
 8000fc8:	f000 001f 	and.w	r0, r0, #31
 8000fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8000fd0:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <HAL_NVIC_EnableIRQ+0x14>)
 8000fd2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	3801      	subs	r0, #1
 8000fde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fe2:	d20a      	bcs.n	8000ffa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800100a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	bf0c      	ite	eq
 8001010:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001014:	f022 0204 	bicne.w	r2, r2, #4
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	4770      	bx	lr
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001020:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001022:	f001 ff25 	bl	8002e70 <HAL_SYSTICK_Callback>
 8001026:	bd08      	pop	{r3, pc}

08001028 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001028:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800102c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800102e:	2b02      	cmp	r3, #2
 8001030:	d003      	beq.n	800103a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001032:	2304      	movs	r3, #4
 8001034:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001036:	2001      	movs	r0, #1
 8001038:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103a:	6803      	ldr	r3, [r0, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	f022 020e 	bic.w	r2, r2, #14
 8001042:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800104c:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_DMA_Abort_IT+0x88>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_DMA_Abort_IT+0x6a>
 8001052:	3214      	adds	r2, #20
 8001054:	4293      	cmp	r3, r2
 8001056:	d01e      	beq.n	8001096 <HAL_DMA_Abort_IT+0x6e>
 8001058:	3214      	adds	r2, #20
 800105a:	4293      	cmp	r3, r2
 800105c:	d01d      	beq.n	800109a <HAL_DMA_Abort_IT+0x72>
 800105e:	3214      	adds	r2, #20
 8001060:	4293      	cmp	r3, r2
 8001062:	d01d      	beq.n	80010a0 <HAL_DMA_Abort_IT+0x78>
 8001064:	3214      	adds	r2, #20
 8001066:	4293      	cmp	r3, r2
 8001068:	d01d      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x7e>
 800106a:	3214      	adds	r2, #20
 800106c:	4293      	cmp	r3, r2
 800106e:	bf0c      	ite	eq
 8001070:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001074:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800107c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800107e:	2301      	movs	r3, #1
 8001080:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001084:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001086:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800108a:	b17b      	cbz	r3, 80010ac <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 800108c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800108e:	4620      	mov	r0, r4
 8001090:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001092:	2301      	movs	r3, #1
 8001094:	e7f0      	b.n	8001078 <HAL_DMA_Abort_IT+0x50>
 8001096:	2310      	movs	r3, #16
 8001098:	e7ee      	b.n	8001078 <HAL_DMA_Abort_IT+0x50>
 800109a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109e:	e7eb      	b.n	8001078 <HAL_DMA_Abort_IT+0x50>
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	e7e8      	b.n	8001078 <HAL_DMA_Abort_IT+0x50>
 80010a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010aa:	e7e5      	b.n	8001078 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80010ac:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80010ae:	bd10      	pop	{r4, pc}
 80010b0:	40020008 	.word	0x40020008
 80010b4:	40020000 	.word	0x40020000

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80010bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010be:	4616      	mov	r6, r2
 80010c0:	4b65      	ldr	r3, [pc, #404]	; (8001258 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001268 <HAL_GPIO_Init+0x1b0>
 80010c6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800126c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80010ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80010d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80010d8:	45a0      	cmp	r8, r4
 80010da:	d17f      	bne.n	80011dc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80010dc:	684d      	ldr	r5, [r1, #4]
 80010de:	2d12      	cmp	r5, #18
 80010e0:	f000 80af 	beq.w	8001242 <HAL_GPIO_Init+0x18a>
 80010e4:	f200 8088 	bhi.w	80011f8 <HAL_GPIO_Init+0x140>
 80010e8:	2d02      	cmp	r5, #2
 80010ea:	f000 80a7 	beq.w	800123c <HAL_GPIO_Init+0x184>
 80010ee:	d87c      	bhi.n	80011ea <HAL_GPIO_Init+0x132>
 80010f0:	2d00      	cmp	r5, #0
 80010f2:	f000 808e 	beq.w	8001212 <HAL_GPIO_Init+0x15a>
 80010f6:	2d01      	cmp	r5, #1
 80010f8:	f000 809e 	beq.w	8001238 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001100:	2cff      	cmp	r4, #255	; 0xff
 8001102:	bf93      	iteet	ls
 8001104:	4682      	movls	sl, r0
 8001106:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800110a:	3d08      	subhi	r5, #8
 800110c:	f8d0 b000 	ldrls.w	fp, [r0]
 8001110:	bf92      	itee	ls
 8001112:	00b5      	lslls	r5, r6, #2
 8001114:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001118:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800111a:	fa09 f805 	lsl.w	r8, r9, r5
 800111e:	ea2b 0808 	bic.w	r8, fp, r8
 8001122:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001126:	bf88      	it	hi
 8001128:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800112c:	ea48 0505 	orr.w	r5, r8, r5
 8001130:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001134:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001138:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800113c:	d04e      	beq.n	80011dc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800113e:	4d47      	ldr	r5, [pc, #284]	; (800125c <HAL_GPIO_Init+0x1a4>)
 8001140:	4f46      	ldr	r7, [pc, #280]	; (800125c <HAL_GPIO_Init+0x1a4>)
 8001142:	69ad      	ldr	r5, [r5, #24]
 8001144:	f026 0803 	bic.w	r8, r6, #3
 8001148:	f045 0501 	orr.w	r5, r5, #1
 800114c:	61bd      	str	r5, [r7, #24]
 800114e:	69bd      	ldr	r5, [r7, #24]
 8001150:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001154:	f005 0501 	and.w	r5, r5, #1
 8001158:	9501      	str	r5, [sp, #4]
 800115a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800115e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001162:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001164:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001168:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800116c:	fa09 f90b 	lsl.w	r9, r9, fp
 8001170:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001174:	4d3a      	ldr	r5, [pc, #232]	; (8001260 <HAL_GPIO_Init+0x1a8>)
 8001176:	42a8      	cmp	r0, r5
 8001178:	d068      	beq.n	800124c <HAL_GPIO_Init+0x194>
 800117a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800117e:	42a8      	cmp	r0, r5
 8001180:	d066      	beq.n	8001250 <HAL_GPIO_Init+0x198>
 8001182:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001186:	42a8      	cmp	r0, r5
 8001188:	d064      	beq.n	8001254 <HAL_GPIO_Init+0x19c>
 800118a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800118e:	42a8      	cmp	r0, r5
 8001190:	bf0c      	ite	eq
 8001192:	2503      	moveq	r5, #3
 8001194:	2504      	movne	r5, #4
 8001196:	fa05 f50b 	lsl.w	r5, r5, fp
 800119a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800119e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80011a8:	bf14      	ite	ne
 80011aa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ac:	43a5      	biceq	r5, r4
 80011ae:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011b0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011b6:	bf14      	ite	ne
 80011b8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ba:	43a5      	biceq	r5, r4
 80011bc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011be:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80011c4:	bf14      	ite	ne
 80011c6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011c8:	43a5      	biceq	r5, r4
 80011ca:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011cc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ce:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d2:	bf14      	ite	ne
 80011d4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d6:	ea25 0404 	biceq.w	r4, r5, r4
 80011da:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011dc:	3601      	adds	r6, #1
 80011de:	2e10      	cmp	r6, #16
 80011e0:	f47f af73 	bne.w	80010ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80011e4:	b003      	add	sp, #12
 80011e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80011ea:	2d03      	cmp	r5, #3
 80011ec:	d022      	beq.n	8001234 <HAL_GPIO_Init+0x17c>
 80011ee:	2d11      	cmp	r5, #17
 80011f0:	d184      	bne.n	80010fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011f2:	68ca      	ldr	r2, [r1, #12]
 80011f4:	3204      	adds	r2, #4
          break;
 80011f6:	e781      	b.n	80010fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80011f8:	4f1a      	ldr	r7, [pc, #104]	; (8001264 <HAL_GPIO_Init+0x1ac>)
 80011fa:	42bd      	cmp	r5, r7
 80011fc:	d009      	beq.n	8001212 <HAL_GPIO_Init+0x15a>
 80011fe:	d812      	bhi.n	8001226 <HAL_GPIO_Init+0x16e>
 8001200:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001270 <HAL_GPIO_Init+0x1b8>
 8001204:	454d      	cmp	r5, r9
 8001206:	d004      	beq.n	8001212 <HAL_GPIO_Init+0x15a>
 8001208:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800120c:	454d      	cmp	r5, r9
 800120e:	f47f af75 	bne.w	80010fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001212:	688a      	ldr	r2, [r1, #8]
 8001214:	b1c2      	cbz	r2, 8001248 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001216:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001218:	bf0c      	ite	eq
 800121a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800121e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001222:	2208      	movs	r2, #8
 8001224:	e76a      	b.n	80010fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001226:	4575      	cmp	r5, lr
 8001228:	d0f3      	beq.n	8001212 <HAL_GPIO_Init+0x15a>
 800122a:	4565      	cmp	r5, ip
 800122c:	d0f1      	beq.n	8001212 <HAL_GPIO_Init+0x15a>
 800122e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001274 <HAL_GPIO_Init+0x1bc>
 8001232:	e7eb      	b.n	800120c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001234:	2200      	movs	r2, #0
 8001236:	e761      	b.n	80010fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001238:	68ca      	ldr	r2, [r1, #12]
          break;
 800123a:	e75f      	b.n	80010fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800123c:	68ca      	ldr	r2, [r1, #12]
 800123e:	3208      	adds	r2, #8
          break;
 8001240:	e75c      	b.n	80010fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001242:	68ca      	ldr	r2, [r1, #12]
 8001244:	320c      	adds	r2, #12
          break;
 8001246:	e759      	b.n	80010fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001248:	2204      	movs	r2, #4
 800124a:	e757      	b.n	80010fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124c:	2500      	movs	r5, #0
 800124e:	e7a2      	b.n	8001196 <HAL_GPIO_Init+0xde>
 8001250:	2501      	movs	r5, #1
 8001252:	e7a0      	b.n	8001196 <HAL_GPIO_Init+0xde>
 8001254:	2502      	movs	r5, #2
 8001256:	e79e      	b.n	8001196 <HAL_GPIO_Init+0xde>
 8001258:	40010400 	.word	0x40010400
 800125c:	40021000 	.word	0x40021000
 8001260:	40010800 	.word	0x40010800
 8001264:	10210000 	.word	0x10210000
 8001268:	10310000 	.word	0x10310000
 800126c:	10320000 	.word	0x10320000
 8001270:	10110000 	.word	0x10110000
 8001274:	10220000 	.word	0x10220000

08001278 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001278:	b10a      	cbz	r2, 800127e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	6101      	str	r1, [r0, #16]
 800127c:	4770      	bx	lr
 800127e:	0409      	lsls	r1, r1, #16
 8001280:	e7fb      	b.n	800127a <HAL_GPIO_WritePin+0x2>

08001282 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001282:	68c3      	ldr	r3, [r0, #12]
 8001284:	4059      	eors	r1, r3
 8001286:	60c1      	str	r1, [r0, #12]
 8001288:	4770      	bx	lr
	...

0800128c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800128c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800128e:	4604      	mov	r4, r0
 8001290:	b908      	cbnz	r0, 8001296 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001292:	2001      	movs	r0, #1
 8001294:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001296:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800129a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800129e:	b91b      	cbnz	r3, 80012a8 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012a4:	f002 f8f0 	bl	8003488 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012a8:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012aa:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80012b0:	6813      	ldr	r3, [r2, #0]
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012b8:	f000 fada 	bl	8001870 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012bc:	6863      	ldr	r3, [r4, #4]
 80012be:	4a2f      	ldr	r2, [pc, #188]	; (800137c <HAL_I2C_Init+0xf0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d830      	bhi.n	8001326 <HAL_I2C_Init+0x9a>
 80012c4:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <HAL_I2C_Init+0xf4>)
 80012c6:	4290      	cmp	r0, r2
 80012c8:	d9e3      	bls.n	8001292 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80012cc:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80012ce:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80012d2:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80012d4:	3201      	adds	r2, #1
 80012d6:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80012d8:	4a28      	ldr	r2, [pc, #160]	; (800137c <HAL_I2C_Init+0xf0>)
 80012da:	3801      	subs	r0, #1
 80012dc:	4293      	cmp	r3, r2
 80012de:	d832      	bhi.n	8001346 <HAL_I2C_Init+0xba>
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80012e6:	1c43      	adds	r3, r0, #1
 80012e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	bf38      	it	cc
 80012f0:	2304      	movcc	r3, #4
 80012f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012f4:	6a22      	ldr	r2, [r4, #32]
 80012f6:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f8:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80012fe:	68e2      	ldr	r2, [r4, #12]
 8001300:	6923      	ldr	r3, [r4, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001306:	69a2      	ldr	r2, [r4, #24]
 8001308:	6963      	ldr	r3, [r4, #20]
 800130a:	4313      	orrs	r3, r2
 800130c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800130e:	680b      	ldr	r3, [r1, #0]
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001316:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001318:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800131a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800131e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001320:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001324:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001326:	4a18      	ldr	r2, [pc, #96]	; (8001388 <HAL_I2C_Init+0xfc>)
 8001328:	4290      	cmp	r0, r2
 800132a:	d9b2      	bls.n	8001292 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800132c:	4d15      	ldr	r5, [pc, #84]	; (8001384 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800132e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001332:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001336:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001338:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800133a:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800133c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001340:	fbb2 f2f5 	udiv	r2, r2, r5
 8001344:	e7c6      	b.n	80012d4 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001346:	68a2      	ldr	r2, [r4, #8]
 8001348:	b952      	cbnz	r2, 8001360 <HAL_I2C_Init+0xd4>
 800134a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800134e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001352:	1c43      	adds	r3, r0, #1
 8001354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001358:	b16b      	cbz	r3, 8001376 <HAL_I2C_Init+0xea>
 800135a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135e:	e7c8      	b.n	80012f2 <HAL_I2C_Init+0x66>
 8001360:	2219      	movs	r2, #25
 8001362:	4353      	muls	r3, r2
 8001364:	fbb0 f0f3 	udiv	r0, r0, r3
 8001368:	1c43      	adds	r3, r0, #1
 800136a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136e:	b113      	cbz	r3, 8001376 <HAL_I2C_Init+0xea>
 8001370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001374:	e7bd      	b.n	80012f2 <HAL_I2C_Init+0x66>
 8001376:	2301      	movs	r3, #1
 8001378:	e7bb      	b.n	80012f2 <HAL_I2C_Init+0x66>
 800137a:	bf00      	nop
 800137c:	000186a0 	.word	0x000186a0
 8001380:	001e847f 	.word	0x001e847f
 8001384:	000f4240 	.word	0x000f4240
 8001388:	003d08ff 	.word	0x003d08ff

0800138c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138c:	6803      	ldr	r3, [r0, #0]
{
 800138e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	07db      	lsls	r3, r3, #31
{
 8001394:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	d410      	bmi.n	80013ba <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	079f      	lsls	r7, r3, #30
 800139c:	d45e      	bmi.n	800145c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	0719      	lsls	r1, r3, #28
 80013a2:	f100 8095 	bmi.w	80014d0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	075a      	lsls	r2, r3, #29
 80013aa:	f100 80bf 	bmi.w	800152c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ae:	69ea      	ldr	r2, [r5, #28]
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	f040 812d 	bne.w	8001610 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80013b6:	2000      	movs	r0, #0
 80013b8:	e014      	b.n	80013e4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013ba:	4c90      	ldr	r4, [pc, #576]	; (80015fc <HAL_RCC_OscConfig+0x270>)
 80013bc:	6863      	ldr	r3, [r4, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d007      	beq.n	80013d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c6:	6863      	ldr	r3, [r4, #4]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d10c      	bne.n	80013ea <HAL_RCC_OscConfig+0x5e>
 80013d0:	6863      	ldr	r3, [r4, #4]
 80013d2:	03de      	lsls	r6, r3, #15
 80013d4:	d509      	bpl.n	80013ea <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	039c      	lsls	r4, r3, #14
 80013da:	d5dd      	bpl.n	8001398 <HAL_RCC_OscConfig+0xc>
 80013dc:	686b      	ldr	r3, [r5, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1da      	bne.n	8001398 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
}
 80013e4:	b002      	add	sp, #8
 80013e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	686b      	ldr	r3, [r5, #4]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f0:	d110      	bne.n	8001414 <HAL_RCC_OscConfig+0x88>
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb35 	bl	8000a68 <HAL_GetTick>
 80013fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	0398      	lsls	r0, r3, #14
 8001404:	d4c8      	bmi.n	8001398 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001406:	f7ff fb2f 	bl	8000a68 <HAL_GetTick>
 800140a:	1b80      	subs	r0, r0, r6
 800140c:	2864      	cmp	r0, #100	; 0x64
 800140e:	d9f7      	bls.n	8001400 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001410:	2003      	movs	r0, #3
 8001412:	e7e7      	b.n	80013e4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001414:	b99b      	cbnz	r3, 800143e <HAL_RCC_OscConfig+0xb2>
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001424:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001426:	f7ff fb1f 	bl	8000a68 <HAL_GetTick>
 800142a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	0399      	lsls	r1, r3, #14
 8001430:	d5b2      	bpl.n	8001398 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001432:	f7ff fb19 	bl	8000a68 <HAL_GetTick>
 8001436:	1b80      	subs	r0, r0, r6
 8001438:	2864      	cmp	r0, #100	; 0x64
 800143a:	d9f7      	bls.n	800142c <HAL_RCC_OscConfig+0xa0>
 800143c:	e7e8      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	d103      	bne.n	800144e <HAL_RCC_OscConfig+0xc2>
 8001446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144a:	6023      	str	r3, [r4, #0]
 800144c:	e7d1      	b.n	80013f2 <HAL_RCC_OscConfig+0x66>
 800144e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001452:	6023      	str	r3, [r4, #0]
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145a:	e7cd      	b.n	80013f8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800145c:	4c67      	ldr	r4, [pc, #412]	; (80015fc <HAL_RCC_OscConfig+0x270>)
 800145e:	6863      	ldr	r3, [r4, #4]
 8001460:	f013 0f0c 	tst.w	r3, #12
 8001464:	d007      	beq.n	8001476 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001466:	6863      	ldr	r3, [r4, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b08      	cmp	r3, #8
 800146e:	d110      	bne.n	8001492 <HAL_RCC_OscConfig+0x106>
 8001470:	6863      	ldr	r3, [r4, #4]
 8001472:	03da      	lsls	r2, r3, #15
 8001474:	d40d      	bmi.n	8001492 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	079b      	lsls	r3, r3, #30
 800147a:	d502      	bpl.n	8001482 <HAL_RCC_OscConfig+0xf6>
 800147c:	692b      	ldr	r3, [r5, #16]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d1af      	bne.n	80013e2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	696a      	ldr	r2, [r5, #20]
 8001486:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800148a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800148e:	6023      	str	r3, [r4, #0]
 8001490:	e785      	b.n	800139e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001492:	692a      	ldr	r2, [r5, #16]
 8001494:	4b5a      	ldr	r3, [pc, #360]	; (8001600 <HAL_RCC_OscConfig+0x274>)
 8001496:	b16a      	cbz	r2, 80014b4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800149c:	f7ff fae4 	bl	8000a68 <HAL_GetTick>
 80014a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	079f      	lsls	r7, r3, #30
 80014a6:	d4ec      	bmi.n	8001482 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fade 	bl	8000a68 <HAL_GetTick>
 80014ac:	1b80      	subs	r0, r0, r6
 80014ae:	2802      	cmp	r0, #2
 80014b0:	d9f7      	bls.n	80014a2 <HAL_RCC_OscConfig+0x116>
 80014b2:	e7ad      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80014b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014b6:	f7ff fad7 	bl	8000a68 <HAL_GetTick>
 80014ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	0798      	lsls	r0, r3, #30
 80014c0:	f57f af6d 	bpl.w	800139e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fad0 	bl	8000a68 <HAL_GetTick>
 80014c8:	1b80      	subs	r0, r0, r6
 80014ca:	2802      	cmp	r0, #2
 80014cc:	d9f6      	bls.n	80014bc <HAL_RCC_OscConfig+0x130>
 80014ce:	e79f      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d0:	69aa      	ldr	r2, [r5, #24]
 80014d2:	4c4a      	ldr	r4, [pc, #296]	; (80015fc <HAL_RCC_OscConfig+0x270>)
 80014d4:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80014d6:	b1da      	cbz	r2, 8001510 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014dc:	f7ff fac4 	bl	8000a68 <HAL_GetTick>
 80014e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014e4:	079b      	lsls	r3, r3, #30
 80014e6:	d50d      	bpl.n	8001504 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014e8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80014f4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80014f6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80014f8:	9b01      	ldr	r3, [sp, #4]
 80014fa:	1e5a      	subs	r2, r3, #1
 80014fc:	9201      	str	r2, [sp, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f9      	bne.n	80014f6 <HAL_RCC_OscConfig+0x16a>
 8001502:	e750      	b.n	80013a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fab0 	bl	8000a68 <HAL_GetTick>
 8001508:	1b80      	subs	r0, r0, r6
 800150a:	2802      	cmp	r0, #2
 800150c:	d9e9      	bls.n	80014e2 <HAL_RCC_OscConfig+0x156>
 800150e:	e77f      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001510:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001512:	f7ff faa9 	bl	8000a68 <HAL_GetTick>
 8001516:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800151a:	079f      	lsls	r7, r3, #30
 800151c:	f57f af43 	bpl.w	80013a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff faa2 	bl	8000a68 <HAL_GetTick>
 8001524:	1b80      	subs	r0, r0, r6
 8001526:	2802      	cmp	r0, #2
 8001528:	d9f6      	bls.n	8001518 <HAL_RCC_OscConfig+0x18c>
 800152a:	e771      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152c:	4c33      	ldr	r4, [pc, #204]	; (80015fc <HAL_RCC_OscConfig+0x270>)
 800152e:	69e3      	ldr	r3, [r4, #28]
 8001530:	00d8      	lsls	r0, r3, #3
 8001532:	d424      	bmi.n	800157e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001534:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	69e3      	ldr	r3, [r4, #28]
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	61e3      	str	r3, [r4, #28]
 800153e:	69e3      	ldr	r3, [r4, #28]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	4e30      	ldr	r6, [pc, #192]	; (800160c <HAL_RCC_OscConfig+0x280>)
 800154a:	6833      	ldr	r3, [r6, #0]
 800154c:	05d9      	lsls	r1, r3, #23
 800154e:	d518      	bpl.n	8001582 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001550:	68eb      	ldr	r3, [r5, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d126      	bne.n	80015a4 <HAL_RCC_OscConfig+0x218>
 8001556:	6a23      	ldr	r3, [r4, #32]
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800155e:	f7ff fa83 	bl	8000a68 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001566:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	6a23      	ldr	r3, [r4, #32]
 800156a:	079b      	lsls	r3, r3, #30
 800156c:	d53f      	bpl.n	80015ee <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800156e:	2f00      	cmp	r7, #0
 8001570:	f43f af1d 	beq.w	80013ae <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001574:	69e3      	ldr	r3, [r4, #28]
 8001576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157a:	61e3      	str	r3, [r4, #28]
 800157c:	e717      	b.n	80013ae <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2700      	movs	r7, #0
 8001580:	e7e2      	b.n	8001548 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001582:	6833      	ldr	r3, [r6, #0]
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800158a:	f7ff fa6d 	bl	8000a68 <HAL_GetTick>
 800158e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	6833      	ldr	r3, [r6, #0]
 8001592:	05da      	lsls	r2, r3, #23
 8001594:	d4dc      	bmi.n	8001550 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001596:	f7ff fa67 	bl	8000a68 <HAL_GetTick>
 800159a:	eba0 0008 	sub.w	r0, r0, r8
 800159e:	2864      	cmp	r0, #100	; 0x64
 80015a0:	d9f6      	bls.n	8001590 <HAL_RCC_OscConfig+0x204>
 80015a2:	e735      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	b9ab      	cbnz	r3, 80015d2 <HAL_RCC_OscConfig+0x246>
 80015a6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6223      	str	r3, [r4, #32]
 80015b2:	6a23      	ldr	r3, [r4, #32]
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80015ba:	f7ff fa55 	bl	8000a68 <HAL_GetTick>
 80015be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	6a23      	ldr	r3, [r4, #32]
 80015c2:	0798      	lsls	r0, r3, #30
 80015c4:	d5d3      	bpl.n	800156e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fa4f 	bl	8000a68 <HAL_GetTick>
 80015ca:	1b80      	subs	r0, r0, r6
 80015cc:	4540      	cmp	r0, r8
 80015ce:	d9f7      	bls.n	80015c0 <HAL_RCC_OscConfig+0x234>
 80015d0:	e71e      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	6a23      	ldr	r3, [r4, #32]
 80015d6:	d103      	bne.n	80015e0 <HAL_RCC_OscConfig+0x254>
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6223      	str	r3, [r4, #32]
 80015de:	e7ba      	b.n	8001556 <HAL_RCC_OscConfig+0x1ca>
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6223      	str	r3, [r4, #32]
 80015e6:	6a23      	ldr	r3, [r4, #32]
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	e7b6      	b.n	800155c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff fa3b 	bl	8000a68 <HAL_GetTick>
 80015f2:	eba0 0008 	sub.w	r0, r0, r8
 80015f6:	42b0      	cmp	r0, r6
 80015f8:	d9b6      	bls.n	8001568 <HAL_RCC_OscConfig+0x1dc>
 80015fa:	e709      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
 80015fc:	40021000 	.word	0x40021000
 8001600:	42420000 	.word	0x42420000
 8001604:	42420480 	.word	0x42420480
 8001608:	2000004c 	.word	0x2000004c
 800160c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001610:	4c22      	ldr	r4, [pc, #136]	; (800169c <HAL_RCC_OscConfig+0x310>)
 8001612:	6863      	ldr	r3, [r4, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	f43f aee2 	beq.w	80013e2 <HAL_RCC_OscConfig+0x56>
 800161e:	2300      	movs	r3, #0
 8001620:	4e1f      	ldr	r6, [pc, #124]	; (80016a0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001622:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001624:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001626:	d12b      	bne.n	8001680 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001628:	f7ff fa1e 	bl	8000a68 <HAL_GetTick>
 800162c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	0199      	lsls	r1, r3, #6
 8001632:	d41f      	bmi.n	8001674 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001634:	6a2b      	ldr	r3, [r5, #32]
 8001636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800163c:	6862      	ldr	r2, [r4, #4]
 800163e:	68a9      	ldr	r1, [r5, #8]
 8001640:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001644:	430a      	orrs	r2, r1
 8001646:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001648:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800164a:	6862      	ldr	r2, [r4, #4]
 800164c:	430b      	orrs	r3, r1
 800164e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001652:	4313      	orrs	r3, r2
 8001654:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001656:	2301      	movs	r3, #1
 8001658:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800165a:	f7ff fa05 	bl	8000a68 <HAL_GetTick>
 800165e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	019a      	lsls	r2, r3, #6
 8001664:	f53f aea7 	bmi.w	80013b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f9fe 	bl	8000a68 <HAL_GetTick>
 800166c:	1b40      	subs	r0, r0, r5
 800166e:	2802      	cmp	r0, #2
 8001670:	d9f6      	bls.n	8001660 <HAL_RCC_OscConfig+0x2d4>
 8001672:	e6cd      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f9f8 	bl	8000a68 <HAL_GetTick>
 8001678:	1bc0      	subs	r0, r0, r7
 800167a:	2802      	cmp	r0, #2
 800167c:	d9d7      	bls.n	800162e <HAL_RCC_OscConfig+0x2a2>
 800167e:	e6c7      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001680:	f7ff f9f2 	bl	8000a68 <HAL_GetTick>
 8001684:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	019b      	lsls	r3, r3, #6
 800168a:	f57f ae94 	bpl.w	80013b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff f9eb 	bl	8000a68 <HAL_GetTick>
 8001692:	1b40      	subs	r0, r0, r5
 8001694:	2802      	cmp	r0, #2
 8001696:	d9f6      	bls.n	8001686 <HAL_RCC_OscConfig+0x2fa>
 8001698:	e6ba      	b.n	8001410 <HAL_RCC_OscConfig+0x84>
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	42420060 	.word	0x42420060

080016a4 <HAL_RCC_GetSysClockFreq>:
{
 80016a4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80016a8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016aa:	ac02      	add	r4, sp, #8
 80016ac:	f103 0510 	add.w	r5, r3, #16
 80016b0:	4622      	mov	r2, r4
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	3308      	adds	r3, #8
 80016b8:	c203      	stmia	r2!, {r0, r1}
 80016ba:	42ab      	cmp	r3, r5
 80016bc:	4614      	mov	r4, r2
 80016be:	d1f7      	bne.n	80016b0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016c0:	2301      	movs	r3, #1
 80016c2:	f88d 3004 	strb.w	r3, [sp, #4]
 80016c6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80016c8:	4911      	ldr	r1, [pc, #68]	; (8001710 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016ca:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80016ce:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80016d0:	f003 020c 	and.w	r2, r3, #12
 80016d4:	2a08      	cmp	r2, #8
 80016d6:	d117      	bne.n	8001708 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016d8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80016dc:	a806      	add	r0, sp, #24
 80016de:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016e2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e6:	d50c      	bpl.n	8001702 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016e8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016f0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016f2:	aa06      	add	r2, sp, #24
 80016f4:	4413      	add	r3, r2
 80016f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016fa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80016fe:	b007      	add	sp, #28
 8001700:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <HAL_RCC_GetSysClockFreq+0x74>)
 8001704:	4350      	muls	r0, r2
 8001706:	e7fa      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800170a:	e7f8      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x5a>
 800170c:	08003b34 	.word	0x08003b34
 8001710:	40021000 	.word	0x40021000
 8001714:	007a1200 	.word	0x007a1200
 8001718:	003d0900 	.word	0x003d0900

0800171c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800171c:	4a4d      	ldr	r2, [pc, #308]	; (8001854 <HAL_RCC_ClockConfig+0x138>)
{
 800171e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001722:	6813      	ldr	r3, [r2, #0]
{
 8001724:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	428b      	cmp	r3, r1
{
 800172c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800172e:	d328      	bcc.n	8001782 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	682a      	ldr	r2, [r5, #0]
 8001732:	0791      	lsls	r1, r2, #30
 8001734:	d432      	bmi.n	800179c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	07d2      	lsls	r2, r2, #31
 8001738:	d438      	bmi.n	80017ac <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800173a:	4a46      	ldr	r2, [pc, #280]	; (8001854 <HAL_RCC_ClockConfig+0x138>)
 800173c:	6813      	ldr	r3, [r2, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	429e      	cmp	r6, r3
 8001744:	d373      	bcc.n	800182e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001746:	682a      	ldr	r2, [r5, #0]
 8001748:	4c43      	ldr	r4, [pc, #268]	; (8001858 <HAL_RCC_ClockConfig+0x13c>)
 800174a:	f012 0f04 	tst.w	r2, #4
 800174e:	d179      	bne.n	8001844 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	0713      	lsls	r3, r2, #28
 8001752:	d506      	bpl.n	8001762 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001754:	6863      	ldr	r3, [r4, #4]
 8001756:	692a      	ldr	r2, [r5, #16]
 8001758:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800175c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001760:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001762:	f7ff ff9f 	bl	80016a4 <HAL_RCC_GetSysClockFreq>
 8001766:	6863      	ldr	r3, [r4, #4]
 8001768:	4a3c      	ldr	r2, [pc, #240]	; (800185c <HAL_RCC_ClockConfig+0x140>)
 800176a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	40d8      	lsrs	r0, r3
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_ClockConfig+0x144>)
 8001774:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff f934 	bl	80009e4 <HAL_InitTick>
  return HAL_OK;
 800177c:	2000      	movs	r0, #0
}
 800177e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f023 0307 	bic.w	r3, r3, #7
 8001788:	430b      	orrs	r3, r1
 800178a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800178c:	6813      	ldr	r3, [r2, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	4299      	cmp	r1, r3
 8001794:	d0cc      	beq.n	8001730 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001796:	2001      	movs	r0, #1
 8001798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	492e      	ldr	r1, [pc, #184]	; (8001858 <HAL_RCC_ClockConfig+0x13c>)
 800179e:	68a8      	ldr	r0, [r5, #8]
 80017a0:	684b      	ldr	r3, [r1, #4]
 80017a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017a6:	4303      	orrs	r3, r0
 80017a8:	604b      	str	r3, [r1, #4]
 80017aa:	e7c4      	b.n	8001736 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ac:	686a      	ldr	r2, [r5, #4]
 80017ae:	4c2a      	ldr	r4, [pc, #168]	; (8001858 <HAL_RCC_ClockConfig+0x13c>)
 80017b0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b4:	d11c      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	d0ec      	beq.n	8001796 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017bc:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017be:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80017ca:	f7ff f94d 	bl	8000a68 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80017d0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d114      	bne.n	8001800 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d6:	6863      	ldr	r3, [r4, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d0ac      	beq.n	800173a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7ff f942 	bl	8000a68 <HAL_GetTick>
 80017e4:	1bc0      	subs	r0, r0, r7
 80017e6:	4540      	cmp	r0, r8
 80017e8:	d9f5      	bls.n	80017d6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80017ea:	2003      	movs	r0, #3
 80017ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f0:	2a02      	cmp	r2, #2
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017f8:	e7df      	b.n	80017ba <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	f013 0f02 	tst.w	r3, #2
 80017fe:	e7dc      	b.n	80017ba <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001800:	2b02      	cmp	r3, #2
 8001802:	d10f      	bne.n	8001824 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001804:	6863      	ldr	r3, [r4, #4]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d095      	beq.n	800173a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180e:	f7ff f92b 	bl	8000a68 <HAL_GetTick>
 8001812:	1bc0      	subs	r0, r0, r7
 8001814:	4540      	cmp	r0, r8
 8001816:	d9f5      	bls.n	8001804 <HAL_RCC_ClockConfig+0xe8>
 8001818:	e7e7      	b.n	80017ea <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181a:	f7ff f925 	bl	8000a68 <HAL_GetTick>
 800181e:	1bc0      	subs	r0, r0, r7
 8001820:	4540      	cmp	r0, r8
 8001822:	d8e2      	bhi.n	80017ea <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001824:	6863      	ldr	r3, [r4, #4]
 8001826:	f013 0f0c 	tst.w	r3, #12
 800182a:	d1f6      	bne.n	800181a <HAL_RCC_ClockConfig+0xfe>
 800182c:	e785      	b.n	800173a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	f023 0307 	bic.w	r3, r3, #7
 8001834:	4333      	orrs	r3, r6
 8001836:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001838:	6813      	ldr	r3, [r2, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	429e      	cmp	r6, r3
 8001840:	d1a9      	bne.n	8001796 <HAL_RCC_ClockConfig+0x7a>
 8001842:	e780      	b.n	8001746 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	6863      	ldr	r3, [r4, #4]
 8001846:	68e9      	ldr	r1, [r5, #12]
 8001848:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800184c:	430b      	orrs	r3, r1
 800184e:	6063      	str	r3, [r4, #4]
 8001850:	e77e      	b.n	8001750 <HAL_RCC_ClockConfig+0x34>
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000
 8001858:	40021000 	.word	0x40021000
 800185c:	08003b78 	.word	0x08003b78
 8001860:	2000004c 	.word	0x2000004c

08001864 <HAL_RCC_GetHCLKFreq>:
}
 8001864:	4b01      	ldr	r3, [pc, #4]	; (800186c <HAL_RCC_GetHCLKFreq+0x8>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	2000004c 	.word	0x2000004c

08001870 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	4a03      	ldr	r2, [pc, #12]	; (800188c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800187e:	6810      	ldr	r0, [r2, #0]
}    
 8001880:	40d8      	lsrs	r0, r3
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000
 8001888:	08003b88 	.word	0x08003b88
 800188c:	2000004c 	.word	0x2000004c

08001890 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800189e:	6810      	ldr	r0, [r2, #0]
} 
 80018a0:	40d8      	lsrs	r0, r3
 80018a2:	4770      	bx	lr
 80018a4:	40021000 	.word	0x40021000
 80018a8:	08003b88 	.word	0x08003b88
 80018ac:	2000004c 	.word	0x2000004c

080018b0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018b0:	6803      	ldr	r3, [r0, #0]
{
 80018b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018b6:	07d9      	lsls	r1, r3, #31
{
 80018b8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018ba:	d520      	bpl.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018bc:	4c35      	ldr	r4, [pc, #212]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80018be:	69e3      	ldr	r3, [r4, #28]
 80018c0:	00da      	lsls	r2, r3, #3
 80018c2:	d432      	bmi.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80018c4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	69e3      	ldr	r3, [r4, #28]
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61e3      	str	r3, [r4, #28]
 80018ce:	69e3      	ldr	r3, [r4, #28]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4e2f      	ldr	r6, [pc, #188]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80018da:	6833      	ldr	r3, [r6, #0]
 80018dc:	05db      	lsls	r3, r3, #23
 80018de:	d526      	bpl.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018e0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018e2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018e6:	d136      	bne.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80018e8:	6a23      	ldr	r3, [r4, #32]
 80018ea:	686a      	ldr	r2, [r5, #4]
 80018ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018f0:	4313      	orrs	r3, r2
 80018f2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018f4:	b11f      	cbz	r7, 80018fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	69e3      	ldr	r3, [r4, #28]
 80018f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018fe:	6828      	ldr	r0, [r5, #0]
 8001900:	0783      	lsls	r3, r0, #30
 8001902:	d506      	bpl.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001904:	4a23      	ldr	r2, [pc, #140]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001906:	68a9      	ldr	r1, [r5, #8]
 8001908:	6853      	ldr	r3, [r2, #4]
 800190a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800190e:	430b      	orrs	r3, r1
 8001910:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001912:	f010 0010 	ands.w	r0, r0, #16
 8001916:	d01b      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001918:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800191a:	68e9      	ldr	r1, [r5, #12]
 800191c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800191e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001920:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001924:	430b      	orrs	r3, r1
 8001926:	6053      	str	r3, [r2, #4]
 8001928:	e012      	b.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2700      	movs	r7, #0
 800192c:	e7d4      	b.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192e:	6833      	ldr	r3, [r6, #0]
 8001930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001934:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001936:	f7ff f897 	bl	8000a68 <HAL_GetTick>
 800193a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	6833      	ldr	r3, [r6, #0]
 800193e:	05d8      	lsls	r0, r3, #23
 8001940:	d4ce      	bmi.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff f891 	bl	8000a68 <HAL_GetTick>
 8001946:	eba0 0008 	sub.w	r0, r0, r8
 800194a:	2864      	cmp	r0, #100	; 0x64
 800194c:	d9f6      	bls.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800194e:	2003      	movs	r0, #3
}
 8001950:	b002      	add	sp, #8
 8001952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001956:	686a      	ldr	r2, [r5, #4]
 8001958:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800195c:	4293      	cmp	r3, r2
 800195e:	d0c3      	beq.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001960:	2001      	movs	r0, #1
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001964:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001966:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001968:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800196a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800196e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001970:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001972:	07d9      	lsls	r1, r3, #31
 8001974:	d5b8      	bpl.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001976:	f7ff f877 	bl	8000a68 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800197e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001980:	6a23      	ldr	r3, [r4, #32]
 8001982:	079a      	lsls	r2, r3, #30
 8001984:	d4b0      	bmi.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff f86f 	bl	8000a68 <HAL_GetTick>
 800198a:	1b80      	subs	r0, r0, r6
 800198c:	4540      	cmp	r0, r8
 800198e:	d9f7      	bls.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001990:	e7dd      	b.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
 800199c:	42420440 	.word	0x42420440

080019a0 <HAL_SPI_ErrorCallback>:
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 80019a4:	6803      	ldr	r3, [r0, #0]
{
 80019a6:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80019a8:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80019aa:	689a      	ldr	r2, [r3, #8]
{
 80019ac:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80019ae:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80019b2:	2d01      	cmp	r5, #1
{
 80019b4:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80019b6:	d105      	bne.n	80019c4 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80019b8:	064d      	lsls	r5, r1, #25
 80019ba:	d503      	bpl.n	80019c4 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 80019bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 80019be:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 80019c0:	b005      	add	sp, #20
 80019c2:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80019c4:	0790      	lsls	r0, r2, #30
 80019c6:	d504      	bpl.n	80019d2 <HAL_SPI_IRQHandler+0x2e>
 80019c8:	060d      	lsls	r5, r1, #24
 80019ca:	d502      	bpl.n	80019d2 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 80019cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019ce:	4620      	mov	r0, r4
 80019d0:	e7f5      	b.n	80019be <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80019d2:	f012 0f60 	tst.w	r2, #96	; 0x60
 80019d6:	d0f3      	beq.n	80019c0 <HAL_SPI_IRQHandler+0x1c>
 80019d8:	0688      	lsls	r0, r1, #26
 80019da:	d5f1      	bpl.n	80019c0 <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 80019dc:	0655      	lsls	r5, r2, #25
 80019de:	d50e      	bpl.n	80019fe <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 80019e0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80019e4:	2500      	movs	r5, #0
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d036      	beq.n	8001a58 <HAL_SPI_IRQHandler+0xb4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80019ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019ec:	f040 0004 	orr.w	r0, r0, #4
 80019f0:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019f2:	9501      	str	r5, [sp, #4]
 80019f4:	68d8      	ldr	r0, [r3, #12]
 80019f6:	9001      	str	r0, [sp, #4]
 80019f8:	6898      	ldr	r0, [r3, #8]
 80019fa:	9001      	str	r0, [sp, #4]
 80019fc:	9801      	ldr	r0, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 80019fe:	0690      	lsls	r0, r2, #26
 8001a00:	d50c      	bpl.n	8001a1c <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001a02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	9203      	str	r2, [sp, #12]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	9203      	str	r2, [sp, #12]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a1c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	d0ce      	beq.n	80019c0 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a28:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001a30:	078a      	lsls	r2, r1, #30
 8001a32:	d018      	beq.n	8001a66 <HAL_SPI_IRQHandler+0xc2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001a34:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8001a36:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001a38:	f022 0203 	bic.w	r2, r2, #3
 8001a3c:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8001a3e:	b118      	cbz	r0, 8001a48 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_SPI_IRQHandler+0xcc>)
 8001a42:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001a44:	f7ff faf0 	bl	8001028 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8001a48:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d0b8      	beq.n	80019c0 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_SPI_IRQHandler+0xcc>)
 8001a50:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001a52:	f7ff fae9 	bl	8001028 <HAL_DMA_Abort_IT>
 8001a56:	e7b3      	b.n	80019c0 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a58:	9502      	str	r5, [sp, #8]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	9202      	str	r2, [sp, #8]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	9b02      	ldr	r3, [sp, #8]
        return;
 8001a64:	e7ac      	b.n	80019c0 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff ff9a 	bl	80019a0 <HAL_SPI_ErrorCallback>
 8001a6c:	e7a8      	b.n	80019c0 <HAL_SPI_IRQHandler+0x1c>
 8001a6e:	bf00      	nop
 8001a70:	08001a75 	.word	0x08001a75

08001a74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a74:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hspi->RxXferCount = 0U;
 8001a76:	2300      	movs	r3, #0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a78:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8001a7a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001a7c:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8001a7e:	f7ff ff8f 	bl	80019a0 <HAL_SPI_ErrorCallback>
 8001a82:	bd08      	pop	{r3, pc}

08001a84 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a84:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001a86:	4604      	mov	r4, r0
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d034      	beq.n	8001af6 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001a90:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001a94:	b90b      	cbnz	r3, 8001a9a <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a96:	f001 fd19 	bl	80034cc <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a9a:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a9c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001aa2:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001aa4:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aaa:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001aac:	6863      	ldr	r3, [r4, #4]
 8001aae:	69a2      	ldr	r2, [r4, #24]
 8001ab0:	4303      	orrs	r3, r0
 8001ab2:	68e0      	ldr	r0, [r4, #12]
 8001ab4:	4303      	orrs	r3, r0
 8001ab6:	6920      	ldr	r0, [r4, #16]
 8001ab8:	4303      	orrs	r3, r0
 8001aba:	6960      	ldr	r0, [r4, #20]
 8001abc:	4303      	orrs	r3, r0
 8001abe:	69e0      	ldr	r0, [r4, #28]
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	6a20      	ldr	r0, [r4, #32]
 8001ac4:	4303      	orrs	r3, r0
 8001ac6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ac8:	4303      	orrs	r3, r0
 8001aca:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ad2:	0c12      	lsrs	r2, r2, #16
 8001ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ad6:	f002 0204 	and.w	r2, r2, #4
 8001ada:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001adc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ade:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001ae0:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ae2:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ae4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aea:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001aec:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001aee:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001af0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001af4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
}
 8001af8:	bd10      	pop	{r4, pc}

08001afa <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001afa:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001afc:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001afe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001b02:	6813      	ldr	r3, [r2, #0]
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6013      	str	r3, [r2, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001b10:	2000      	movs	r0, #0
 8001b12:	4770      	bx	lr

08001b14 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b14:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b16:	f241 1211 	movw	r2, #4369	; 0x1111
  htim->State= HAL_TIM_STATE_BUSY;
 8001b1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8001b1e:	6803      	ldr	r3, [r0, #0]
 8001b20:	6a19      	ldr	r1, [r3, #32]
 8001b22:	4211      	tst	r1, r2
 8001b24:	d108      	bne.n	8001b38 <HAL_TIM_Base_Stop+0x24>
 8001b26:	f240 4244 	movw	r2, #1092	; 0x444
 8001b2a:	6a19      	ldr	r1, [r3, #32]
 8001b2c:	4211      	tst	r1, r2
 8001b2e:	bf02      	ittt	eq
 8001b30:	681a      	ldreq	r2, [r3, #0]
 8001b32:	f022 0201 	biceq.w	r2, r2, #1
 8001b36:	601a      	streq	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001b3e:	2000      	movs	r0, #0
 8001b40:	4770      	bx	lr

08001b42 <HAL_TIM_IC_MspInit>:
 8001b42:	4770      	bx	lr

08001b44 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001b48:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	f04f 0302 	mov.w	r3, #2
 8001b50:	d01c      	beq.n	8001b8c <HAL_TIM_ConfigClockSource+0x48>
 8001b52:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b58:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001b5a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001b5e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b60:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001b64:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001b68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b6a:	680a      	ldr	r2, [r1, #0]
 8001b6c:	2a40      	cmp	r2, #64	; 0x40
 8001b6e:	d079      	beq.n	8001c64 <HAL_TIM_ConfigClockSource+0x120>
 8001b70:	d819      	bhi.n	8001ba6 <HAL_TIM_ConfigClockSource+0x62>
 8001b72:	2a10      	cmp	r2, #16
 8001b74:	f000 8093 	beq.w	8001c9e <HAL_TIM_ConfigClockSource+0x15a>
 8001b78:	d80a      	bhi.n	8001b90 <HAL_TIM_ConfigClockSource+0x4c>
 8001b7a:	2a00      	cmp	r2, #0
 8001b7c:	f000 8089 	beq.w	8001c92 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b86:	2300      	movs	r3, #0
 8001b88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001b8c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001b90:	2a20      	cmp	r2, #32
 8001b92:	f000 808a 	beq.w	8001caa <HAL_TIM_ConfigClockSource+0x166>
 8001b96:	2a30      	cmp	r2, #48	; 0x30
 8001b98:	d1f2      	bne.n	8001b80 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001b9a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ba0:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001ba4:	e036      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001ba6:	2a70      	cmp	r2, #112	; 0x70
 8001ba8:	d036      	beq.n	8001c18 <HAL_TIM_ConfigClockSource+0xd4>
 8001baa:	d81b      	bhi.n	8001be4 <HAL_TIM_ConfigClockSource+0xa0>
 8001bac:	2a50      	cmp	r2, #80	; 0x50
 8001bae:	d042      	beq.n	8001c36 <HAL_TIM_ConfigClockSource+0xf2>
 8001bb0:	2a60      	cmp	r2, #96	; 0x60
 8001bb2:	d1e5      	bne.n	8001b80 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bb4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bb6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bb8:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bbc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bbe:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bc0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001bc2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bc4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001bcc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bd0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001bd4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bd6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001bd8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001bda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001bde:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001be2:	e017      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001be4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001be8:	d011      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0xca>
 8001bea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001bee:	d1c7      	bne.n	8001b80 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bf0:	688a      	ldr	r2, [r1, #8]
 8001bf2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001bf4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bf6:	68c9      	ldr	r1, [r1, #12]
 8001bf8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bfa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c02:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c04:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c0c:	e002      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	e7b3      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c18:	688a      	ldr	r2, [r1, #8]
 8001c1a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001c1c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c1e:	68c9      	ldr	r1, [r1, #12]
 8001c20:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c22:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c2a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001c2c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001c2e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c30:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001c34:	e7ee      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c36:	684c      	ldr	r4, [r1, #4]
 8001c38:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c3a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c3c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c3e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c42:	f025 0501 	bic.w	r5, r5, #1
 8001c46:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c48:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001c4a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c50:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c56:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001c58:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c5e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001c62:	e7d7      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c64:	684c      	ldr	r4, [r1, #4]
 8001c66:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c68:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c6a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c6c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c70:	f025 0501 	bic.w	r5, r5, #1
 8001c74:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c76:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001c78:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c7e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c84:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001c86:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c8c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001c90:	e7c0      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001c92:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c98:	f042 0207 	orr.w	r2, r2, #7
 8001c9c:	e7ba      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001c9e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ca0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ca4:	f042 0217 	orr.w	r2, r2, #23
 8001ca8:	e7b4      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001caa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cb0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001cb4:	e7ae      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0xd0>

08001cb6 <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 8001cb6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d01c      	beq.n	8001cf8 <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 8001cbe:	290c      	cmp	r1, #12
 8001cc0:	d818      	bhi.n	8001cf4 <HAL_TIM_ReadCapturedValue+0x3e>
 8001cc2:	e8df f001 	tbb	[pc, r1]
 8001cc6:	1707      	.short	0x1707
 8001cc8:	170e1717 	.word	0x170e1717
 8001ccc:	17111717 	.word	0x17111717
 8001cd0:	1717      	.short	0x1717
 8001cd2:	14          	.byte	0x14
 8001cd3:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8001cd4:	6803      	ldr	r3, [r0, #0]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8001ce2:	6803      	ldr	r3, [r0, #0]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 8001ce6:	e7f7      	b.n	8001cd8 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR3;
 8001ce8:	6803      	ldr	r3, [r0, #0]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 8001cec:	e7f4      	b.n	8001cd8 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR4;
 8001cee:	6803      	ldr	r3, [r0, #0]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 8001cf2:	e7f1      	b.n	8001cd8 <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e7ef      	b.n	8001cd8 <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e7f0      	b.n	8001cde <HAL_TIM_ReadCapturedValue+0x28>

08001cfc <HAL_TIM_OC_DelayElapsedCallback>:
 8001cfc:	4770      	bx	lr

08001cfe <HAL_TIM_PWM_PulseFinishedCallback>:
 8001cfe:	4770      	bx	lr

08001d00 <HAL_TIM_TriggerCallback>:
 8001d00:	4770      	bx	lr

08001d02 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d02:	6803      	ldr	r3, [r0, #0]
{
 8001d04:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d06:	691a      	ldr	r2, [r3, #16]
{
 8001d08:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d0a:	0791      	lsls	r1, r2, #30
 8001d0c:	d50e      	bpl.n	8001d2c <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	0792      	lsls	r2, r2, #30
 8001d12:	d50b      	bpl.n	8001d2c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d14:	f06f 0202 	mvn.w	r2, #2
 8001d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d1c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d20:	079b      	lsls	r3, r3, #30
 8001d22:	d077      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001d24:	f001 f854 	bl	8002dd0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	0750      	lsls	r0, r2, #29
 8001d32:	d510      	bpl.n	8001d56 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	0751      	lsls	r1, r2, #29
 8001d38:	d50d      	bpl.n	8001d56 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d3a:	f06f 0204 	mvn.w	r2, #4
 8001d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d40:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d42:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d44:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d46:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d4c:	d068      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	f001 f83f 	bl	8002dd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	2300      	movs	r3, #0
 8001d54:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	0712      	lsls	r2, r2, #28
 8001d5c:	d50f      	bpl.n	8001d7e <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	0710      	lsls	r0, r2, #28
 8001d62:	d50c      	bpl.n	8001d7e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d64:	f06f 0208 	mvn.w	r2, #8
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d6a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d6c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d6e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d70:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d74:	d05a      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	f001 f82b 	bl	8002dd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	06d2      	lsls	r2, r2, #27
 8001d84:	d510      	bpl.n	8001da8 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	06d0      	lsls	r0, r2, #27
 8001d8a:	d50d      	bpl.n	8001da8 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d8c:	f06f 0210 	mvn.w	r2, #16
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d92:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d94:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d96:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d98:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d9e:	d04b      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001da0:	f001 f816 	bl	8002dd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da4:	2300      	movs	r3, #0
 8001da6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	07d1      	lsls	r1, r2, #31
 8001dae:	d508      	bpl.n	8001dc2 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	07d2      	lsls	r2, r2, #31
 8001db4:	d505      	bpl.n	8001dc2 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dbe:	f000 fff1 	bl	8002da4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	0610      	lsls	r0, r2, #24
 8001dc8:	d508      	bpl.n	8001ddc <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	0611      	lsls	r1, r2, #24
 8001dce:	d505      	bpl.n	8001ddc <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001dd4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001dd8:	f000 f9e5 	bl	80021a6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	0652      	lsls	r2, r2, #25
 8001de2:	d508      	bpl.n	8001df6 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	0650      	lsls	r0, r2, #25
 8001de8:	d505      	bpl.n	8001df6 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dea:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001dee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001df0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001df2:	f7ff ff85 	bl	8001d00 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	0691      	lsls	r1, r2, #26
 8001dfc:	d522      	bpl.n	8001e44 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	0692      	lsls	r2, r2, #26
 8001e02:	d51f      	bpl.n	8001e44 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e04:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001e08:	4620      	mov	r0, r4
}
 8001e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001e10:	f000 b9c8 	b.w	80021a4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e14:	f7ff ff72 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f7ff ff70 	bl	8001cfe <HAL_TIM_PWM_PulseFinishedCallback>
 8001e1e:	e783      	b.n	8001d28 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e20:	f7ff ff6c 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff ff6a 	bl	8001cfe <HAL_TIM_PWM_PulseFinishedCallback>
 8001e2a:	e792      	b.n	8001d52 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2c:	f7ff ff66 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	4620      	mov	r0, r4
 8001e32:	f7ff ff64 	bl	8001cfe <HAL_TIM_PWM_PulseFinishedCallback>
 8001e36:	e7a0      	b.n	8001d7a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e38:	f7ff ff60 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff ff5e 	bl	8001cfe <HAL_TIM_PWM_PulseFinishedCallback>
 8001e42:	e7af      	b.n	8001da4 <HAL_TIM_IRQHandler+0xa2>
 8001e44:	bd10      	pop	{r4, pc}
	...

08001e48 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e48:	4a1a      	ldr	r2, [pc, #104]	; (8001eb4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001e4a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e4c:	4290      	cmp	r0, r2
 8001e4e:	d00a      	beq.n	8001e66 <TIM_Base_SetConfig+0x1e>
 8001e50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e54:	d007      	beq.n	8001e66 <TIM_Base_SetConfig+0x1e>
 8001e56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	d003      	beq.n	8001e66 <TIM_Base_SetConfig+0x1e>
 8001e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e62:	4290      	cmp	r0, r2
 8001e64:	d115      	bne.n	8001e92 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001e66:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e6c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <TIM_Base_SetConfig+0x6c>)
 8001e70:	4290      	cmp	r0, r2
 8001e72:	d00a      	beq.n	8001e8a <TIM_Base_SetConfig+0x42>
 8001e74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e78:	d007      	beq.n	8001e8a <TIM_Base_SetConfig+0x42>
 8001e7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e7e:	4290      	cmp	r0, r2
 8001e80:	d003      	beq.n	8001e8a <TIM_Base_SetConfig+0x42>
 8001e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e86:	4290      	cmp	r0, r2
 8001e88:	d103      	bne.n	8001e92 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e90:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e92:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e98:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e9a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e9c:	688b      	ldr	r3, [r1, #8]
 8001e9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ea0:	680b      	ldr	r3, [r1, #0]
 8001ea2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <TIM_Base_SetConfig+0x6c>)
 8001ea6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea8:	bf04      	itt	eq
 8001eaa:	690b      	ldreq	r3, [r1, #16]
 8001eac:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	6143      	str	r3, [r0, #20]
 8001eb2:	4770      	bx	lr
 8001eb4:	40012c00 	.word	0x40012c00

08001eb8 <HAL_TIM_Base_Init>:
{
 8001eb8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001eba:	4604      	mov	r4, r0
 8001ebc:	b1a0      	cbz	r0, 8001ee8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ebe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ec2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ec6:	b91b      	cbnz	r3, 8001ed0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ec8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ecc:	f001 fb66 	bl	800359c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ed0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001ed4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed8:	1d21      	adds	r1, r4, #4
 8001eda:	f7ff ffb5 	bl	8001e48 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ede:	2301      	movs	r3, #1
  return HAL_OK;
 8001ee0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001ee2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ee6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
}
 8001eea:	bd10      	pop	{r4, pc}

08001eec <HAL_TIM_IC_Init>:
{
 8001eec:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001eee:	4604      	mov	r4, r0
 8001ef0:	b1a0      	cbz	r0, 8001f1c <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ef2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ef6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001efa:	b91b      	cbnz	r3, 8001f04 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001efc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001f00:	f7ff fe1f 	bl	8001b42 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001f04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f06:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001f08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f0c:	1d21      	adds	r1, r4, #4
 8001f0e:	f7ff ff9b 	bl	8001e48 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001f12:	2301      	movs	r3, #1
  return HAL_OK;
 8001f14:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001f1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f1c:	2001      	movs	r0, #1
}
 8001f1e:	bd10      	pop	{r4, pc}

08001f20 <TIM_TI1_SetConfig>:
{
 8001f20:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f22:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f24:	4e12      	ldr	r6, [pc, #72]	; (8001f70 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f26:	f024 0401 	bic.w	r4, r4, #1
 8001f2a:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f2c:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001f2e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f30:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f32:	d00a      	beq.n	8001f4a <TIM_TI1_SetConfig+0x2a>
 8001f34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f38:	d007      	beq.n	8001f4a <TIM_TI1_SetConfig+0x2a>
 8001f3a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001f3e:	42b0      	cmp	r0, r6
 8001f40:	d003      	beq.n	8001f4a <TIM_TI1_SetConfig+0x2a>
 8001f42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f46:	42b0      	cmp	r0, r6
 8001f48:	d10f      	bne.n	8001f6a <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001f4a:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001f4e:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001f50:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001f56:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f58:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f5c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001f60:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f62:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001f64:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f66:	6201      	str	r1, [r0, #32]
}
 8001f68:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001f6a:	f044 0201 	orr.w	r2, r4, #1
 8001f6e:	e7ef      	b.n	8001f50 <TIM_TI1_SetConfig+0x30>
 8001f70:	40012c00 	.word	0x40012c00

08001f74 <HAL_TIM_IC_ConfigChannel>:
{
 8001f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001f76:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f7a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f7c:	2b01      	cmp	r3, #1
{
 8001f7e:	460d      	mov	r5, r1
 8001f80:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001f84:	d019      	beq.n	8001fba <HAL_TIM_IC_ConfigChannel+0x46>
 8001f86:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f88:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001f8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8001f90:	b9a2      	cbnz	r2, 8001fbc <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001f92:	68cb      	ldr	r3, [r1, #12]
 8001f94:	6820      	ldr	r0, [r4, #0]
 8001f96:	c906      	ldmia	r1, {r1, r2}
 8001f98:	f7ff ffc2 	bl	8001f20 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f9c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f9e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	f022 020c 	bic.w	r2, r2, #12
 8001fa6:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001fae:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001fb0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001fb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001fb6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001fbc:	2a04      	cmp	r2, #4
 8001fbe:	688e      	ldr	r6, [r1, #8]
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	c982      	ldmia	r1, {r1, r7}
 8001fc4:	68e8      	ldr	r0, [r5, #12]
 8001fc6:	d11f      	bne.n	8002008 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001fca:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fcc:	f022 0210 	bic.w	r2, r2, #16
 8001fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd2:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001fd4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001fd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001fda:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001fde:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001fe4:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001fe6:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001fe8:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fec:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001ff0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8001ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff4:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ffc:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002004:	619e      	str	r6, [r3, #24]
 8002006:	e7d2      	b.n	8001fae <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002008:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800200a:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 800200c:	d11c      	bne.n	8002048 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800200e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002012:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002014:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002016:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002018:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 800201c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 800201e:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002020:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002022:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002026:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002028:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800202a:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800202e:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002032:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8002034:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002036:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	f022 020c 	bic.w	r2, r2, #12
 800203e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002044:	61de      	str	r6, [r3, #28]
 8002046:	e7b2      	b.n	8001fae <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002048:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800204c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800204e:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002050:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002052:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8002056:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002058:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800205c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002060:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002062:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002064:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002066:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 800206a:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800206e:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002070:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002072:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800207a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002082:	e7df      	b.n	8002044 <HAL_TIM_IC_ConfigChannel+0xd0>

08002084 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002084:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002086:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002088:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800208a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800208c:	ea23 0304 	bic.w	r3, r3, r4
 8002090:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002092:	6a03      	ldr	r3, [r0, #32]
 8002094:	408a      	lsls	r2, r1
 8002096:	431a      	orrs	r2, r3
 8002098:	6202      	str	r2, [r0, #32]
 800209a:	bd10      	pop	{r4, pc}

0800209c <HAL_TIM_IC_Start_IT>:
{
 800209c:	b510      	push	{r4, lr}
 800209e:	4604      	mov	r4, r0
  switch (Channel)
 80020a0:	290c      	cmp	r1, #12
 80020a2:	d80d      	bhi.n	80020c0 <HAL_TIM_IC_Start_IT+0x24>
 80020a4:	e8df f001 	tbb	[pc, r1]
 80020a8:	0c0c0c07 	.word	0x0c0c0c07
 80020ac:	0c0c0c17 	.word	0x0c0c0c17
 80020b0:	0c0c0c1c 	.word	0x0c0c0c1c
 80020b4:	21          	.byte	0x21
 80020b5:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020b6:	6802      	ldr	r2, [r0, #0]
 80020b8:	68d3      	ldr	r3, [r2, #12]
 80020ba:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020be:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f7ff ffde 	bl	8002084 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80020c8:	6822      	ldr	r2, [r4, #0]
}
 80020ca:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020d6:	6802      	ldr	r2, [r0, #0]
 80020d8:	68d3      	ldr	r3, [r2, #12]
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	e7ee      	b.n	80020be <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80020e0:	6802      	ldr	r2, [r0, #0]
 80020e2:	68d3      	ldr	r3, [r2, #12]
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	e7e9      	b.n	80020be <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020ea:	6802      	ldr	r2, [r0, #0]
 80020ec:	68d3      	ldr	r3, [r2, #12]
 80020ee:	f043 0310 	orr.w	r3, r3, #16
 80020f2:	e7e4      	b.n	80020be <HAL_TIM_IC_Start_IT+0x22>

080020f4 <HAL_TIM_IC_Stop_IT>:
{
 80020f4:	b510      	push	{r4, lr}
 80020f6:	4604      	mov	r4, r0
  switch (Channel)
 80020f8:	290c      	cmp	r1, #12
 80020fa:	d80d      	bhi.n	8002118 <HAL_TIM_IC_Stop_IT+0x24>
 80020fc:	e8df f001 	tbb	[pc, r1]
 8002100:	0c0c0c07 	.word	0x0c0c0c07
 8002104:	0c0c0c21 	.word	0x0c0c0c21
 8002108:	0c0c0c26 	.word	0x0c0c0c26
 800210c:	2b          	.byte	0x2b
 800210d:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800210e:	6802      	ldr	r2, [r0, #0]
 8002110:	68d3      	ldr	r3, [r2, #12]
 8002112:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002116:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002118:	2200      	movs	r2, #0
 800211a:	6820      	ldr	r0, [r4, #0]
 800211c:	f7ff ffb2 	bl	8002084 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8002120:	f241 1211 	movw	r2, #4369	; 0x1111
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	6a19      	ldr	r1, [r3, #32]
 8002128:	4211      	tst	r1, r2
 800212a:	d108      	bne.n	800213e <HAL_TIM_IC_Stop_IT+0x4a>
 800212c:	f240 4244 	movw	r2, #1092	; 0x444
 8002130:	6a19      	ldr	r1, [r3, #32]
 8002132:	4211      	tst	r1, r2
 8002134:	bf02      	ittt	eq
 8002136:	681a      	ldreq	r2, [r3, #0]
 8002138:	f022 0201 	biceq.w	r2, r2, #1
 800213c:	601a      	streq	r2, [r3, #0]
}
 800213e:	2000      	movs	r0, #0
 8002140:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002142:	6802      	ldr	r2, [r0, #0]
 8002144:	68d3      	ldr	r3, [r2, #12]
 8002146:	f023 0304 	bic.w	r3, r3, #4
 800214a:	e7e4      	b.n	8002116 <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800214c:	6802      	ldr	r2, [r0, #0]
 800214e:	68d3      	ldr	r3, [r2, #12]
 8002150:	f023 0308 	bic.w	r3, r3, #8
 8002154:	e7df      	b.n	8002116 <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002156:	6802      	ldr	r2, [r0, #0]
 8002158:	68d3      	ldr	r3, [r2, #12]
 800215a:	f023 0310 	bic.w	r3, r3, #16
 800215e:	e7da      	b.n	8002116 <HAL_TIM_IC_Stop_IT+0x22>

08002160 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002160:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002164:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002166:	2b01      	cmp	r3, #1
 8002168:	f04f 0302 	mov.w	r3, #2
 800216c:	d018      	beq.n	80021a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800216e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002172:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002174:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002176:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002178:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800217a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800217e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4322      	orrs	r2, r4
 8002184:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800218c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	430a      	orrs	r2, r1
 8002192:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002194:	2301      	movs	r3, #1
 8002196:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800219a:	2300      	movs	r3, #0
 800219c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80021a0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80021a2:	bd10      	pop	{r4, pc}

080021a4 <HAL_TIMEx_CommutationCallback>:
 80021a4:	4770      	bx	lr

080021a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a6:	4770      	bx	lr

080021a8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021a8:	6803      	ldr	r3, [r0, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021ba:	2320      	movs	r3, #32
 80021bc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80021c0:	4770      	bx	lr
	...

080021c4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021c8:	6805      	ldr	r5, [r0, #0]
 80021ca:	68c2      	ldr	r2, [r0, #12]
 80021cc:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ce:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021d4:	4313      	orrs	r3, r2
 80021d6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021d8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80021da:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021dc:	430b      	orrs	r3, r1
 80021de:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80021e0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80021e4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021e8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021ee:	696b      	ldr	r3, [r5, #20]
 80021f0:	6982      	ldr	r2, [r0, #24]
 80021f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f6:	4313      	orrs	r3, r2
 80021f8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80021fa:	4b40      	ldr	r3, [pc, #256]	; (80022fc <UART_SetConfig+0x138>)
{
 80021fc:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80021fe:	429d      	cmp	r5, r3
 8002200:	f04f 0419 	mov.w	r4, #25
 8002204:	d146      	bne.n	8002294 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002206:	f7ff fb43 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
 800220a:	fb04 f300 	mul.w	r3, r4, r0
 800220e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002212:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002216:	00b6      	lsls	r6, r6, #2
 8002218:	fbb3 f3f6 	udiv	r3, r3, r6
 800221c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002220:	011e      	lsls	r6, r3, #4
 8002222:	f7ff fb35 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
 8002226:	4360      	muls	r0, r4
 8002228:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002232:	f7ff fb2d 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
 8002236:	4360      	muls	r0, r4
 8002238:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002242:	fbb3 f3f8 	udiv	r3, r3, r8
 8002246:	fb08 7313 	mls	r3, r8, r3, r7
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	3332      	adds	r3, #50	; 0x32
 800224e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002252:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002256:	f7ff fb1b 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
 800225a:	4360      	muls	r0, r4
 800225c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	fbb0 faf2 	udiv	sl, r0, r2
 8002266:	f7ff fb13 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800226a:	4360      	muls	r0, r4
 800226c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fbb0 f3f3 	udiv	r3, r0, r3
 8002276:	fbb3 f3f8 	udiv	r3, r3, r8
 800227a:	fb08 a313 	mls	r3, r8, r3, sl
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	3332      	adds	r3, #50	; 0x32
 8002282:	fbb3 f3f8 	udiv	r3, r3, r8
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	433b      	orrs	r3, r7
 800228c:	4433      	add	r3, r6
 800228e:	60ab      	str	r3, [r5, #8]
 8002290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002294:	f7ff faec 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 8002298:	fb04 f300 	mul.w	r3, r4, r0
 800229c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80022a0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80022a4:	00b6      	lsls	r6, r6, #2
 80022a6:	fbb3 f3f6 	udiv	r3, r3, r6
 80022aa:	fbb3 f3f8 	udiv	r3, r3, r8
 80022ae:	011e      	lsls	r6, r3, #4
 80022b0:	f7ff fade 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 80022b4:	4360      	muls	r0, r4
 80022b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fbb0 f7f3 	udiv	r7, r0, r3
 80022c0:	f7ff fad6 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 80022c4:	4360      	muls	r0, r4
 80022c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d0:	fbb3 f3f8 	udiv	r3, r3, r8
 80022d4:	fb08 7313 	mls	r3, r8, r3, r7
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	3332      	adds	r3, #50	; 0x32
 80022dc:	fbb3 f3f8 	udiv	r3, r3, r8
 80022e0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80022e4:	f7ff fac4 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 80022e8:	4360      	muls	r0, r4
 80022ea:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	fbb0 faf2 	udiv	sl, r0, r2
 80022f4:	f7ff fabc 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 80022f8:	e7b7      	b.n	800226a <UART_SetConfig+0xa6>
 80022fa:	bf00      	nop
 80022fc:	40013800 	.word	0x40013800

08002300 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	4604      	mov	r4, r0
 8002304:	460e      	mov	r6, r1
 8002306:	4617      	mov	r7, r2
 8002308:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800230a:	6821      	ldr	r1, [r4, #0]
 800230c:	680b      	ldr	r3, [r1, #0]
 800230e:	ea36 0303 	bics.w	r3, r6, r3
 8002312:	d101      	bne.n	8002318 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002314:	2000      	movs	r0, #0
}
 8002316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002318:	1c6b      	adds	r3, r5, #1
 800231a:	d0f7      	beq.n	800230c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800231c:	b995      	cbnz	r5, 8002344 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800231e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002320:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002328:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002332:	2320      	movs	r3, #32
 8002334:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002338:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800233c:	2300      	movs	r3, #0
 800233e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002344:	f7fe fb90 	bl	8000a68 <HAL_GetTick>
 8002348:	1bc0      	subs	r0, r0, r7
 800234a:	4285      	cmp	r5, r0
 800234c:	d2dd      	bcs.n	800230a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800234e:	e7e6      	b.n	800231e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002350 <HAL_UART_Init>:
{
 8002350:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002352:	4604      	mov	r4, r0
 8002354:	b340      	cbz	r0, 80023a8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002356:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800235a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800235e:	b91b      	cbnz	r3, 8002368 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002360:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002364:	f001 f95e 	bl	8003624 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002368:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800236a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800236c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002370:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002372:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002378:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800237a:	f7ff ff23 	bl	80021c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002380:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002390:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002398:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800239a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800239e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80023a2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80023a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
}
 80023aa:	bd10      	pop	{r4, pc}

080023ac <HAL_UART_Transmit>:
{
 80023ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023b0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80023b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80023b6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80023b8:	2b20      	cmp	r3, #32
{
 80023ba:	460d      	mov	r5, r1
 80023bc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80023be:	d14e      	bne.n	800245e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80023c0:	2900      	cmp	r1, #0
 80023c2:	d049      	beq.n	8002458 <HAL_UART_Transmit+0xac>
 80023c4:	2a00      	cmp	r2, #0
 80023c6:	d047      	beq.n	8002458 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80023c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d046      	beq.n	800245e <HAL_UART_Transmit+0xb2>
 80023d0:	2301      	movs	r3, #1
 80023d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023da:	2321      	movs	r3, #33	; 0x21
 80023dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80023e0:	f7fe fb42 	bl	8000a68 <HAL_GetTick>
 80023e4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80023e6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80023ea:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80023ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b96b      	cbnz	r3, 8002410 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023f4:	463b      	mov	r3, r7
 80023f6:	4632      	mov	r2, r6
 80023f8:	2140      	movs	r1, #64	; 0x40
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff ff80 	bl	8002300 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002400:	b9a8      	cbnz	r0, 800242e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002402:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002404:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002408:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002410:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002412:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002414:	3b01      	subs	r3, #1
 8002416:	b29b      	uxth	r3, r3
 8002418:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800241a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800241c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800241e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002422:	4620      	mov	r0, r4
 8002424:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002426:	d10e      	bne.n	8002446 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002428:	f7ff ff6a 	bl	8002300 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800242c:	b110      	cbz	r0, 8002434 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800242e:	2003      	movs	r0, #3
 8002430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002434:	882b      	ldrh	r3, [r5, #0]
 8002436:	6822      	ldr	r2, [r4, #0]
 8002438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800243e:	6923      	ldr	r3, [r4, #16]
 8002440:	b943      	cbnz	r3, 8002454 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8002442:	3502      	adds	r5, #2
 8002444:	e7d3      	b.n	80023ee <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	f7ff ff5b 	bl	8002300 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800244a:	2800      	cmp	r0, #0
 800244c:	d1ef      	bne.n	800242e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	782a      	ldrb	r2, [r5, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	3501      	adds	r5, #1
 8002456:	e7ca      	b.n	80023ee <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002458:	2001      	movs	r0, #1
 800245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800245e:	2002      	movs	r0, #2
}
 8002460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002464 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8002464:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002468:	2b20      	cmp	r3, #32
 800246a:	d118      	bne.n	800249e <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL) || (Size == 0U)) 
 800246c:	b1a9      	cbz	r1, 800249a <HAL_UART_Transmit_IT+0x36>
 800246e:	b1a2      	cbz	r2, 800249a <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8002470:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002474:	2b01      	cmp	r3, #1
 8002476:	d012      	beq.n	800249e <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8002478:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 800247a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247c:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800247e:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8002480:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002482:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002484:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002486:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800248a:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 800248c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002494:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002496:	4618      	mov	r0, r3
 8002498:	4770      	bx	lr
      return HAL_ERROR;
 800249a:	2001      	movs	r0, #1
 800249c:	4770      	bx	lr
    return HAL_BUSY;
 800249e:	2002      	movs	r0, #2
}
 80024a0:	4770      	bx	lr

080024a2 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80024a2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d120      	bne.n	80024ec <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80024aa:	b1e9      	cbz	r1, 80024e8 <HAL_UART_Receive_IT+0x46>
 80024ac:	b1e2      	cbz	r2, 80024e8 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80024ae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d01a      	beq.n	80024ec <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80024b6:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80024b8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ba:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024bc:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024be:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024c0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024c4:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80024c6:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024c8:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80024ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024ce:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80024d2:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024d4:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80024d6:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024d8:	f041 0101 	orr.w	r1, r1, #1
 80024dc:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024de:	68d1      	ldr	r1, [r2, #12]
 80024e0:	f041 0120 	orr.w	r1, r1, #32
 80024e4:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80024e6:	4770      	bx	lr
      return HAL_ERROR;
 80024e8:	2001      	movs	r0, #1
 80024ea:	4770      	bx	lr
    return HAL_BUSY;
 80024ec:	2002      	movs	r0, #2
}
 80024ee:	4770      	bx	lr

080024f0 <HAL_UART_TxCpltCallback>:
 80024f0:	4770      	bx	lr

080024f2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80024f2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80024f6:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80024f8:	2b22      	cmp	r3, #34	; 0x22
 80024fa:	d136      	bne.n	800256a <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024fc:	6883      	ldr	r3, [r0, #8]
 80024fe:	6901      	ldr	r1, [r0, #16]
 8002500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002504:	6802      	ldr	r2, [r0, #0]
 8002506:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002508:	d123      	bne.n	8002552 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800250a:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800250c:	b9e9      	cbnz	r1, 800254a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800250e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002512:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002516:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002518:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800251a:	3c01      	subs	r4, #1
 800251c:	b2a4      	uxth	r4, r4
 800251e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002520:	b98c      	cbnz	r4, 8002546 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002522:	6803      	ldr	r3, [r0, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	f022 0220 	bic.w	r2, r2, #32
 800252a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002532:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800253c:	2320      	movs	r3, #32
 800253e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002542:	f000 fc7f 	bl	8002e44 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002546:	2000      	movs	r0, #0
}
 8002548:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f823 2b01 	strh.w	r2, [r3], #1
 8002550:	e7e1      	b.n	8002516 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002552:	b921      	cbnz	r1, 800255e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002554:	1c59      	adds	r1, r3, #1
 8002556:	6852      	ldr	r2, [r2, #4]
 8002558:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e7dc      	b.n	8002518 <UART_Receive_IT+0x26>
 800255e:	6852      	ldr	r2, [r2, #4]
 8002560:	1c59      	adds	r1, r3, #1
 8002562:	6281      	str	r1, [r0, #40]	; 0x28
 8002564:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002568:	e7f7      	b.n	800255a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800256a:	2002      	movs	r0, #2
 800256c:	bd10      	pop	{r4, pc}

0800256e <HAL_UART_ErrorCallback>:
 800256e:	4770      	bx	lr

08002570 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002570:	6803      	ldr	r3, [r0, #0]
{
 8002572:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002574:	681a      	ldr	r2, [r3, #0]
{
 8002576:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002578:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800257a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800257c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800257e:	d107      	bne.n	8002590 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002580:	0696      	lsls	r6, r2, #26
 8002582:	d55a      	bpl.n	800263a <HAL_UART_IRQHandler+0xca>
 8002584:	068d      	lsls	r5, r1, #26
 8002586:	d558      	bpl.n	800263a <HAL_UART_IRQHandler+0xca>
}
 8002588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800258c:	f7ff bfb1 	b.w	80024f2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002590:	f015 0501 	ands.w	r5, r5, #1
 8002594:	d102      	bne.n	800259c <HAL_UART_IRQHandler+0x2c>
 8002596:	f411 7f90 	tst.w	r1, #288	; 0x120
 800259a:	d04e      	beq.n	800263a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800259c:	07d3      	lsls	r3, r2, #31
 800259e:	d505      	bpl.n	80025ac <HAL_UART_IRQHandler+0x3c>
 80025a0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025a2:	bf42      	ittt	mi
 80025a4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80025a6:	f043 0301 	orrmi.w	r3, r3, #1
 80025aa:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ac:	0750      	lsls	r0, r2, #29
 80025ae:	d504      	bpl.n	80025ba <HAL_UART_IRQHandler+0x4a>
 80025b0:	b11d      	cbz	r5, 80025ba <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ba:	0793      	lsls	r3, r2, #30
 80025bc:	d504      	bpl.n	80025c8 <HAL_UART_IRQHandler+0x58>
 80025be:	b11d      	cbz	r5, 80025c8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c8:	0716      	lsls	r6, r2, #28
 80025ca:	d504      	bpl.n	80025d6 <HAL_UART_IRQHandler+0x66>
 80025cc:	b11d      	cbz	r5, 80025d6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025d0:	f043 0308 	orr.w	r3, r3, #8
 80025d4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d066      	beq.n	80026aa <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025dc:	0695      	lsls	r5, r2, #26
 80025de:	d504      	bpl.n	80025ea <HAL_UART_IRQHandler+0x7a>
 80025e0:	0688      	lsls	r0, r1, #26
 80025e2:	d502      	bpl.n	80025ea <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7ff ff84 	bl	80024f2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025ea:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80025ec:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025ee:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80025f2:	0711      	lsls	r1, r2, #28
 80025f4:	d402      	bmi.n	80025fc <HAL_UART_IRQHandler+0x8c>
 80025f6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80025fa:	d01a      	beq.n	8002632 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80025fc:	f7ff fdd4 	bl	80021a8 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	0652      	lsls	r2, r2, #25
 8002606:	d510      	bpl.n	800262a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002608:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800260a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800260c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002610:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002612:	b150      	cbz	r0, 800262a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <HAL_UART_IRQHandler+0x13c>)
 8002616:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002618:	f7fe fd06 	bl	8001028 <HAL_DMA_Abort_IT>
 800261c:	2800      	cmp	r0, #0
 800261e:	d044      	beq.n	80026aa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002620:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002626:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002628:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff ff9f 	bl	800256e <HAL_UART_ErrorCallback>
 8002630:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002632:	f7ff ff9c 	bl	800256e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002636:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002638:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800263a:	0616      	lsls	r6, r2, #24
 800263c:	d527      	bpl.n	800268e <HAL_UART_IRQHandler+0x11e>
 800263e:	060d      	lsls	r5, r1, #24
 8002640:	d525      	bpl.n	800268e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002642:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002646:	2a21      	cmp	r2, #33	; 0x21
 8002648:	d12f      	bne.n	80026aa <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800264a:	68a2      	ldr	r2, [r4, #8]
 800264c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002650:	6a22      	ldr	r2, [r4, #32]
 8002652:	d117      	bne.n	8002684 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002654:	8811      	ldrh	r1, [r2, #0]
 8002656:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800265a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800265c:	6921      	ldr	r1, [r4, #16]
 800265e:	b979      	cbnz	r1, 8002680 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002660:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002662:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002664:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002666:	3a01      	subs	r2, #1
 8002668:	b292      	uxth	r2, r2
 800266a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800266c:	b9ea      	cbnz	r2, 80026aa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002674:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002680:	3201      	adds	r2, #1
 8002682:	e7ee      	b.n	8002662 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002684:	1c51      	adds	r1, r2, #1
 8002686:	6221      	str	r1, [r4, #32]
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	e7ea      	b.n	8002664 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800268e:	0650      	lsls	r0, r2, #25
 8002690:	d50b      	bpl.n	80026aa <HAL_UART_IRQHandler+0x13a>
 8002692:	064a      	lsls	r2, r1, #25
 8002694:	d509      	bpl.n	80026aa <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002696:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002698:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800269a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800269e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026a0:	2320      	movs	r3, #32
 80026a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80026a6:	f7ff ff23 	bl	80024f0 <HAL_UART_TxCpltCallback>
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
 80026ac:	080026b1 	.word	0x080026b1

080026b0 <UART_DMAAbortOnError>:
{
 80026b0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80026b2:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80026b6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026b8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80026ba:	f7ff ff58 	bl	800256e <HAL_UART_ErrorCallback>
 80026be:	bd08      	pop	{r3, pc}

080026c0 <initOT>:
		ot.readingResponse = false;

	}
}
void initOT(void) {
	ot.busy = false;
 80026c0:	2300      	movs	r3, #0
 80026c2:	4a06      	ldr	r2, [pc, #24]	; (80026dc <initOT+0x1c>)
 80026c4:	f882 3069 	strb.w	r3, [r2, #105]	; 0x69
	ot.complete = false;
 80026c8:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	ot.frameSendedAndStartWaitingACK = false;
 80026cc:	f882 306b 	strb.w	r3, [r2, #107]	; 0x6b
	ot.readingResponse = false;
 80026d0:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
	OTCommon.index = 0;
 80026d4:	4a02      	ldr	r2, [pc, #8]	; (80026e0 <initOT+0x20>)
 80026d6:	6053      	str	r3, [r2, #4]
	OTCommon.busy = false;
 80026d8:	7213      	strb	r3, [r2, #8]
 80026da:	4770      	bx	lr
 80026dc:	20000620 	.word	0x20000620
 80026e0:	200001a8 	.word	0x200001a8

080026e4 <setIdleState>:
}
void setIdleState(void) {
	HAL_GPIO_WritePin(OT_RXO_GPIO_Port, OT_RXO_Pin, GPIO_PIN_SET);
 80026e4:	2201      	movs	r2, #1
 80026e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ea:	4801      	ldr	r0, [pc, #4]	; (80026f0 <setIdleState+0xc>)
 80026ec:	f7fe bdc4 	b.w	8001278 <HAL_GPIO_WritePin>
 80026f0:	40010800 	.word	0x40010800

080026f4 <setActiveState>:
}
void setActiveState(void) {
	HAL_GPIO_WritePin(OT_RXO_GPIO_Port, OT_RXO_Pin, GPIO_PIN_RESET);
 80026f4:	2200      	movs	r2, #0
 80026f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026fa:	4801      	ldr	r0, [pc, #4]	; (8002700 <setActiveState+0xc>)
 80026fc:	f7fe bdbc 	b.w	8001278 <HAL_GPIO_WritePin>
 8002700:	40010800 	.word	0x40010800

08002704 <activateBoiler>:
}
void activateBoiler(void) {
 8002704:	b508      	push	{r3, lr}
	setIdleState();
 8002706:	f7ff ffed 	bl	80026e4 <setIdleState>
	HAL_Delay(1000);
}
 800270a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 800270e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002712:	f7fe b9af 	b.w	8000a74 <HAL_Delay>
	...

08002718 <startWaiting>:

	return readResponse();
}
volatile bool rised = false;
volatile uint32_t risedCount;
void startWaiting() {
 8002718:	b538      	push	{r3, r4, r5, lr}
	rised = false;
 800271a:	2500      	movs	r5, #0
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <startWaiting+0x38>)
	TIM2->PSC = 64000;
 800271e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	rised = false;
 8002722:	701d      	strb	r5, [r3, #0]
	TIM2->PSC = 64000;
 8002724:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
	TIM2->ARR = 900;
 8002728:	f44f 7361 	mov.w	r3, #900	; 0x384
	htim2.Init.Prescaler = 64000;
 800272c:	4c09      	ldr	r4, [pc, #36]	; (8002754 <startWaiting+0x3c>)
	TIM2->PSC = 64000;
 800272e:	628a      	str	r2, [r1, #40]	; 0x28
	htim2.Init.Period = 900;
	HAL_TIM_Base_Init(&htim2);
 8002730:	4620      	mov	r0, r4
	TIM2->ARR = 900;
 8002732:	62cb      	str	r3, [r1, #44]	; 0x2c
	htim2.Init.Prescaler = 64000;
 8002734:	6062      	str	r2, [r4, #4]
	htim2.Init.Period = 900;
 8002736:	60e3      	str	r3, [r4, #12]
	HAL_TIM_Base_Init(&htim2);
 8002738:	f7ff fbbe 	bl	8001eb8 <HAL_TIM_Base_Init>
	HAL_TIM_IC_Init(&htim2);
 800273c:	4620      	mov	r0, r4
 800273e:	f7ff fbd5 	bl	8001eec <HAL_TIM_IC_Init>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002742:	4629      	mov	r1, r5
 8002744:	4620      	mov	r0, r4
}
 8002746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800274a:	f7ff bca7 	b.w	800209c <HAL_TIM_IC_Start_IT>
 800274e:	bf00      	nop
 8002750:	200000d2 	.word	0x200000d2
 8002754:	200005e0 	.word	0x200005e0

08002758 <checkACK>:
bool checkACK(void) {
	if (TIM2->CNT >= TIM2->ARR) {
 8002758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800275c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
bool checkACK(void) {
 8002760:	b510      	push	{r4, lr}
	if (TIM2->CNT >= TIM2->ARR) {
 8002762:	429a      	cmp	r2, r3
 8002764:	d307      	bcc.n	8002776 <checkACK+0x1e>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8002766:	2100      	movs	r1, #0
 8002768:	480e      	ldr	r0, [pc, #56]	; (80027a4 <checkACK+0x4c>)
 800276a:	f7ff fcc3 	bl	80020f4 <HAL_TIM_IC_Stop_IT>
		ot.timeout = true;
 800276e:	2201      	movs	r2, #1
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <checkACK+0x50>)
 8002772:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}
	if (rised) {
 8002776:	4c0d      	ldr	r4, [pc, #52]	; (80027ac <checkACK+0x54>)
 8002778:	7822      	ldrb	r2, [r4, #0]
 800277a:	b132      	cbz	r2, 800278a <checkACK+0x32>
		ot.timeout = false;
 800277c:	2100      	movs	r1, #0
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <checkACK+0x50>)
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8002780:	4808      	ldr	r0, [pc, #32]	; (80027a4 <checkACK+0x4c>)
		ot.timeout = false;
 8002782:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8002786:	f7ff fcb5 	bl	80020f4 <HAL_TIM_IC_Stop_IT>
	}
	return rised || TIM2->CNT >= TIM2->ARR;
 800278a:	7823      	ldrb	r3, [r4, #0]
 800278c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8002790:	b93b      	cbnz	r3, 80027a2 <checkACK+0x4a>
 8002792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002796:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	4298      	cmp	r0, r3
 800279c:	bf34      	ite	cc
 800279e:	2000      	movcc	r0, #0
 80027a0:	2001      	movcs	r0, #1
}
 80027a2:	bd10      	pop	{r4, pc}
 80027a4:	200005e0 	.word	0x200005e0
 80027a8:	20000620 	.word	0x20000620
 80027ac:	200000d2 	.word	0x200000d2

080027b0 <startReadResponse>:
volatile uint32_t ttime[64];
volatile bool rf[64];
volatile swIndex = 0;
//uint32_t ddd=0;

void startReadResponse(void) {
 80027b0:	b538      	push	{r3, r4, r5, lr}
	ot.rx_ext.raw = 0;
 80027b2:	2500      	movs	r5, #0
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <startReadResponse+0x3c>)
	swIndex = 0;
	TIM2->PSC = 64;
 80027b6:	2140      	movs	r1, #64	; 0x40
	ot.rx_ext.raw = 0;
 80027b8:	60dd      	str	r5, [r3, #12]
	swIndex = 0;
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <startReadResponse+0x40>)
	TIM2->ARR = 40000;
 80027bc:	f649 4240 	movw	r2, #40000	; 0x9c40
	swIndex = 0;
 80027c0:	601d      	str	r5, [r3, #0]
	TIM2->PSC = 64;
 80027c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM2->CNT = 0;
	htim2.Init.Prescaler = 64;
 80027c6:	4c0b      	ldr	r4, [pc, #44]	; (80027f4 <startReadResponse+0x44>)
	TIM2->PSC = 64;
 80027c8:	6299      	str	r1, [r3, #40]	; 0x28
	htim2.Init.Period = 40000;
	HAL_TIM_IC_Init(&htim2);
 80027ca:	4620      	mov	r0, r4
	TIM2->ARR = 40000;
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;
 80027ce:	625d      	str	r5, [r3, #36]	; 0x24
	htim2.Init.Prescaler = 64;
 80027d0:	6061      	str	r1, [r4, #4]
	htim2.Init.Period = 40000;
 80027d2:	60e2      	str	r2, [r4, #12]
	HAL_TIM_IC_Init(&htim2);
 80027d4:	f7ff fb8a 	bl	8001eec <HAL_TIM_IC_Init>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80027d8:	4629      	mov	r1, r5
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff fc5e 	bl	800209c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80027e0:	4620      	mov	r0, r4
}
 80027e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80027e6:	2104      	movs	r1, #4
 80027e8:	f7ff bc58 	b.w	800209c <HAL_TIM_IC_Start_IT>
 80027ec:	20000620 	.word	0x20000620
 80027f0:	200000d8 	.word	0x200000d8
 80027f4:	200005e0 	.word	0x200005e0

080027f8 <checkTimerOVF>:
bool checkTimerOVF(void) {
	return TIM2->CNT >= TIM2->ARR;
 80027f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8002800:	4298      	cmp	r0, r3
 8002802:	bf34      	ite	cc
 8002804:	2000      	movcc	r0, #0
 8002806:	2001      	movcs	r0, #1
 8002808:	4770      	bx	lr
	...

0800280c <calculateResponse>:
uint32_t calculateResponse(void) {
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800280e:	2100      	movs	r1, #0
 8002810:	4811      	ldr	r0, [pc, #68]	; (8002858 <calculateResponse+0x4c>)
 8002812:	f7ff fc6f 	bl	80020f4 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_2);
 8002816:	2104      	movs	r1, #4
 8002818:	480f      	ldr	r0, [pc, #60]	; (8002858 <calculateResponse+0x4c>)
 800281a:	f7ff fc6b 	bl	80020f4 <HAL_TIM_IC_Stop_IT>
	int cnt = 0;
 800281e:	2400      	movs	r4, #0
	uint32_t response = 0;
	if (!rf[0])
		response |= (1 << 0);
	uint32_t oldt = ttime[0];
	for (int i = 1; i < 64; i++) {
 8002820:	2301      	movs	r3, #1
	if (!rf[0])
 8002822:	490e      	ldr	r1, [pc, #56]	; (800285c <calculateResponse+0x50>)
	uint32_t oldt = ttime[0];
 8002824:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <calculateResponse+0x54>)
	if (!rf[0])
 8002826:	7808      	ldrb	r0, [r1, #0]
	uint32_t oldt = ttime[0];
 8002828:	6815      	ldr	r5, [r2, #0]
	uint32_t response = 0;
 800282a:	f080 0001 	eor.w	r0, r0, #1
		if (ttime[i] > oldt + 900) {
 800282e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002832:	f505 7661 	add.w	r6, r5, #900	; 0x384
 8002836:	42b7      	cmp	r7, r6
 8002838:	d909      	bls.n	800284e <calculateResponse+0x42>
			response = response << 1;
			if (!rf[i])
 800283a:	5ccd      	ldrb	r5, [r1, r3]
			response = response << 1;
 800283c:	0040      	lsls	r0, r0, #1
			if (!rf[i])
 800283e:	b90d      	cbnz	r5, 8002844 <calculateResponse+0x38>
				response |= 1;
 8002840:	f040 0001 	orr.w	r0, r0, #1
			oldt = ttime[i];
			cnt++;
 8002844:	3401      	adds	r4, #1
			if (cnt == 31)
 8002846:	2c1f      	cmp	r4, #31
			oldt = ttime[i];
 8002848:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
			if (cnt == 31)
 800284c:	d002      	beq.n	8002854 <calculateResponse+0x48>
	for (int i = 1; i < 64; i++) {
 800284e:	3301      	adds	r3, #1
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d1ec      	bne.n	800282e <calculateResponse+0x22>
				break;
		}
	}
	return response;
}
 8002854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002856:	bf00      	nop
 8002858:	200005e0 	.word	0x200005e0
 800285c:	200000ed 	.word	0x200000ed
 8002860:	20000484 	.word	0x20000484

08002864 <delayMicros>:
		}
	}*/
	ot.rx.raw = calculateResponse();	  //response;
	return ot.rx.raw;
}
void delayMicros(uint32_t t) {
 8002864:	b510      	push	{r4, lr}
	TIM4->ARR = t * 2;
 8002866:	4c07      	ldr	r4, [pc, #28]	; (8002884 <delayMicros+0x20>)
 8002868:	0040      	lsls	r0, r0, #1
 800286a:	62e0      	str	r0, [r4, #44]	; 0x2c
	HAL_TIM_Base_Start(&htim4);
 800286c:	4806      	ldr	r0, [pc, #24]	; (8002888 <delayMicros+0x24>)
 800286e:	f7ff f944 	bl	8001afa <HAL_TIM_Base_Start>
	while (TIM4->CNT < TIM4->ARR) {
 8002872:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002874:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002876:	429a      	cmp	r2, r3
 8002878:	d3fb      	bcc.n	8002872 <delayMicros+0xe>

	}
	HAL_TIM_Base_Stop(&htim4);
 800287a:	4803      	ldr	r0, [pc, #12]	; (8002888 <delayMicros+0x24>)
}
 800287c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop(&htim4);
 8002880:	f7ff b948 	b.w	8001b14 <HAL_TIM_Base_Stop>
 8002884:	40000800 	.word	0x40000800
 8002888:	200001b4 	.word	0x200001b4

0800288c <sendBit>:
void sendBit(bool high) {
 800288c:	b510      	push	{r4, lr}
	if (high)
 800288e:	4604      	mov	r4, r0
 8002890:	b170      	cbz	r0, 80028b0 <sendBit+0x24>
		setActiveState();
 8002892:	f7ff ff2f 	bl	80026f4 <setActiveState>
	delayMicros(500);
 8002896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800289a:	f7ff ffe3 	bl	8002864 <delayMicros>
	if (high)
 800289e:	b154      	cbz	r4, 80028b6 <sendBit+0x2a>
		setIdleState();
 80028a0:	f7ff ff20 	bl	80026e4 <setIdleState>
}
 80028a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delayMicros(500);
 80028a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028ac:	f7ff bfda 	b.w	8002864 <delayMicros>
		setIdleState();
 80028b0:	f7ff ff18 	bl	80026e4 <setIdleState>
 80028b4:	e7ef      	b.n	8002896 <sendBit+0xa>
		setActiveState();
 80028b6:	f7ff ff1d 	bl	80026f4 <setActiveState>
 80028ba:	e7f3      	b.n	80028a4 <sendBit+0x18>

080028bc <sendFrame>:
void sendFrame(uint32_t request) {
 80028bc:	b538      	push	{r3, r4, r5, lr}
 80028be:	4605      	mov	r5, r0
	sendBit(true); //start bit
 80028c0:	2001      	movs	r0, #1
 80028c2:	f7ff ffe3 	bl	800288c <sendBit>
	for (int i = 31; i >= 0; i--) {
 80028c6:	241f      	movs	r4, #31
		sendBit((request >> i & 1)); //bitRead(request, i));
 80028c8:	fa25 f004 	lsr.w	r0, r5, r4
 80028cc:	f000 0001 	and.w	r0, r0, #1
 80028d0:	f7ff ffdc 	bl	800288c <sendBit>
	for (int i = 31; i >= 0; i--) {
 80028d4:	f114 34ff 	adds.w	r4, r4, #4294967295
 80028d8:	d2f6      	bcs.n	80028c8 <sendFrame+0xc>
	sendBit(true); //stop bit
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff ffd6 	bl	800288c <sendBit>
}
 80028e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	setIdleState();
 80028e4:	f7ff befe 	b.w	80026e4 <setIdleState>

080028e8 <checkParity>:

uint32_t checkParity(uint32_t val) {
	val = val & 0x7FFFFFFF;
 80028e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	val ^= val >> 16;
 80028ec:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	val ^= val >> 8;
 80028f0:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
	val ^= val >> 4;
 80028f4:	ea80 1010 	eor.w	r0, r0, r0, lsr #4
	val ^= val >> 2;
 80028f8:	ea80 0090 	eor.w	r0, r0, r0, lsr #2
	val ^= val >> 1;
 80028fc:	ea80 0050 	eor.w	r0, r0, r0, lsr #1
	return (val) & 1;
}
 8002900:	f000 0001 	and.w	r0, r0, #1
 8002904:	4770      	bx	lr
	...

08002908 <OTRoute>:
void OTRoute(void) {
 8002908:	b570      	push	{r4, r5, r6, lr}
	if (!ot.busy) {
 800290a:	4c37      	ldr	r4, [pc, #220]	; (80029e8 <OTRoute+0xe0>)
 800290c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8002910:	b973      	cbnz	r3, 8002930 <OTRoute+0x28>
		ot.busy = true;
 8002912:	2501      	movs	r5, #1
		ot.tx.raw = requests[OTCommon.index];
 8002914:	4b35      	ldr	r3, [pc, #212]	; (80029ec <OTRoute+0xe4>)
		ot.busy = true;
 8002916:	f884 5069 	strb.w	r5, [r4, #105]	; 0x69
		ot.tx.raw = requests[OTCommon.index];
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <OTRoute+0xe8>)
 800291e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002922:	6120      	str	r0, [r4, #16]
		sendFrame(requests[OTCommon.index]);
 8002924:	f7ff ffca 	bl	80028bc <sendFrame>
		startWaiting();
 8002928:	f7ff fef6 	bl	8002718 <startWaiting>
		ot.frameSendedAndStartWaitingACK = true;
 800292c:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
	if (ot.frameSendedAndStartWaitingACK && checkACK()) {
 8002930:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8002934:	2b00      	cmp	r3, #0
 8002936:	d039      	beq.n	80029ac <OTRoute+0xa4>
 8002938:	f7ff ff0e 	bl	8002758 <checkACK>
 800293c:	2800      	cmp	r0, #0
 800293e:	d035      	beq.n	80029ac <OTRoute+0xa4>
		ot.frameSendedAndStartWaitingACK = false;
 8002940:	2300      	movs	r3, #0
 8002942:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
		if (!ot.timeout) {
 8002946:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800294a:	bb63      	cbnz	r3, 80029a6 <OTRoute+0x9e>
			delayMicros(1000 * 1.25);
 800294c:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8002950:	f7ff ff88 	bl	8002864 <delayMicros>
			startReadResponse();
 8002954:	f7ff ff2c 	bl	80027b0 <startReadResponse>
			ot.readingResponse = true;
 8002958:	2301      	movs	r3, #1
 800295a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
			while (!checkTimerOVF()) {
 800295e:	f7ff ff4b 	bl	80027f8 <checkTimerOVF>
 8002962:	2800      	cmp	r0, #0
 8002964:	d0fb      	beq.n	800295e <OTRoute+0x56>
			ot.rx.raw = calculateResponse();
 8002966:	f7ff ff51 	bl	800280c <calculateResponse>
			ot.reg[OTCommon.index] = ot.rx.raw;	//sendRequest( requests[OTCommon.index] );
 800296a:	4920      	ldr	r1, [pc, #128]	; (80029ec <OTRoute+0xe4>)
			ot.rx.raw = calculateResponse();
 800296c:	0e03      	lsrs	r3, r0, #24
			ot.reg[OTCommon.index] = ot.rx.raw;	//sendRequest( requests[OTCommon.index] );
 800296e:	684d      	ldr	r5, [r1, #4]
			ot.rx.raw = calculateResponse();
 8002970:	60a0      	str	r0, [r4, #8]
			ot.reg[OTCommon.index] = ot.rx.raw;	//sendRequest( requests[OTCommon.index] );
 8002972:	1dae      	adds	r6, r5, #6
 8002974:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
			if (checkParity(ot.rx.raw) == ot.rx.frame.PARITY
 8002978:	f7ff ffb6 	bl	80028e8 <checkParity>
 800297c:	b2db      	uxtb	r3, r3
 800297e:	ebb0 1fd3 	cmp.w	r0, r3, lsr #7
 8002982:	d10a      	bne.n	800299a <OTRoute+0x92>
					&& (ot.rx.frame.MSG_TYPE == OT_MSG_TYPE_S_READ_ACK
 8002984:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d106      	bne.n	800299a <OTRoute+0x92>
				dv.raw = ot.rx.frame.DATA_VALUE;
 800298c:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <OTRoute+0xec>)
 800298e:	8923      	ldrh	r3, [r4, #8]
 8002990:	8013      	strh	r3, [r2, #0]
				if (ot.rx.frame.DATA_ID == 0) {
 8002992:	7aa2      	ldrb	r2, [r4, #10]
 8002994:	b9a2      	cbnz	r2, 80029c0 <OTRoute+0xb8>
					OTDR.ID0 = dv.ID0;
 8002996:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <OTRoute+0xf0>)
 8002998:	8013      	strh	r3, [r2, #0]
			OTCommon.index++;
 800299a:	3501      	adds	r5, #1
			if (OTCommon.index >= OT_QUEUE_LENGTH)
 800299c:	2d10      	cmp	r5, #16
				OTCommon.index = 0;
 800299e:	bfca      	itet	gt
 80029a0:	2300      	movgt	r3, #0
			OTCommon.index++;
 80029a2:	604d      	strle	r5, [r1, #4]
				OTCommon.index = 0;
 80029a4:	604b      	strgt	r3, [r1, #4]
		ot.complete = true;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if(ot.readingResponse && checkTimerOVF()){
 80029ac:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80029b0:	b12b      	cbz	r3, 80029be <OTRoute+0xb6>
 80029b2:	f7ff ff21 	bl	80027f8 <checkTimerOVF>
 80029b6:	b110      	cbz	r0, 80029be <OTRoute+0xb6>
		ot.readingResponse = false;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 80029be:	bd70      	pop	{r4, r5, r6, pc}
				if (ot.rx.frame.DATA_ID == 3) {
 80029c0:	2a03      	cmp	r2, #3
 80029c2:	d102      	bne.n	80029ca <OTRoute+0xc2>
					OTDR.ID3 = dv.ID3;
 80029c4:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <OTRoute+0xf0>)
 80029c6:	8093      	strh	r3, [r2, #4]
 80029c8:	e7e7      	b.n	800299a <OTRoute+0x92>
				if (ot.rx.frame.DATA_ID == 5) {
 80029ca:	2a05      	cmp	r2, #5
 80029cc:	d102      	bne.n	80029d4 <OTRoute+0xcc>
					OTDR.ID5 = dv.ID5;
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <OTRoute+0xf0>)
 80029d0:	80d3      	strh	r3, [r2, #6]
 80029d2:	e7e2      	b.n	800299a <OTRoute+0x92>
				if (ot.rx.frame.DATA_ID == 125)
 80029d4:	2a7d      	cmp	r2, #125	; 0x7d
 80029d6:	d102      	bne.n	80029de <OTRoute+0xd6>
					OTDR.ID125 = dv.ID125;
 80029d8:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <OTRoute+0xf0>)
 80029da:	8193      	strh	r3, [r2, #12]
 80029dc:	e7dd      	b.n	800299a <OTRoute+0x92>
				if (ot.rx.frame.DATA_ID == 127)
 80029de:	2a7f      	cmp	r2, #127	; 0x7f
					OTDR.ID127 = dv.ID127;
 80029e0:	bf04      	itt	eq
 80029e2:	4a05      	ldreq	r2, [pc, #20]	; (80029f8 <OTRoute+0xf0>)
 80029e4:	8213      	strheq	r3, [r2, #16]
 80029e6:	e7d8      	b.n	800299a <OTRoute+0x92>
 80029e8:	20000620 	.word	0x20000620
 80029ec:	200001a8 	.word	0x200001a8
 80029f0:	20000008 	.word	0x20000008
 80029f4:	200000d0 	.word	0x200000d0
 80029f8:	200006dc 	.word	0x200006dc

080029fc <OWInit>:
void OWTransmit(void);
void OWReceive(void);

//1 wire
void OWInit(void){
temp.TransmitReceive = false;
 80029fc:	2200      	movs	r2, #0
temp.busy = true;
 80029fe:	2101      	movs	r1, #1
temp.TransmitReceive = false;
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <OWInit+0x10>)
 8002a02:	721a      	strb	r2, [r3, #8]
temp.busy = true;
 8002a04:	7259      	strb	r1, [r3, #9]
temp.transmitInProgress = false;
 8002a06:	729a      	strb	r2, [r3, #10]
temp.receiveInProgress = false;
 8002a08:	72da      	strb	r2, [r3, #11]
 8002a0a:	4770      	bx	lr
 8002a0c:	20000364 	.word	0x20000364

08002a10 <OWTick200>:
//temp.TransmitReceive = false;
//HAL_Delay(200);
//OWReceive();
}
void OWTick200(void){
    if(!temp.transmitInProgress && !temp.receiveInProgress){
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <OWTick200+0x18>)
 8002a12:	7a9a      	ldrb	r2, [r3, #10]
 8002a14:	b932      	cbnz	r2, 8002a24 <OWTick200+0x14>
 8002a16:	7ad9      	ldrb	r1, [r3, #11]
 8002a18:	b921      	cbnz	r1, 8002a24 <OWTick200+0x14>
        temp.TransmitReceive = ! temp.TransmitReceive;
 8002a1a:	7a1a      	ldrb	r2, [r3, #8]
        temp.busy = false;
 8002a1c:	7259      	strb	r1, [r3, #9]
        temp.TransmitReceive = ! temp.TransmitReceive;
 8002a1e:	f082 0201 	eor.w	r2, r2, #1
 8002a22:	721a      	strb	r2, [r3, #8]
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000364 	.word	0x20000364

08002a2c <initADC>:
int GetAnalogADC1( void );
int ReadAnalogADC1( uint32_t ch );


void initADC(void){
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8002a2c:	2200      	movs	r2, #0
	adcChannel.Rank = 1;
 8002a2e:	2101      	movs	r1, #1
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <initADC+0x14>)



	  //ADC1
	  //HAL_ADC_MspInit(&hadc1);
	  HAL_ADC_Start(&hadc1);
 8002a32:	4804      	ldr	r0, [pc, #16]	; (8002a44 <initADC+0x18>)
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8002a34:	601a      	str	r2, [r3, #0]
	adcChannel.Rank = 1;
 8002a36:	6059      	str	r1, [r3, #4]
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a38:	609a      	str	r2, [r3, #8]
	  HAL_ADC_Start(&hadc1);
 8002a3a:	f7fe b8ed 	b.w	8000c18 <HAL_ADC_Start>
 8002a3e:	bf00      	nop
 8002a40:	200006d0 	.word	0x200006d0
 8002a44:	20000380 	.word	0x20000380

08002a48 <ReadAnalogADC1>:
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
	return HAL_ADC_GetValue(&hadc1);
}
int ReadAnalogADC1( uint32_t ch ){
	adcChannel.Channel = ch;//B
	adcChannel.Rank = 1;
 8002a48:	2301      	movs	r3, #1
	adcChannel.Channel = ch;//B
 8002a4a:	490b      	ldr	r1, [pc, #44]	; (8002a78 <ReadAnalogADC1+0x30>)
int ReadAnalogADC1( uint32_t ch ){
 8002a4c:	b510      	push	{r4, lr}
	adcChannel.Rank = 1;
 8002a4e:	604b      	str	r3, [r1, #4]
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a50:	2300      	movs	r3, #0

	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8002a52:	4c0a      	ldr	r4, [pc, #40]	; (8002a7c <ReadAnalogADC1+0x34>)
	adcChannel.Channel = ch;//B
 8002a54:	6008      	str	r0, [r1, #0]
	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8002a56:	4620      	mov	r0, r4
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a58:	608b      	str	r3, [r1, #8]
	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8002a5a:	f7fe f821 	bl	8000aa0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f7fe f8da 	bl	8000c18 <HAL_ADC_Start>
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
 8002a64:	6822      	ldr	r2, [r4, #0]
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	079b      	lsls	r3, r3, #30
 8002a6a:	d5fc      	bpl.n	8002a66 <ReadAnalogADC1+0x1e>
	return HAL_ADC_GetValue(&hadc1);
 8002a6c:	4803      	ldr	r0, [pc, #12]	; (8002a7c <ReadAnalogADC1+0x34>)
}
 8002a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return HAL_ADC_GetValue(&hadc1);
 8002a72:	f7fe b811 	b.w	8000a98 <HAL_ADC_GetValue>
 8002a76:	bf00      	nop
 8002a78:	200006d0 	.word	0x200006d0
 8002a7c:	20000380 	.word	0x20000380

08002a80 <RPiInit>:

void RPiInit(void);
void RPiRXRoute(void);
void RPiRoute(void);

void RPiInit(void){
 8002a80:	b510      	push	{r4, lr}
	  HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,RPI_BUFFER_SIZE);
 8002a82:	4c05      	ldr	r4, [pc, #20]	; (8002a98 <RPiInit+0x18>)
 8002a84:	2204      	movs	r2, #4
 8002a86:	4621      	mov	r1, r4
 8002a88:	4804      	ldr	r0, [pc, #16]	; (8002a9c <RPiInit+0x1c>)
 8002a8a:	f7ff fd0a 	bl	80024a2 <HAL_UART_Receive_IT>
	  RPi_UART.transmitRequered = false;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f804 3c05 	strb.w	r3, [r4, #-5]
 8002a94:	bd10      	pop	{r4, pc}
 8002a96:	bf00      	nop
 8002a98:	20000375 	.word	0x20000375
 8002a9c:	2000020c 	.word	0x2000020c

08002aa0 <RPiRoute>:
	return;
}
void RPiRoute(void){
 8002aa0:	b510      	push	{r4, lr}
	if(RPi_UART.transmitRequered){
 8002aa2:	4c07      	ldr	r4, [pc, #28]	; (8002ac0 <RPiRoute+0x20>)
 8002aa4:	7823      	ldrb	r3, [r4, #0]
 8002aa6:	b14b      	cbz	r3, 8002abc <RPiRoute+0x1c>
			  HAL_UART_Transmit(&huart3,RPi_UART.tx_buff,RPI_BUFFER_SIZE,1000);
 8002aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aac:	2204      	movs	r2, #4
 8002aae:	f104 0109 	add.w	r1, r4, #9
 8002ab2:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <RPiRoute+0x24>)
 8002ab4:	f7ff fc7a 	bl	80023ac <HAL_UART_Transmit>
			  RPi_UART.transmitRequered = false;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	7023      	strb	r3, [r4, #0]
 8002abc:	bd10      	pop	{r4, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000370 	.word	0x20000370
 8002ac4:	2000020c 	.word	0x2000020c

08002ac8 <RPiRXRoute>:
		  }
}
//toRPIlib
void RPiRXRoute(void){
 8002ac8:	b538      	push	{r3, r4, r5, lr}
	int16_t tmp;
    for (int i=0;i<RPI_BUFFER_SIZE;i++)
        rpiframe.raw[i] = RPi_UART.rx_buff[i];
 8002aca:	4c35      	ldr	r4, [pc, #212]	; (8002ba0 <RPiRXRoute+0xd8>)
 8002acc:	4d35      	ldr	r5, [pc, #212]	; (8002ba4 <RPiRXRoute+0xdc>)
 8002ace:	7962      	ldrb	r2, [r4, #5]
 8002ad0:	702a      	strb	r2, [r5, #0]
 8002ad2:	79a2      	ldrb	r2, [r4, #6]
 8002ad4:	706a      	strb	r2, [r5, #1]
 8002ad6:	79e2      	ldrb	r2, [r4, #7]
 8002ad8:	70aa      	strb	r2, [r5, #2]
 8002ada:	7a22      	ldrb	r2, [r4, #8]
 8002adc:	70ea      	strb	r2, [r5, #3]

    switch(rpiframe.frame.address & 0xff){
 8002ade:	882a      	ldrh	r2, [r5, #0]
 8002ae0:	b2d1      	uxtb	r1, r2
 8002ae2:	3901      	subs	r1, #1
 8002ae4:	290a      	cmp	r1, #10
 8002ae6:	d811      	bhi.n	8002b0c <RPiRXRoute+0x44>
 8002ae8:	e8df f001 	tbb	[pc, r1]
 8002aec:	3b370d06 	.word	0x3b370d06
 8002af0:	1010403b 	.word	0x1010403b
 8002af4:	5210      	.short	0x5210
 8002af6:	56          	.byte	0x56
 8002af7:	00          	.byte	0x00
    case RPi_ECHO_UART_ADDRESS:
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002af8:	2140      	movs	r1, #64	; 0x40
 8002afa:	482b      	ldr	r0, [pc, #172]	; (8002ba8 <RPiRXRoute+0xe0>)
 8002afc:	f7fe fbc1 	bl	8001282 <HAL_GPIO_TogglePin>
    case RPi_GET_HW_TEMP_UART_ADDRESS:
    	tmp = round(temp.out*256.0);
        rpiframe.frame.data = tmp;
        //for (int i=0;i<4;i++)
           // RPi_UART.tx_buff[i] = rpiframe.raw[i];
        RPi_UART.transmitRequered = true;
 8002b00:	2301      	movs	r3, #1
 8002b02:	7023      	strb	r3, [r4, #0]
        break;
 8002b04:	e002      	b.n	8002b0c <RPiRXRoute+0x44>
        ot.RPiRequestHI = rpiframe.frame.data;
 8002b06:	886a      	ldrh	r2, [r5, #2]
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <RPiRXRoute+0xe4>)
 8002b0a:	801a      	strh	r2, [r3, #0]
    }

    if(RPi_UART.rx_buff[0]=='H' && RPi_UART.rx_buff[1]=='e' && RPi_UART.rx_buff[2]=='l'){
 8002b0c:	7963      	ldrb	r3, [r4, #5]
 8002b0e:	2b48      	cmp	r3, #72	; 0x48
 8002b10:	d108      	bne.n	8002b24 <RPiRXRoute+0x5c>
 8002b12:	f646 4365 	movw	r3, #27749	; 0x6c65
 8002b16:	88e2      	ldrh	r2, [r4, #6]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d103      	bne.n	8002b24 <RPiRXRoute+0x5c>
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002b1c:	2140      	movs	r1, #64	; 0x40
 8002b1e:	4822      	ldr	r0, [pc, #136]	; (8002ba8 <RPiRXRoute+0xe0>)
 8002b20:	f7fe fbaf 	bl	8001282 <HAL_GPIO_TogglePin>
    }
    if(RPi_UART.rx_buff[0]=='t' && RPi_UART.rx_buff[1]=='m' && RPi_UART.rx_buff[2]=='p'){
 8002b24:	7963      	ldrb	r3, [r4, #5]
 8002b26:	2b74      	cmp	r3, #116	; 0x74
 8002b28:	d108      	bne.n	8002b3c <RPiRXRoute+0x74>
 8002b2a:	f247 036d 	movw	r3, #28781	; 0x706d
 8002b2e:	88e2      	ldrh	r2, [r4, #6]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d103      	bne.n	8002b3c <RPiRXRoute+0x74>
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002b34:	2140      	movs	r1, #64	; 0x40
 8002b36:	481c      	ldr	r0, [pc, #112]	; (8002ba8 <RPiRXRoute+0xe0>)
 8002b38:	f7fe fba3 	bl	8001282 <HAL_GPIO_TogglePin>
        //RPi_UART.tx_buff
    }
    for (int i=0;i<RPI_BUFFER_SIZE;i++)
        RPi_UART.tx_buff[i] = rpiframe.raw[i];
 8002b3c:	782b      	ldrb	r3, [r5, #0]
    HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,RPI_BUFFER_SIZE);
 8002b3e:	2204      	movs	r2, #4
        RPi_UART.tx_buff[i] = rpiframe.raw[i];
 8002b40:	7263      	strb	r3, [r4, #9]
 8002b42:	786b      	ldrb	r3, [r5, #1]
    HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,RPI_BUFFER_SIZE);
 8002b44:	491a      	ldr	r1, [pc, #104]	; (8002bb0 <RPiRXRoute+0xe8>)
        RPi_UART.tx_buff[i] = rpiframe.raw[i];
 8002b46:	72a3      	strb	r3, [r4, #10]
 8002b48:	78ab      	ldrb	r3, [r5, #2]
    HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,RPI_BUFFER_SIZE);
 8002b4a:	481a      	ldr	r0, [pc, #104]	; (8002bb4 <RPiRXRoute+0xec>)
        RPi_UART.tx_buff[i] = rpiframe.raw[i];
 8002b4c:	72e3      	strb	r3, [r4, #11]
 8002b4e:	78eb      	ldrb	r3, [r5, #3]
 8002b50:	7323      	strb	r3, [r4, #12]
}
 8002b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,RPI_BUFFER_SIZE);
 8002b56:	f7ff bca4 	b.w	80024a2 <HAL_UART_Receive_IT>
    	rpiframe.frame.data = OTDR.ID3.SlaveMemberID;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <RPiRXRoute+0xf0>)
 8002b5c:	791b      	ldrb	r3, [r3, #4]
 8002b5e:	806b      	strh	r3, [r5, #2]
 8002b60:	e7ce      	b.n	8002b00 <RPiRXRoute+0x38>
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002b62:	2140      	movs	r1, #64	; 0x40
 8002b64:	4810      	ldr	r0, [pc, #64]	; (8002ba8 <RPiRXRoute+0xe0>)
 8002b66:	f7fe fb8c 	bl	8001282 <HAL_GPIO_TogglePin>
        break;
 8002b6a:	e7cf      	b.n	8002b0c <RPiRXRoute+0x44>
    	tmp = round(adc.v[ rpiframe.frame.address>>8 & 0x0f ]*256.0);
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <RPiRXRoute+0xf4>)
 8002b6e:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8002b72:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002b76:	6c50      	ldr	r0, [r2, #68]	; 0x44
    	tmp = round(temp.out*256.0);
 8002b78:	f7fd fc56 	bl	8000428 <__aeabi_f2d>
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <RPiRXRoute+0xf8>)
 8002b80:	f7fd fca6 	bl	80004d0 <__aeabi_dmul>
 8002b84:	f000 ff76 	bl	8003a74 <round>
 8002b88:	f7fd feb4 	bl	80008f4 <__aeabi_d2iz>
 8002b8c:	8068      	strh	r0, [r5, #2]
 8002b8e:	e7b7      	b.n	8002b00 <RPiRXRoute+0x38>
        OTCommon.targetTemp = rpiframe.frame.data;
 8002b90:	886a      	ldrh	r2, [r5, #2]
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <RPiRXRoute+0xfc>)
 8002b94:	801a      	strh	r2, [r3, #0]
 8002b96:	e7b3      	b.n	8002b00 <RPiRXRoute+0x38>
    	tmp = round(temp.out*256.0);
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <RPiRXRoute+0x100>)
 8002b9a:	6858      	ldr	r0, [r3, #4]
 8002b9c:	e7ec      	b.n	8002b78 <RPiRXRoute+0xb0>
 8002b9e:	bf00      	nop
 8002ba0:	20000370 	.word	0x20000370
 8002ba4:	200000d4 	.word	0x200000d4
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	20000620 	.word	0x20000620
 8002bb0:	20000375 	.word	0x20000375
 8002bb4:	2000020c 	.word	0x2000020c
 8002bb8:	200006dc 	.word	0x200006dc
 8002bbc:	20000400 	.word	0x20000400
 8002bc0:	40700000 	.word	0x40700000
 8002bc4:	200001a8 	.word	0x200001a8
 8002bc8:	20000364 	.word	0x20000364

08002bcc <strpos>:
} AT_Struct;
AT_Struct AT;

int
strpos(char* hay, char* needle, int offset)
{
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	460e      	mov	r6, r1
 8002bd2:	4614      	mov	r4, r2
 8002bd4:	4605      	mov	r5, r0
  char haystack[strlen(hay)];
 8002bd6:	f7fd fabb 	bl	8000150 <strlen>
 8002bda:	3007      	adds	r0, #7
 8002bdc:	f020 0007 	bic.w	r0, r0, #7
 8002be0:	ebad 0d00 	sub.w	sp, sp, r0
  strncpy(haystack, hay + offset, strlen(hay) - offset);
 8002be4:	4628      	mov	r0, r5
 8002be6:	f7fd fab3 	bl	8000150 <strlen>
 8002bea:	1929      	adds	r1, r5, r4
 8002bec:	1b02      	subs	r2, r0, r4
 8002bee:	4668      	mov	r0, sp
 8002bf0:	f000 ff0e 	bl	8003a10 <strncpy>
  char* p = strstr(haystack, needle);
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	4668      	mov	r0, sp
 8002bf8:	f000 ff1f 	bl	8003a3a <strstr>
  if (p)
 8002bfc:	b120      	cbz	r0, 8002c08 <strpos+0x3c>
    return p - haystack + offset;
 8002bfe:	466b      	mov	r3, sp
 8002c00:	1ac0      	subs	r0, r0, r3
 8002c02:	4420      	add	r0, r4
  return -1;
}
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return -1;
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	e7fa      	b.n	8002c04 <strpos+0x38>
	...

08002c10 <initAT>:

void
initAT()
{
  gprs.TX = "";
 8002c10:	4910      	ldr	r1, [pc, #64]	; (8002c54 <initAT+0x44>)
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <initAT+0x48>)
{
 8002c14:	b430      	push	{r4, r5}
  gprs.TX = "";
 8002c16:	604b      	str	r3, [r1, #4]
  gprs.RX = "";
 8002c18:	608b      	str	r3, [r1, #8]
  //gprs.transmitRequered = false;
  //gprs.waitForResponse = false;
  gprs.busy = false;
 8002c1a:	2300      	movs	r3, #0

  gprs.index = 0;
  //gprs.readIndex = 0;

  AT.at.request = "AT\r\n";
  AT.at.response = INIT_STATE;
 8002c1c:	22ff      	movs	r2, #255	; 0xff
  gprs.index = 0;
 8002c1e:	708b      	strb	r3, [r1, #2]
  gprs.busy = false;
 8002c20:	700b      	strb	r3, [r1, #0]
  AT.at.request = "AT\r\n";
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <initAT+0x4c>)

  AT.cops.request = "AT+COPS?\r\n";
  AT.cops.response = INIT_STATE;

  AT.setCMGF.request = "AT+CMGF=1\r\n";
 8002c24:	4d0e      	ldr	r5, [pc, #56]	; (8002c60 <initAT+0x50>)
  AT.at.response = INIT_STATE;
 8002c26:	711a      	strb	r2, [r3, #4]
  AT.cops.response = INIT_STATE;
 8002c28:	771a      	strb	r2, [r3, #28]
  AT.setCMGF.response = INIT_STATE;
 8002c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  AT.getCMGF.request = "AT+CMGF=?\r\n";
  AT.getCMGF.response = INIT_STATE;
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  queue[0] = AT.at.request;
  queue[1] = AT.cops.request;

  HAL_UART_Receive_IT(&huart1,gprs.rx_buff,RX_BUFFER_SIZE);
 8002c32:	2201      	movs	r2, #1
  AT.at.request = "AT\r\n";
 8002c34:	4c0b      	ldr	r4, [pc, #44]	; (8002c64 <initAT+0x54>)
  AT.cops.request = "AT+COPS?\r\n";
 8002c36:	480c      	ldr	r0, [pc, #48]	; (8002c68 <initAT+0x58>)
  AT.setCMGF.request = "AT+CMGF=1\r\n";
 8002c38:	625d      	str	r5, [r3, #36]	; 0x24
  AT.getCMGF.request = "AT+CMGF=?\r\n";
 8002c3a:	4d0c      	ldr	r5, [pc, #48]	; (8002c6c <initAT+0x5c>)
  AT.at.request = "AT\r\n";
 8002c3c:	601c      	str	r4, [r3, #0]
  AT.cops.request = "AT+COPS?\r\n";
 8002c3e:	6198      	str	r0, [r3, #24]
  AT.getCMGF.request = "AT+CMGF=?\r\n";
 8002c40:	631d      	str	r5, [r3, #48]	; 0x30
  queue[0] = AT.at.request;
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <initAT+0x60>)
  HAL_UART_Receive_IT(&huart1,gprs.rx_buff,RX_BUFFER_SIZE);
 8002c44:	4411      	add	r1, r2
  queue[0] = AT.at.request;
 8002c46:	601c      	str	r4, [r3, #0]
  queue[1] = AT.cops.request;
 8002c48:	6058      	str	r0, [r3, #4]
}
 8002c4a:	bc30      	pop	{r4, r5}
  HAL_UART_Receive_IT(&huart1,gprs.rx_buff,RX_BUFFER_SIZE);
 8002c4c:	4809      	ldr	r0, [pc, #36]	; (8002c74 <initAT+0x64>)
 8002c4e:	f7ff bc28 	b.w	80024a2 <HAL_UART_Receive_IT>
 8002c52:	bf00      	nop
 8002c54:	200003b0 	.word	0x200003b0
 8002c58:	08003b6b 	.word	0x08003b6b
 8002c5c:	200002c8 	.word	0x200002c8
 8002c60:	08003b60 	.word	0x08003b60
 8002c64:	08003b50 	.word	0x08003b50
 8002c68:	08003b55 	.word	0x08003b55
 8002c6c:	08003b6c 	.word	0x08003b6c
 8002c70:	200002a0 	.word	0x200002a0
 8002c74:	200003c0 	.word	0x200003c0

08002c78 <sendQueue>:
void
sendQueue()
{
  if (!gprs.busy) {
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <sendQueue+0x2c>)
{
 8002c7a:	b510      	push	{r4, lr}
  if (!gprs.busy) {
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	b982      	cbnz	r2, 8002ca2 <sendQueue+0x2a>
    gprs.busy = true;
 8002c80:	2201      	movs	r2, #1
    gprs.TX = queue[gprs.index];
 8002c82:	7899      	ldrb	r1, [r3, #2]
    gprs.busy = true;
 8002c84:	701a      	strb	r2, [r3, #0]
    gprs.TX = queue[gprs.index];
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <sendQueue+0x30>)
 8002c88:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    HAL_UART_Transmit_IT(&huart1,gprs.TX,strlen(gprs.TX));
 8002c8c:	4620      	mov	r0, r4
    gprs.TX = queue[gprs.index];
 8002c8e:	605c      	str	r4, [r3, #4]
    HAL_UART_Transmit_IT(&huart1,gprs.TX,strlen(gprs.TX));
 8002c90:	f7fd fa5e 	bl	8000150 <strlen>
 8002c94:	4621      	mov	r1, r4
  }
  return;
}
 8002c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit_IT(&huart1,gprs.TX,strlen(gprs.TX));
 8002c9a:	b282      	uxth	r2, r0
 8002c9c:	4803      	ldr	r0, [pc, #12]	; (8002cac <sendQueue+0x34>)
 8002c9e:	f7ff bbe1 	b.w	8002464 <HAL_UART_Transmit_IT>
 8002ca2:	bd10      	pop	{r4, pc}
 8002ca4:	200003b0 	.word	0x200003b0
 8002ca8:	200002a0 	.word	0x200002a0
 8002cac:	200003c0 	.word	0x200003c0

08002cb0 <checkAT>:

void
checkAT()
{
 8002cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t len = strlen(gprs.TX); //namelen = strlen(name);
 8002cb4:	4c24      	ldr	r4, [pc, #144]	; (8002d48 <checkAT+0x98>)
 8002cb6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002cba:	4640      	mov	r0, r8
 8002cbc:	f7fd fa48 	bl	8000150 <strlen>
	//
	//har* copy;
	char* str2;
	if(len!=0){
 8002cc0:	4606      	mov	r6, r0
 8002cc2:	b168      	cbz	r0, 8002ce0 <checkAT+0x30>
		str2 = (char*)malloc(len-1);
 8002cc4:	1e47      	subs	r7, r0, #1
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	f000 fdd0 	bl	800386c <malloc>
		strncpy(str2, gprs.TX,len-2);
 8002ccc:	1eb2      	subs	r2, r6, #2
 8002cce:	4641      	mov	r1, r8
		str2 = (char*)malloc(len-1);
 8002cd0:	4605      	mov	r5, r0
		strncpy(str2, gprs.TX,len-2);
 8002cd2:	f000 fe9d 	bl	8003a10 <strncpy>
		str2[len-1] =0;
 8002cd6:	2300      	movs	r3, #0
		free(str2);
 8002cd8:	4628      	mov	r0, r5
		str2[len-1] =0;
 8002cda:	55eb      	strb	r3, [r5, r7]
		free(str2);
 8002cdc:	f000 fdce 	bl	800387c <free>
	}

  int txPosition = strpos(gprs.RX, str2, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	68a0      	ldr	r0, [r4, #8]
 8002ce6:	f7ff ff71 	bl	8002bcc <strpos>
 8002cea:	4607      	mov	r7, r0
  // printf ( "tx position: %d\n\n", txPosition );

  if(len!=0)
 8002cec:	b116      	cbz	r6, 8002cf4 <checkAT+0x44>
  	free(str2);
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f000 fdc4 	bl	800387c <free>

  int okPosition = strpos(gprs.RX, "OK", 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4915      	ldr	r1, [pc, #84]	; (8002d4c <checkAT+0x9c>)
 8002cf8:	68a0      	ldr	r0, [r4, #8]
 8002cfa:	f7ff ff67 	bl	8002bcc <strpos>
 8002cfe:	4605      	mov	r5, r0
  // printf ( "ok position: %d\n\n", okPosition );

  int errorPosition = strpos(gprs.RX, "ERROR", 0);
 8002d00:	2200      	movs	r2, #0
 8002d02:	4913      	ldr	r1, [pc, #76]	; (8002d50 <checkAT+0xa0>)
 8002d04:	68a0      	ldr	r0, [r4, #8]
 8002d06:	f7ff ff61 	bl	8002bcc <strpos>
  // printf ( "error position: %d\n\n", errorPosition );

  int8_t response =
 8002d0a:	2d00      	cmp	r5, #0
 8002d0c:	dc0e      	bgt.n	8002d2c <checkAT+0x7c>
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	bfcc      	ite	gt
 8002d12:	2000      	movgt	r0, #0
 8002d14:	2001      	movle	r0, #1
 8002d16:	4240      	negs	r0, r0
    (okPosition > 0) ? OK : (errorPosition > 0) ? ERROR : INIT_STATE;
  if (txPosition >= 0) {
 8002d18:	2f00      	cmp	r7, #0
 8002d1a:	db13      	blt.n	8002d44 <checkAT+0x94>
    if (gprs.TX == AT.at.request) {
 8002d1c:	4d0d      	ldr	r5, [pc, #52]	; (8002d54 <checkAT+0xa4>)
 8002d1e:	6863      	ldr	r3, [r4, #4]
 8002d20:	682a      	ldr	r2, [r5, #0]
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d104      	bne.n	8002d30 <checkAT+0x80>
      AT.at.response = response;
 8002d26:	7128      	strb	r0, [r5, #4]
 8002d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int8_t response =
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	e7f3      	b.n	8002d18 <checkAT+0x68>
    } else if (gprs.TX == AT.cops.request) {
 8002d30:	69aa      	ldr	r2, [r5, #24]
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d106      	bne.n	8002d44 <checkAT+0x94>
      AT.cops.response = response;
 8002d36:	7728      	strb	r0, [r5, #28]
      char* found = strstr(gprs.RX, ": ");
 8002d38:	4907      	ldr	r1, [pc, #28]	; (8002d58 <checkAT+0xa8>)
 8002d3a:	68a0      	ldr	r0, [r4, #8]
 8002d3c:	f000 fe7d 	bl	8003a3a <strstr>
      AT.cops.args = found + 2;
 8002d40:	3002      	adds	r0, #2
 8002d42:	6228      	str	r0, [r5, #32]
 8002d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d48:	200003b0 	.word	0x200003b0
 8002d4c:	08003b44 	.word	0x08003b44
 8002d50:	08003b47 	.word	0x08003b47
 8002d54:	200002c8 	.word	0x200002c8
 8002d58:	08003b4d 	.word	0x08003b4d

08002d5c <checkUpdate>:
  return;
}

void
checkUpdate()
{
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=0;i<RX_BUFFER_SIZE;i++){
	  if (gprs.rx_buff[i] != '\0') {
 8002d5e:	4c0e      	ldr	r4, [pc, #56]	; (8002d98 <checkUpdate+0x3c>)
 8002d60:	7866      	ldrb	r6, [r4, #1]
 8002d62:	b17e      	cbz	r6, 8002d84 <checkUpdate+0x28>

		size_t len = strlen(gprs.RX);
 8002d64:	68a7      	ldr	r7, [r4, #8]
 8002d66:	4638      	mov	r0, r7
 8002d68:	f7fd f9f2 	bl	8000150 <strlen>
 8002d6c:	4605      	mov	r5, r0
		char* str2 = (char*)malloc(len + 1 + 1);
 8002d6e:	3002      	adds	r0, #2
 8002d70:	f000 fd7c 	bl	800386c <malloc>
		strcpy(str2, gprs.RX);
 8002d74:	4639      	mov	r1, r7
 8002d76:	f000 fe43 	bl	8003a00 <strcpy>
		str2[len] = gprs.rx_buff[i];
		str2[len + 1] = '\0';
 8002d7a:	2200      	movs	r2, #0
		str2[len] = gprs.rx_buff[i];
 8002d7c:	5546      	strb	r6, [r0, r5]
		str2[len + 1] = '\0';
 8002d7e:	4405      	add	r5, r0
 8002d80:	706a      	strb	r2, [r5, #1]

		gprs.RX = str2;
 8002d82:	60a0      	str	r0, [r4, #8]
		//free(str2);
	  }
	  gprs.rx_buff[i] = '\0';
 8002d84:	2300      	movs	r3, #0
	}
	  HAL_UART_Receive_IT(&huart1, gprs.rx_buff, RX_BUFFER_SIZE);
 8002d86:	2201      	movs	r2, #1
	  gprs.rx_buff[i] = '\0';
 8002d88:	7063      	strb	r3, [r4, #1]
	  HAL_UART_Receive_IT(&huart1, gprs.rx_buff, RX_BUFFER_SIZE);
 8002d8a:	4904      	ldr	r1, [pc, #16]	; (8002d9c <checkUpdate+0x40>)
 8002d8c:	4804      	ldr	r0, [pc, #16]	; (8002da0 <checkUpdate+0x44>)
}
 8002d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	  HAL_UART_Receive_IT(&huart1, gprs.rx_buff, RX_BUFFER_SIZE);
 8002d92:	f7ff bb86 	b.w	80024a2 <HAL_UART_Receive_IT>
 8002d96:	bf00      	nop
 8002d98:	200003b0 	.word	0x200003b0
 8002d9c:	200003b1 	.word	0x200003b1
 8002da0:	200003c0 	.word	0x200003c0

08002da4 <HAL_TIM_PeriodElapsedCallback>:
 HAL_SPI_Receive_IT(&hspi2, RPi_SPI.rx_buff, 3);

 }
 }*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM4) //check if the interrupt comes from TIM4
 8002da4:	6803      	ldr	r3, [r0, #0]
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d104      	bne.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x12>
	{
		micros++;
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002dae:	6813      	ldr	r3, [r2, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4770      	bx	lr
	}
	if (htim->Instance == TIM2) //check if the interrupt comes from TIM1
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
	{
		rised = true;
 8002dba:	bf02      	ittt	eq
 8002dbc:	2201      	moveq	r2, #1
 8002dbe:	4b03      	ldreq	r3, [pc, #12]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002dc0:	701a      	strbeq	r2, [r3, #0]
 8002dc2:	4770      	bx	lr
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	20000584 	.word	0x20000584
 8002dcc:	200000d2 	.word	0x200000d2

08002dd0 <HAL_TIM_IC_CaptureCallback>:
		//stateChanged=true;
		//readResponseInProgress = false;
	}
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) //check if the interrupt comes from TIM1
 8002dd2:	6803      	ldr	r3, [r0, #0]
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002dd4:	4605      	mov	r5, r0
	if (htim->Instance == TIM2) //check if the interrupt comes from TIM1
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dda:	d127      	bne.n	8002e2c <HAL_TIM_IC_CaptureCallback+0x5c>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002ddc:	7f06      	ldrb	r6, [r0, #28]
 8002dde:	4c14      	ldr	r4, [pc, #80]	; (8002e30 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002de0:	2e01      	cmp	r6, #1
 8002de2:	d111      	bne.n	8002e08 <HAL_TIM_IC_CaptureCallback+0x38>
			risedCount = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //TIM2->CCR1;
 8002de4:	2100      	movs	r1, #0
 8002de6:	f7fe ff66 	bl	8001cb6 <HAL_TIM_ReadCapturedValue>
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_TIM_IC_CaptureCallback+0x64>)
			//HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
			rised = true;
			//stateChanged = true;
			ttime[swIndex] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002dec:	2100      	movs	r1, #0
			risedCount = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //TIM2->CCR1;
 8002dee:	6018      	str	r0, [r3, #0]
			rised = true;
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_TIM_IC_CaptureCallback+0x68>)
			ttime[swIndex] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002df2:	4628      	mov	r0, r5
			rised = true;
 8002df4:	701e      	strb	r6, [r3, #0]
			ttime[swIndex] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002df6:	6827      	ldr	r7, [r4, #0]
 8002df8:	f7fe ff5d 	bl	8001cb6 <HAL_TIM_ReadCapturedValue>
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <HAL_TIM_IC_CaptureCallback+0x6c>)
			rf[swIndex] = 1;
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <HAL_TIM_IC_CaptureCallback+0x70>)
			ttime[swIndex] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002e00:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
			rf[swIndex] = 1;
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	54d6      	strb	r6, [r2, r3]
			//arrF[swIndex] = 0;
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002e08:	7f2b      	ldrb	r3, [r5, #28]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d10b      	bne.n	8002e26 <HAL_TIM_IC_CaptureCallback+0x56>
			//stateChanged = true;
			ttime[swIndex] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002e0e:	2104      	movs	r1, #4
 8002e10:	4628      	mov	r0, r5
 8002e12:	6826      	ldr	r6, [r4, #0]
 8002e14:	f7fe ff4f 	bl	8001cb6 <HAL_TIM_ReadCapturedValue>
			rf[swIndex] = 0;
 8002e18:	2100      	movs	r1, #0
			ttime[swIndex] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_TIM_IC_CaptureCallback+0x6c>)
			rf[swIndex] = 0;
 8002e1c:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_TIM_IC_CaptureCallback+0x70>)
			ttime[swIndex] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002e1e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
			rf[swIndex] = 0;
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	54d1      	strb	r1, [r2, r3]
			//arrR[swIndex] = 0;
		}
		swIndex++;
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	6023      	str	r3, [r4, #0]
 8002e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200000d8 	.word	0x200000d8
 8002e34:	200003bc 	.word	0x200003bc
 8002e38:	200000d2 	.word	0x200000d2
 8002e3c:	20000484 	.word	0x20000484
 8002e40:	200000ed 	.word	0x200000ed

08002e44 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance==USART3)
 8002e44:	6802      	ldr	r2, [r0, #0]
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <HAL_UART_RxCpltCallback+0x24>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e48:	b510      	push	{r4, lr}
	if (huart->Instance==USART3)
 8002e4a:	429a      	cmp	r2, r3
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e4c:	4604      	mov	r4, r0
	if (huart->Instance==USART3)
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_RxCpltCallback+0x10>
        RPiRXRoute();
 8002e50:	f7ff fe3a 	bl	8002ac8 <RPiRXRoute>
	if (huart->Instance==USART1)
 8002e54:	6822      	ldr	r2, [r4, #0]
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_UART_RxCpltCallback+0x28>)
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d103      	bne.n	8002e64 <HAL_UART_RxCpltCallback+0x20>
		checkUpdate();
}
 8002e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		checkUpdate();
 8002e60:	f7ff bf7c 	b.w	8002d5c <checkUpdate>
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	bf00      	nop
 8002e68:	40004800 	.word	0x40004800
 8002e6c:	40013800 	.word	0x40013800

08002e70 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void) {
 8002e70:	b508      	push	{r3, lr}
//		}
//	}
	//strstr( gprs.RX, "in" );
	//if(index>=0)

	checkAT();
 8002e72:	f7ff ff1d 	bl	8002cb0 <checkAT>
      if(HAL_GetTick()%200==0)
 8002e76:	f7fd fdf7 	bl	8000a68 <HAL_GetTick>
 8002e7a:	23c8      	movs	r3, #200	; 0xc8
 8002e7c:	fbb0 f2f3 	udiv	r2, r0, r3
 8002e80:	fb02 0013 	mls	r0, r2, r3, r0
 8002e84:	b908      	cbnz	r0, 8002e8a <HAL_SYSTICK_Callback+0x1a>
              OWTick200();
 8002e86:	f7ff fdc3 	bl	8002a10 <OWTick200>
      if(HAL_GetTick()%300==0 && ot.complete){
 8002e8a:	f7fd fded 	bl	8000a68 <HAL_GetTick>
 8002e8e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002e92:	fbb0 f2f3 	udiv	r2, r0, r3
 8002e96:	fb02 0013 	mls	r0, r2, r3, r0
 8002e9a:	b938      	cbnz	r0, 8002eac <HAL_SYSTICK_Callback+0x3c>
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_SYSTICK_Callback+0x40>)
 8002e9e:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8002ea2:	b11a      	cbz	r2, 8002eac <HAL_SYSTICK_Callback+0x3c>
    	  ot.complete = false;
 8002ea4:	f883 006a 	strb.w	r0, [r3, #106]	; 0x6a
    	  ot.busy=false;
 8002ea8:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
 8002eac:	bd08      	pop	{r3, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000620 	.word	0x20000620

08002eb4 <SystemClock_Config>:
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb4:	2301      	movs	r3, #1
void SystemClock_Config(void) {
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eba:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002ec0:	2300      	movs	r3, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ec2:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002ec4:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ec6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002eca:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ecc:	940a      	str	r4, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ece:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ed0:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ed2:	f7fe fa5b 	bl	800138c <HAL_RCC_OscConfig>
 8002ed6:	b100      	cbz	r0, 8002eda <SystemClock_Config+0x26>
 8002ed8:	e7fe      	b.n	8002ed8 <SystemClock_Config+0x24>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002eda:	230f      	movs	r3, #15
 8002edc:	9305      	str	r3, [sp, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ee2:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ee4:	9009      	str	r0, [sp, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	a805      	add	r0, sp, #20
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eea:	9406      	str	r4, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eec:	9308      	str	r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002eee:	f7fe fc15 	bl	800171c <HAL_RCC_ClockConfig>
 8002ef2:	b100      	cbz	r0, 8002ef6 <SystemClock_Config+0x42>
 8002ef4:	e7fe      	b.n	8002ef4 <SystemClock_Config+0x40>
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002efa:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002efc:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002efe:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002f00:	f7fe fcd6 	bl	80018b0 <HAL_RCCEx_PeriphCLKConfig>
 8002f04:	4604      	mov	r4, r0
 8002f06:	b100      	cbz	r0, 8002f0a <SystemClock_Config+0x56>
 8002f08:	e7fe      	b.n	8002f08 <SystemClock_Config+0x54>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002f0a:	f7fe fcab 	bl	8001864 <HAL_RCC_GetHCLKFreq>
 8002f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f12:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f16:	f7fe f861 	bl	8000fdc <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f1a:	2004      	movs	r0, #4
 8002f1c:	f7fe f874 	bl	8001008 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f20:	4622      	mov	r2, r4
 8002f22:	4621      	mov	r1, r4
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7fe f818 	bl	8000f5c <HAL_NVIC_SetPriority>
}
 8002f2c:	b014      	add	sp, #80	; 0x50
 8002f2e:	bd10      	pop	{r4, pc}

08002f30 <main>:
int main(void) {
 8002f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f34:	b08e      	sub	sp, #56	; 0x38
	HAL_Init();
 8002f36:	f7fd fd79 	bl	8000a2c <HAL_Init>
	SystemClock_Config();
 8002f3a:	f7ff ffbb 	bl	8002eb4 <SystemClock_Config>
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002f3e:	4b97      	ldr	r3, [pc, #604]	; (800319c <main+0x26c>)
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002f40:	2140      	movs	r1, #64	; 0x40
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002f42:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002f44:	4896      	ldr	r0, [pc, #600]	; (80031a0 <main+0x270>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002f46:	f042 0210 	orr.w	r2, r2, #16
 8002f4a:	619a      	str	r2, [r3, #24]
 8002f4c:	699a      	ldr	r2, [r3, #24]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_R_Pin */
	GPIO_InitStruct.Pin = LED_R_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4e:	2501      	movs	r5, #1
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002f50:	f002 0210 	and.w	r2, r2, #16
 8002f54:	9200      	str	r2, [sp, #0]
 8002f56:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002f58:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2402      	movs	r4, #2
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002f5c:	f042 0204 	orr.w	r2, r2, #4
 8002f60:	619a      	str	r2, [r3, #24]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	f002 0204 	and.w	r2, r2, #4
 8002f68:	9201      	str	r2, [sp, #4]
 8002f6a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	f042 0208 	orr.w	r2, r2, #8
 8002f72:	619a      	str	r2, [r3, #24]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	f002 0208 	and.w	r2, r2, #8
 8002f7a:	9202      	str	r2, [sp, #8]
 8002f7c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	f042 0220 	orr.w	r2, r2, #32
 8002f84:	619a      	str	r2, [r3, #24]
 8002f86:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002f88:	2200      	movs	r2, #0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	9303      	str	r3, [sp, #12]
 8002f90:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002f92:	f7fe f971 	bl	8001278 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OT_RXO_GPIO_Port, OT_RXO_Pin, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f9c:	4881      	ldr	r0, [pc, #516]	; (80031a4 <main+0x274>)
 8002f9e:	f7fe f96b 	bl	8001278 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	4880      	ldr	r0, [pc, #512]	; (80031a8 <main+0x278>)
 8002fa8:	f7fe f966 	bl	8001278 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LED_R_Pin;
 8002fac:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002fae:	a90a      	add	r1, sp, #40	; 0x28
 8002fb0:	487b      	ldr	r0, [pc, #492]	; (80031a0 <main+0x270>)
	GPIO_InitStruct.Pin = LED_R_Pin;
 8002fb2:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb6:	950b      	str	r5, [sp, #44]	; 0x2c
	HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002fb8:	f7fe f87e 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OT_RXO_Pin */
	GPIO_InitStruct.Pin = OT_RXO_Pin;
 8002fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(OT_RXO_GPIO_Port, &GPIO_InitStruct);
 8002fc0:	a90a      	add	r1, sp, #40	; 0x28
 8002fc2:	4878      	ldr	r0, [pc, #480]	; (80031a4 <main+0x274>)
	GPIO_InitStruct.Pin = OT_RXO_Pin;
 8002fc4:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc8:	950b      	str	r5, [sp, #44]	; 0x2c
	HAL_GPIO_Init(OT_RXO_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f7fe f875 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : NSS1_Pin */
	GPIO_InitStruct.Pin = NSS1_Pin;
 8002fce:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8002fd0:	4875      	ldr	r0, [pc, #468]	; (80031a8 <main+0x278>)
 8002fd2:	a90a      	add	r1, sp, #40	; 0x28
	GPIO_InitStruct.Pin = NSS1_Pin;
 8002fd4:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd8:	950b      	str	r5, [sp, #44]	; 0x2c
	hadc1.Instance = ADC1;
 8002fda:	4c74      	ldr	r4, [pc, #464]	; (80031ac <main+0x27c>)
	HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8002fdc:	f7fe f86c 	bl	80010b8 <HAL_GPIO_Init>
	hadc1.Instance = ADC1;
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <main+0x280>)
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fe2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
	hadc1.Instance = ADC1;
 8002fe6:	6023      	str	r3, [r4, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fe8:	2300      	movs	r3, #0
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002fea:	4620      	mov	r0, r4
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fec:	60a3      	str	r3, [r4, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002fee:	60e3      	str	r3, [r4, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ff0:	6163      	str	r3, [r4, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ff2:	61e2      	str	r2, [r4, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ff4:	6063      	str	r3, [r4, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002ff6:	6125      	str	r5, [r4, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002ff8:	f7fd fe92 	bl	8000d20 <HAL_ADC_Init>
 8002ffc:	b100      	cbz	r0, 8003000 <main+0xd0>
 8002ffe:	e7fe      	b.n	8002ffe <main+0xce>
	sConfig.Channel = ADC_CHANNEL_0;
 8003000:	900a      	str	r0, [sp, #40]	; 0x28
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003002:	900c      	str	r0, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003004:	a90a      	add	r1, sp, #40	; 0x28
 8003006:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003008:	950b      	str	r5, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800300a:	f7fd fd49 	bl	8000aa0 <HAL_ADC_ConfigChannel>
 800300e:	b100      	cbz	r0, 8003012 <main+0xe2>
 8003010:	e7fe      	b.n	8003010 <main+0xe0>
	hcan.Init.Prescaler = 16;
 8003012:	2610      	movs	r6, #16
	hcan.Instance = CAN1;
 8003014:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <main+0x284>)
	hcan.Init.Prescaler = 16;
 8003016:	4a68      	ldr	r2, [pc, #416]	; (80031b8 <main+0x288>)
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8003018:	6098      	str	r0, [r3, #8]
	hcan.Init.SJW = CAN_SJW_1TQ;
 800301a:	60d8      	str	r0, [r3, #12]
	hcan.Init.BS1 = CAN_BS1_1TQ;
 800301c:	6118      	str	r0, [r3, #16]
	hcan.Init.BS2 = CAN_BS2_1TQ;
 800301e:	6158      	str	r0, [r3, #20]
	hcan.Init.TTCM = DISABLE;
 8003020:	6198      	str	r0, [r3, #24]
	hcan.Init.ABOM = DISABLE;
 8003022:	61d8      	str	r0, [r3, #28]
	hcan.Init.AWUM = DISABLE;
 8003024:	6218      	str	r0, [r3, #32]
	hcan.Init.NART = DISABLE;
 8003026:	6258      	str	r0, [r3, #36]	; 0x24
	hcan.Init.RFLM = DISABLE;
 8003028:	6298      	str	r0, [r3, #40]	; 0x28
	hcan.Init.TXFP = DISABLE;
 800302a:	62d8      	str	r0, [r3, #44]	; 0x2c
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800302c:	4618      	mov	r0, r3
	hcan.Init.Prescaler = 16;
 800302e:	e883 0044 	stmia.w	r3, {r2, r6}
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8003032:	f7fd fef5 	bl	8000e20 <HAL_CAN_Init>
 8003036:	b100      	cbz	r0, 800303a <main+0x10a>
 8003038:	e7fe      	b.n	8003038 <main+0x108>
	hi2c1.Instance = I2C1;
 800303a:	4b60      	ldr	r3, [pc, #384]	; (80031bc <main+0x28c>)
	hi2c1.Init.ClockSpeed = 100000;
 800303c:	4a60      	ldr	r2, [pc, #384]	; (80031c0 <main+0x290>)
 800303e:	4d61      	ldr	r5, [pc, #388]	; (80031c4 <main+0x294>)
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003040:	6098      	str	r0, [r3, #8]
	hi2c1.Init.ClockSpeed = 100000;
 8003042:	e883 0024 	stmia.w	r3, {r2, r5}
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 800304a:	60d8      	str	r0, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800304c:	6158      	str	r0, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800304e:	6198      	str	r0, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003050:	61d8      	str	r0, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003052:	6218      	str	r0, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003054:	4618      	mov	r0, r3
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003056:	611a      	str	r2, [r3, #16]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003058:	f7fe f918 	bl	800128c <HAL_I2C_Init>
 800305c:	b100      	cbz	r0, 8003060 <main+0x130>
 800305e:	e7fe      	b.n	800305e <main+0x12e>
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003060:	f44f 7482 	mov.w	r4, #260	; 0x104
	hspi1.Instance = SPI1;
 8003064:	4b58      	ldr	r3, [pc, #352]	; (80031c8 <main+0x298>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003066:	4a59      	ldr	r2, [pc, #356]	; (80031cc <main+0x29c>)
	hspi1.Init.CRCPolynomial = 10;
 8003068:	250a      	movs	r5, #10
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800306a:	e883 0014 	stmia.w	r3, {r2, r4}
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800306e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003072:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003074:	2228      	movs	r2, #40	; 0x28
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003076:	6098      	str	r0, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003078:	60d8      	str	r0, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800307a:	6118      	str	r0, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800307c:	6158      	str	r0, [r3, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800307e:	6218      	str	r0, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003080:	6258      	str	r0, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003082:	6298      	str	r0, [r3, #40]	; 0x28
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003084:	4618      	mov	r0, r3
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003086:	61da      	str	r2, [r3, #28]
	hspi1.Init.CRCPolynomial = 10;
 8003088:	62dd      	str	r5, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800308a:	f7fe fcfb 	bl	8001a84 <HAL_SPI_Init>
 800308e:	b100      	cbz	r0, 8003092 <main+0x162>
 8003090:	e7fe      	b.n	8003090 <main+0x160>
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003092:	2420      	movs	r4, #32
	hspi2.Instance = SPI2;
 8003094:	4b4e      	ldr	r3, [pc, #312]	; (80031d0 <main+0x2a0>)
 8003096:	4a4f      	ldr	r2, [pc, #316]	; (80031d4 <main+0x2a4>)
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8003098:	6058      	str	r0, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800309a:	6098      	str	r0, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800309c:	60d8      	str	r0, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800309e:	6118      	str	r0, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a0:	6158      	str	r0, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80030a2:	6198      	str	r0, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030a4:	6218      	str	r0, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030a6:	6258      	str	r0, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a8:	6298      	str	r0, [r3, #40]	; 0x28
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80030aa:	4618      	mov	r0, r3
	hspi2.Instance = SPI2;
 80030ac:	601a      	str	r2, [r3, #0]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80030ae:	61dc      	str	r4, [r3, #28]
	hspi2.Init.CRCPolynomial = 10;
 80030b0:	62dd      	str	r5, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80030b2:	f7fe fce7 	bl	8001a84 <HAL_SPI_Init>
 80030b6:	b100      	cbz	r0, 80030ba <main+0x18a>
 80030b8:	e7fe      	b.n	80030b8 <main+0x188>
	huart1.Init.BaudRate = 9600;
 80030ba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
	huart1.Init.Mode = UART_MODE_TX_RX;
 80030be:	250c      	movs	r5, #12
	huart1.Instance = USART1;
 80030c0:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <main+0x2a8>)
	huart1.Init.BaudRate = 9600;
 80030c2:	4946      	ldr	r1, [pc, #280]	; (80031dc <main+0x2ac>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030c4:	6098      	str	r0, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80030c6:	60d8      	str	r0, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80030c8:	6118      	str	r0, [r3, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ca:	6198      	str	r0, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030cc:	61d8      	str	r0, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80030ce:	4618      	mov	r0, r3
	huart1.Init.BaudRate = 9600;
 80030d0:	e883 0006 	stmia.w	r3, {r1, r2}
	huart1.Init.Mode = UART_MODE_TX_RX;
 80030d4:	615d      	str	r5, [r3, #20]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80030d6:	f7ff f93b 	bl	8002350 <HAL_UART_Init>
 80030da:	b100      	cbz	r0, 80030de <main+0x1ae>
 80030dc:	e7fe      	b.n	80030dc <main+0x1ac>
	huart2.Init.BaudRate = 115200;
 80030de:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
	huart2.Instance = USART2;
 80030e2:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <main+0x2b0>)
	huart2.Init.BaudRate = 115200;
 80030e4:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <main+0x2b4>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030e6:	6098      	str	r0, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80030e8:	60d8      	str	r0, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80030ea:	6118      	str	r0, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ec:	6198      	str	r0, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ee:	61d8      	str	r0, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80030f0:	4618      	mov	r0, r3
	huart2.Init.BaudRate = 115200;
 80030f2:	e883 0044 	stmia.w	r3, {r2, r6}
	huart2.Init.Mode = UART_MODE_TX_RX;
 80030f6:	615d      	str	r5, [r3, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80030f8:	f7ff f92a 	bl	8002350 <HAL_UART_Init>
 80030fc:	b100      	cbz	r0, 8003100 <main+0x1d0>
 80030fe:	e7fe      	b.n	80030fe <main+0x1ce>
	huart3.Instance = USART3;
 8003100:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <main+0x2b8>)
 8003102:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <main+0x2bc>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003104:	6098      	str	r0, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8003106:	60d8      	str	r0, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8003108:	6118      	str	r0, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310a:	6198      	str	r0, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800310c:	61d8      	str	r0, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800310e:	4618      	mov	r0, r3
	huart3.Init.BaudRate = 115200;
 8003110:	e883 0044 	stmia.w	r3, {r2, r6}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003114:	615d      	str	r5, [r3, #20]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8003116:	f7ff f91b 	bl	8002350 <HAL_UART_Init>
 800311a:	b100      	cbz	r0, 800311e <main+0x1ee>
 800311c:	e7fe      	b.n	800311c <main+0x1ec>
	htim4.Instance = TIM4;
 800311e:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <main+0x2c0>)
 8003120:	4a34      	ldr	r2, [pc, #208]	; (80031f4 <main+0x2c4>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003122:	6098      	str	r0, [r3, #8]
	htim4.Init.Prescaler = 32;
 8003124:	e883 0014 	stmia.w	r3, {r2, r4}
	htim4.Init.Period = 65000;
 8003128:	f64f 52e8 	movw	r2, #65000	; 0xfde8
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312c:	6118      	str	r0, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312e:	6198      	str	r0, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8003130:	4618      	mov	r0, r3
	htim4.Init.Period = 65000;
 8003132:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8003134:	f7fe fec0 	bl	8001eb8 <HAL_TIM_Base_Init>
 8003138:	b100      	cbz	r0, 800313c <main+0x20c>
 800313a:	e7fe      	b.n	800313a <main+0x20a>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800313c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003140:	a90a      	add	r1, sp, #40	; 0x28
 8003142:	482b      	ldr	r0, [pc, #172]	; (80031f0 <main+0x2c0>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003144:	950a      	str	r5, [sp, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003146:	f7fe fcfd 	bl	8001b44 <HAL_TIM_ConfigClockSource>
 800314a:	b100      	cbz	r0, 800314e <main+0x21e>
 800314c:	e7fe      	b.n	800314c <main+0x21c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314e:	9006      	str	r0, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003150:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003152:	a906      	add	r1, sp, #24
 8003154:	4826      	ldr	r0, [pc, #152]	; (80031f0 <main+0x2c0>)
 8003156:	f7ff f803 	bl	8002160 <HAL_TIMEx_MasterConfigSynchronization>
 800315a:	b100      	cbz	r0, 800315e <main+0x22e>
 800315c:	e7fe      	b.n	800315c <main+0x22c>
	htim2.Init.Prescaler = 64000;
 800315e:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8003162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	htim2.Instance = TIM2;
 8003166:	4c24      	ldr	r4, [pc, #144]	; (80031f8 <main+0x2c8>)
	htim2.Init.Prescaler = 64000;
 8003168:	e884 000c 	stmia.w	r4, {r2, r3}
	htim2.Init.Period = 900;
 800316c:	f44f 7361 	mov.w	r3, #900	; 0x384
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003170:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003172:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003174:	61a0      	str	r0, [r4, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003176:	4620      	mov	r0, r4
	htim2.Init.Period = 900;
 8003178:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800317a:	f7fe fe9d 	bl	8001eb8 <HAL_TIM_Base_Init>
 800317e:	b100      	cbz	r0, 8003182 <main+0x252>
 8003180:	e7fe      	b.n	8003180 <main+0x250>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003182:	a906      	add	r1, sp, #24
 8003184:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003186:	9506      	str	r5, [sp, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003188:	f7fe fcdc 	bl	8001b44 <HAL_TIM_ConfigClockSource>
 800318c:	b100      	cbz	r0, 8003190 <main+0x260>
 800318e:	e7fe      	b.n	800318e <main+0x25e>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003190:	4620      	mov	r0, r4
 8003192:	f7fe feab 	bl	8001eec <HAL_TIM_IC_Init>
 8003196:	b388      	cbz	r0, 80031fc <main+0x2cc>
 8003198:	e7fe      	b.n	8003198 <main+0x268>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	40011000 	.word	0x40011000
 80031a4:	40010800 	.word	0x40010800
 80031a8:	40011400 	.word	0x40011400
 80031ac:	20000380 	.word	0x20000380
 80031b0:	40012400 	.word	0x40012400
 80031b4:	20000320 	.word	0x20000320
 80031b8:	40006400 	.word	0x40006400
 80031bc:	2000024c 	.word	0x2000024c
 80031c0:	40005400 	.word	0x40005400
 80031c4:	000186a0 	.word	0x000186a0
 80031c8:	20000588 	.word	0x20000588
 80031cc:	40013000 	.word	0x40013000
 80031d0:	20000150 	.word	0x20000150
 80031d4:	40003800 	.word	0x40003800
 80031d8:	200003c0 	.word	0x200003c0
 80031dc:	40013800 	.word	0x40013800
 80031e0:	20000690 	.word	0x20000690
 80031e4:	40004400 	.word	0x40004400
 80031e8:	2000020c 	.word	0x2000020c
 80031ec:	40004800 	.word	0x40004800
 80031f0:	200001b4 	.word	0x200001b4
 80031f4:	40000800 	.word	0x40000800
 80031f8:	200005e0 	.word	0x200005e0
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031fc:	9004      	str	r0, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031fe:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003200:	a904      	add	r1, sp, #16
 8003202:	4620      	mov	r0, r4
 8003204:	f7fe ffac 	bl	8002160 <HAL_TIMEx_MasterConfigSynchronization>
 8003208:	4602      	mov	r2, r0
 800320a:	b100      	cbz	r0, 800320e <main+0x2de>
 800320c:	e7fe      	b.n	800320c <main+0x2dc>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800320e:	2301      	movs	r3, #1
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003210:	900a      	str	r0, [sp, #40]	; 0x28
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003212:	900c      	str	r0, [sp, #48]	; 0x30
	sConfigIC.ICFilter = 0;
 8003214:	900d      	str	r0, [sp, #52]	; 0x34
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003216:	a90a      	add	r1, sp, #40	; 0x28
 8003218:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800321a:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800321c:	f7fe feaa 	bl	8001f74 <HAL_TIM_IC_ConfigChannel>
 8003220:	b100      	cbz	r0, 8003224 <main+0x2f4>
 8003222:	e7fe      	b.n	8003222 <main+0x2f2>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003224:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003226:	2204      	movs	r2, #4
 8003228:	a90a      	add	r1, sp, #40	; 0x28
 800322a:	4620      	mov	r0, r4
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800322c:	930a      	str	r3, [sp, #40]	; 0x28
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800322e:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003230:	f7fe fea0 	bl	8001f74 <HAL_TIM_IC_ConfigChannel>
 8003234:	b100      	cbz	r0, 8003238 <main+0x308>
 8003236:	e7fe      	b.n	8003236 <main+0x306>
	micros = 0;
 8003238:	4b37      	ldr	r3, [pc, #220]	; (8003318 <main+0x3e8>)
 800323a:	6018      	str	r0, [r3, #0]
	initADC();
 800323c:	f7ff fbf6 	bl	8002a2c <initADC>
	RPiInit();
 8003240:	f7ff fc1e 	bl	8002a80 <RPiInit>
	OWInit();
 8003244:	f7ff fbda 	bl	80029fc <OWInit>
	initAT();
 8003248:	f7ff fce2 	bl	8002c10 <initAT>
	initOT();
 800324c:	f7ff fa38 	bl	80026c0 <initOT>
	activateBoiler();
 8003250:	f7ff fa58 	bl	8002704 <activateBoiler>
	uint32_t counter2 = *(__IO uint32_t *) 0x08010004;
 8003254:	4b31      	ldr	r3, [pc, #196]	; (800331c <main+0x3ec>)
	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8003256:	2140      	movs	r1, #64	; 0x40
 8003258:	4831      	ldr	r0, [pc, #196]	; (8003320 <main+0x3f0>)
	uint32_t counter2 = *(__IO uint32_t *) 0x08010004;
 800325a:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800325c:	f7fe f811 	bl	8001282 <HAL_GPIO_TogglePin>
		sendQueue();
 8003260:	f7ff fd0a 	bl	8002c78 <sendQueue>
		 RPiRoute();
 8003264:	f7ff fc1c 	bl	8002aa0 <RPiRoute>
		adc.in[ V4_SENSE] = ReadAnalogADC1( V4_SENSE);
 8003268:	2004      	movs	r0, #4
 800326a:	f7ff fbed 	bl	8002a48 <ReadAnalogADC1>
 800326e:	4c2d      	ldr	r4, [pc, #180]	; (8003324 <main+0x3f4>)
					+ adc.in[i] * (3.3 / 4095.0) * (3.9 + 2.2) / 3.9) / 2.0;
 8003270:	2600      	movs	r6, #0
		adc.in[ V4_SENSE] = ReadAnalogADC1( V4_SENSE);
 8003272:	6160      	str	r0, [r4, #20]
		adc.in[ RPI_3V3_SENSE] = ReadAnalogADC1( RPI_3V3_SENSE);
 8003274:	2005      	movs	r0, #5
 8003276:	f7ff fbe7 	bl	8002a48 <ReadAnalogADC1>
 800327a:	61a0      	str	r0, [r4, #24]
		adc.in[ USB_5V_SENSE] = ReadAnalogADC1( USB_5V_SENSE);
 800327c:	2006      	movs	r0, #6
 800327e:	f7ff fbe3 	bl	8002a48 <ReadAnalogADC1>
 8003282:	61e0      	str	r0, [r4, #28]
		adc.in[ VIN_SENSE] = ReadAnalogADC1( VIN_SENSE);
 8003284:	2007      	movs	r0, #7
 8003286:	f7ff fbdf 	bl	8002a48 <ReadAnalogADC1>
 800328a:	6220      	str	r0, [r4, #32]
		adc.in[ A14] = ReadAnalogADC1( A14);
 800328c:	200e      	movs	r0, #14
 800328e:	f7ff fbdb 	bl	8002a48 <ReadAnalogADC1>
 8003292:	63e0      	str	r0, [r4, #60]	; 0x3c
		adc.in[ A15] = ReadAnalogADC1( A15);
 8003294:	200f      	movs	r0, #15
 8003296:	4625      	mov	r5, r4
 8003298:	f7ff fbd6 	bl	8002a48 <ReadAnalogADC1>
					+ adc.in[i] * (3.3 / 4095.0) * (3.9 + 2.2) / 3.9) / 2.0;
 800329c:	4f22      	ldr	r7, [pc, #136]	; (8003328 <main+0x3f8>)
		adc.in[ A15] = ReadAnalogADC1( A15);
 800329e:	f845 0f40 	str.w	r0, [r5, #64]!
 80032a2:	3480      	adds	r4, #128	; 0x80
					+ adc.in[i] * (3.3 / 4095.0) * (3.9 + 2.2) / 3.9) / 2.0;
 80032a4:	f855 0c3c 	ldr.w	r0, [r5, #-60]
 80032a8:	f7fd f8ac 	bl	8000404 <__aeabi_i2d>
 80032ac:	a314      	add	r3, pc, #80	; (adr r3, 8003300 <main+0x3d0>)
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f7fd f90d 	bl	80004d0 <__aeabi_dmul>
 80032b6:	a314      	add	r3, pc, #80	; (adr r3, 8003308 <main+0x3d8>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f7fd f908 	bl	80004d0 <__aeabi_dmul>
 80032c0:	a313      	add	r3, pc, #76	; (adr r3, 8003310 <main+0x3e0>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f7fd fa2d 	bl	8000724 <__aeabi_ddiv>
 80032ca:	4680      	mov	r8, r0
			adc.v[i] = (adc.v[i]
 80032cc:	6868      	ldr	r0, [r5, #4]
					+ adc.in[i] * (3.3 / 4095.0) * (3.9 + 2.2) / 3.9) / 2.0;
 80032ce:	4689      	mov	r9, r1
			adc.v[i] = (adc.v[i]
 80032d0:	f7fd f8aa 	bl	8000428 <__aeabi_f2d>
					+ adc.in[i] * (3.3 / 4095.0) * (3.9 + 2.2) / 3.9) / 2.0;
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4640      	mov	r0, r8
 80032da:	4649      	mov	r1, r9
 80032dc:	f7fc ff46 	bl	800016c <__adddf3>
 80032e0:	4632      	mov	r2, r6
 80032e2:	463b      	mov	r3, r7
 80032e4:	f7fd f8f4 	bl	80004d0 <__aeabi_dmul>
 80032e8:	f7fd fb2c 	bl	8000944 <__aeabi_d2f>
 80032ec:	f845 0f04 	str.w	r0, [r5, #4]!
		for (i = 0; i < 16; i++)
 80032f0:	42ac      	cmp	r4, r5
 80032f2:	d1d7      	bne.n	80032a4 <main+0x374>
		OTRoute();
 80032f4:	f7ff fb08 	bl	8002908 <OTRoute>
		sendQueue();
 80032f8:	e7b2      	b.n	8003260 <main+0x330>
 80032fa:	bf00      	nop
 80032fc:	f3af 8000 	nop.w
 8003300:	e734d9b4 	.word	0xe734d9b4
 8003304:	3f4a680c 	.word	0x3f4a680c
 8003308:	66666666 	.word	0x66666666
 800330c:	40186666 	.word	0x40186666
 8003310:	33333333 	.word	0x33333333
 8003314:	400f3333 	.word	0x400f3333
 8003318:	20000584 	.word	0x20000584
 800331c:	08010004 	.word	0x08010004
 8003320:	40011000 	.word	0x40011000
 8003324:	20000400 	.word	0x20000400
 8003328:	3fe00000 	.word	0x3fe00000

0800332c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800332c:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_MspInit+0x84>)
{
 800332e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003330:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003332:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	619a      	str	r2, [r3, #24]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003344:	f7fd fdf8 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003348:	2200      	movs	r2, #0
 800334a:	f06f 000b 	mvn.w	r0, #11
 800334e:	4611      	mov	r1, r2
 8003350:	f7fd fe04 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003354:	2200      	movs	r2, #0
 8003356:	f06f 000a 	mvn.w	r0, #10
 800335a:	4611      	mov	r1, r2
 800335c:	f7fd fdfe 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	f06f 0009 	mvn.w	r0, #9
 8003366:	4611      	mov	r1, r2
 8003368:	f7fd fdf8 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800336c:	2200      	movs	r2, #0
 800336e:	f06f 0004 	mvn.w	r0, #4
 8003372:	4611      	mov	r1, r2
 8003374:	f7fd fdf2 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003378:	2200      	movs	r2, #0
 800337a:	f06f 0003 	mvn.w	r0, #3
 800337e:	4611      	mov	r1, r2
 8003380:	f7fd fdec 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003384:	2200      	movs	r2, #0
 8003386:	f06f 0001 	mvn.w	r0, #1
 800338a:	4611      	mov	r1, r2
 800338c:	f7fd fde6 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003390:	2200      	movs	r2, #0
 8003392:	f04f 30ff 	mov.w	r0, #4294967295
 8003396:	4611      	mov	r1, r2
 8003398:	f7fd fde0 	bl	8000f5c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800339c:	4a05      	ldr	r2, [pc, #20]	; (80033b4 <HAL_MspInit+0x88>)
 800339e:	6853      	ldr	r3, [r2, #4]
 80033a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033aa:	b003      	add	sp, #12
 80033ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40010000 	.word	0x40010000

080033b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033b8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80033ba:	6802      	ldr	r2, [r0, #0]
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_ADC_MspInit+0x50>)
{
 80033be:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d11f      	bne.n	8003404 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033c4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80033c8:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ca:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	619a      	str	r2, [r3, #24]
 80033d2:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80033de:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e0:	480a      	ldr	r0, [pc, #40]	; (800340c <HAL_ADC_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80033e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e6:	f7fd fe67 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80033ea:	23f3      	movs	r3, #243	; 0xf3
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ec:	a902      	add	r1, sp, #8
 80033ee:	4808      	ldr	r0, [pc, #32]	; (8003410 <HAL_ADC_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80033f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	f7fd fe60 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f8:	a902      	add	r1, sp, #8
 80033fa:	4806      	ldr	r0, [pc, #24]	; (8003414 <HAL_ADC_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033fc:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033fe:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003400:	f7fd fe5a 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003404:	b006      	add	sp, #24
 8003406:	bd10      	pop	{r4, pc}
 8003408:	40012400 	.word	0x40012400
 800340c:	40011000 	.word	0x40011000
 8003410:	40010800 	.word	0x40010800
 8003414:	40010c00 	.word	0x40010c00

08003418 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003418:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 800341a:	6802      	ldr	r2, [r0, #0]
 800341c:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_CAN_MspInit+0x64>)
 800341e:	429a      	cmp	r2, r3
 8003420:	d128      	bne.n	8003474 <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003422:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003426:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003428:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 800342a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800342e:	61da      	str	r2, [r3, #28]
 8003430:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003432:	4813      	ldr	r0, [pc, #76]	; (8003480 <HAL_CAN_MspInit+0x68>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800343c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003440:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003442:	2300      	movs	r3, #0
 8003444:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003448:	f7fd fe36 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800344c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003450:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003456:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003458:	a902      	add	r1, sp, #8
 800345a:	4809      	ldr	r0, [pc, #36]	; (8003480 <HAL_CAN_MspInit+0x68>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345e:	f7fd fe2b 	bl	80010b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <HAL_CAN_MspInit+0x6c>)
 8003464:	6853      	ldr	r3, [r2, #4]
 8003466:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800346a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800346e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003472:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003474:	b007      	add	sp, #28
 8003476:	f85d fb04 	ldr.w	pc, [sp], #4
 800347a:	bf00      	nop
 800347c:	40006400 	.word	0x40006400
 8003480:	40010c00 	.word	0x40010c00
 8003484:	40010000 	.word	0x40010000

08003488 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003488:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800348a:	6802      	ldr	r2, [r0, #0]
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_I2C_MspInit+0x38>)
 800348e:	429a      	cmp	r2, r3
 8003490:	d113      	bne.n	80034ba <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003492:	23c0      	movs	r3, #192	; 0xc0
 8003494:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003496:	2312      	movs	r3, #18
 8003498:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800349a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349c:	a902      	add	r1, sp, #8
 800349e:	4809      	ldr	r0, [pc, #36]	; (80034c4 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a2:	f7fd fe09 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034a6:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <HAL_I2C_MspInit+0x40>)
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80034ae:	61da      	str	r2, [r3, #28]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034ba:	b007      	add	sp, #28
 80034bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80034c0:	40005400 	.word	0x40005400
 80034c4:	40010c00 	.word	0x40010c00
 80034c8:	40021000 	.word	0x40021000

080034cc <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034cc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80034ce:	6803      	ldr	r3, [r0, #0]
 80034d0:	4a2d      	ldr	r2, [pc, #180]	; (8003588 <HAL_SPI_MspInit+0xbc>)
{
 80034d2:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d12d      	bne.n	8003534 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <HAL_SPI_MspInit+0xc0>)
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034dc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034de:	482c      	ldr	r0, [pc, #176]	; (8003590 <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034e4:	619a      	str	r2, [r3, #24]
 80034e6:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e8:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80034f2:	2328      	movs	r3, #40	; 0x28
 80034f4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034fa:	2303      	movs	r3, #3
 80034fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f7fd fddb 	bl	80010b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003502:	2310      	movs	r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003504:	a902      	add	r1, sp, #8
 8003506:	4822      	ldr	r0, [pc, #136]	; (8003590 <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003508:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800350a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350e:	f7fd fdd3 	bl	80010b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003512:	4a20      	ldr	r2, [pc, #128]	; (8003594 <HAL_SPI_MspInit+0xc8>)

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003514:	2023      	movs	r0, #35	; 0x23
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003516:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003518:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800351a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003524:	4622      	mov	r2, r4
 8003526:	f7fd fd19 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800352a:	2023      	movs	r0, #35	; 0x23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800352c:	f7fd fd4a 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003530:	b006      	add	sp, #24
 8003532:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_SPI_MspInit+0xcc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d1fa      	bne.n	8003530 <HAL_SPI_MspInit+0x64>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800353c:	2400      	movs	r4, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 800353e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003540:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003546:	61da      	str	r2, [r3, #28]
 8003548:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354a:	4811      	ldr	r0, [pc, #68]	; (8003590 <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800354c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003554:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003558:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800355a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800355e:	f7fd fdab 	bl	80010b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003566:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2302      	movs	r3, #2
 800356a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800356c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356e:	a902      	add	r1, sp, #8
 8003570:	4807      	ldr	r0, [pc, #28]	; (8003590 <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003572:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003574:	f7fd fda0 	bl	80010b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003578:	2024      	movs	r0, #36	; 0x24
 800357a:	4622      	mov	r2, r4
 800357c:	4621      	mov	r1, r4
 800357e:	f7fd fced 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003582:	2024      	movs	r0, #36	; 0x24
 8003584:	e7d2      	b.n	800352c <HAL_SPI_MspInit+0x60>
 8003586:	bf00      	nop
 8003588:	40013000 	.word	0x40013000
 800358c:	40021000 	.word	0x40021000
 8003590:	40010c00 	.word	0x40010c00
 8003594:	40010000 	.word	0x40010000
 8003598:	40003800 	.word	0x40003800

0800359c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800359c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 800359e:	6803      	ldr	r3, [r0, #0]
{
 80035a0:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM2)
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d127      	bne.n	80035f8 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80035ac:	69da      	ldr	r2, [r3, #28]
  
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = OT_TXI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ae:	2400      	movs	r4, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	61da      	str	r2, [r3, #28]
 80035b6:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(OT_TXI_GPIO_Port, &GPIO_InitStruct);
 80035b8:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = OT_TXI_Pin;
 80035c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(OT_TXI_GPIO_Port, &GPIO_InitStruct);
 80035c6:	4813      	ldr	r0, [pc, #76]	; (8003614 <HAL_TIM_Base_MspInit+0x78>)
    GPIO_InitStruct.Pin = OT_TXI_Pin;
 80035c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ca:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(OT_TXI_GPIO_Port, &GPIO_InitStruct);
 80035ce:	f7fd fd73 	bl	80010b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80035d2:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_TIM_Base_MspInit+0x7c>)

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035d4:	201c      	movs	r0, #28
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80035d6:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035d8:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80035da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035e8:	4622      	mov	r2, r4
 80035ea:	f7fd fcb7 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035ee:	201c      	movs	r0, #28
 80035f0:	f7fd fce8 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035f4:	b006      	add	sp, #24
 80035f6:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM4)
 80035f8:	4a08      	ldr	r2, [pc, #32]	; (800361c <HAL_TIM_Base_MspInit+0x80>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d1fa      	bne.n	80035f4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_TIM_Base_MspInit+0x84>)
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	f042 0204 	orr.w	r2, r2, #4
 8003606:	61da      	str	r2, [r3, #28]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	9302      	str	r3, [sp, #8]
 8003610:	9b02      	ldr	r3, [sp, #8]
}
 8003612:	e7ef      	b.n	80035f4 <HAL_TIM_Base_MspInit+0x58>
 8003614:	40010800 	.word	0x40010800
 8003618:	40010000 	.word	0x40010000
 800361c:	40000800 	.word	0x40000800
 8003620:	40021000 	.word	0x40021000

08003624 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003624:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003626:	6803      	ldr	r3, [r0, #0]
 8003628:	4a3b      	ldr	r2, [pc, #236]	; (8003718 <HAL_UART_MspInit+0xf4>)
{
 800362a:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 800362c:	4293      	cmp	r3, r2
 800362e:	d127      	bne.n	8003680 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003630:	4b3a      	ldr	r3, [pc, #232]	; (800371c <HAL_UART_MspInit+0xf8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003632:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8003634:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	483a      	ldr	r0, [pc, #232]	; (8003720 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363c:	619a      	str	r2, [r3, #24]
 800363e:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003640:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800364a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800364e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003654:	2303      	movs	r3, #3
 8003656:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003658:	f7fd fd2e 	bl	80010b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800365c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003660:	a904      	add	r1, sp, #16
 8003662:	482f      	ldr	r0, [pc, #188]	; (8003720 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003664:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003666:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f7fd fd25 	bl	80010b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800366e:	2025      	movs	r0, #37	; 0x25
 8003670:	4622      	mov	r2, r4
 8003672:	4621      	mov	r1, r4
 8003674:	f7fd fc72 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003678:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800367a:	f7fd fca3 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800367e:	e01f      	b.n	80036c0 <HAL_UART_MspInit+0x9c>
  else if(huart->Instance==USART2)
 8003680:	4a28      	ldr	r2, [pc, #160]	; (8003724 <HAL_UART_MspInit+0x100>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d11e      	bne.n	80036c4 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_UART_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003688:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800368a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	4824      	ldr	r0, [pc, #144]	; (8003720 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800368e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003692:	61da      	str	r2, [r3, #28]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	9302      	str	r3, [sp, #8]
 800369c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800369e:	2304      	movs	r3, #4
 80036a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036a6:	2303      	movs	r3, #3
 80036a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036aa:	f7fd fd05 	bl	80010b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036ae:	2308      	movs	r3, #8
 80036b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b2:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b4:	a904      	add	r1, sp, #16
 80036b6:	481a      	ldr	r0, [pc, #104]	; (8003720 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036bc:	f7fd fcfc 	bl	80010b8 <HAL_GPIO_Init>
}
 80036c0:	b008      	add	sp, #32
 80036c2:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_UART_MspInit+0x104>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d1fa      	bne.n	80036c0 <HAL_UART_MspInit+0x9c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_UART_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036cc:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80036ce:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d0:	4816      	ldr	r0, [pc, #88]	; (800372c <HAL_UART_MspInit+0x108>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80036d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80036d6:	61da      	str	r2, [r3, #28]
 80036d8:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036da:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80036dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e0:	9303      	str	r3, [sp, #12]
 80036e2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	2302      	movs	r3, #2
 80036ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f7fd fce1 	bl	80010b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fa:	a904      	add	r1, sp, #16
 80036fc:	480b      	ldr	r0, [pc, #44]	; (800372c <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036fe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003700:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003704:	f7fd fcd8 	bl	80010b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003708:	2027      	movs	r0, #39	; 0x27
 800370a:	4622      	mov	r2, r4
 800370c:	4621      	mov	r1, r4
 800370e:	f7fd fc25 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003712:	2027      	movs	r0, #39	; 0x27
 8003714:	e7b1      	b.n	800367a <HAL_UART_MspInit+0x56>
 8003716:	bf00      	nop
 8003718:	40013800 	.word	0x40013800
 800371c:	40021000 	.word	0x40021000
 8003720:	40010800 	.word	0x40010800
 8003724:	40004400 	.word	0x40004400
 8003728:	40004800 	.word	0x40004800
 800372c:	40010c00 	.word	0x40010c00

08003730 <NMI_Handler>:
 8003730:	4770      	bx	lr

08003732 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003732:	e7fe      	b.n	8003732 <HardFault_Handler>

08003734 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003734:	e7fe      	b.n	8003734 <MemManage_Handler>

08003736 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003736:	e7fe      	b.n	8003736 <BusFault_Handler>

08003738 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003738:	e7fe      	b.n	8003738 <UsageFault_Handler>

0800373a <SVC_Handler>:
 800373a:	4770      	bx	lr

0800373c <DebugMon_Handler>:
 800373c:	4770      	bx	lr

0800373e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800373e:	4770      	bx	lr

08003740 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003740:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003742:	f7fd f985 	bl	8000a50 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800374a:	f7fd bc69 	b.w	8001020 <HAL_SYSTICK_IRQHandler>
	...

08003750 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003750:	4801      	ldr	r0, [pc, #4]	; (8003758 <TIM2_IRQHandler+0x8>)
 8003752:	f7fe bad6 	b.w	8001d02 <HAL_TIM_IRQHandler>
 8003756:	bf00      	nop
 8003758:	200005e0 	.word	0x200005e0

0800375c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800375c:	4801      	ldr	r0, [pc, #4]	; (8003764 <SPI1_IRQHandler+0x8>)
 800375e:	f7fe b921 	b.w	80019a4 <HAL_SPI_IRQHandler>
 8003762:	bf00      	nop
 8003764:	20000588 	.word	0x20000588

08003768 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003768:	4801      	ldr	r0, [pc, #4]	; (8003770 <SPI2_IRQHandler+0x8>)
 800376a:	f7fe b91b 	b.w	80019a4 <HAL_SPI_IRQHandler>
 800376e:	bf00      	nop
 8003770:	20000150 	.word	0x20000150

08003774 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <USART1_IRQHandler+0x8>)
 8003776:	f7fe befb 	b.w	8002570 <HAL_UART_IRQHandler>
 800377a:	bf00      	nop
 800377c:	200003c0 	.word	0x200003c0

08003780 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <USART3_IRQHandler+0x8>)
 8003782:	f7fe bef5 	b.w	8002570 <HAL_UART_IRQHandler>
 8003786:	bf00      	nop
 8003788:	2000020c 	.word	0x2000020c

0800378c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800378c:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <SystemInit+0x40>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <SystemInit+0x44>)
 800379a:	400a      	ands	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80037a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80037b8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80037ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80037be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80037c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <SystemInit+0x48>)
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	f8ff0000 	.word	0xf8ff0000
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80037d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80037da:	e003      	b.n	80037e4 <LoopCopyDataInit>

080037dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80037de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80037e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80037e2:	3104      	adds	r1, #4

080037e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80037e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80037ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80037ec:	d3f6      	bcc.n	80037dc <CopyDataInit>
  ldr r2, =_sbss
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80037f0:	e002      	b.n	80037f8 <LoopFillZerobss>

080037f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80037f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80037f4:	f842 3b04 	str.w	r3, [r2], #4

080037f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80037fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80037fc:	d3f9      	bcc.n	80037f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037fe:	f7ff ffc5 	bl	800378c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003802:	f000 f80f 	bl	8003824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003806:	f7ff fb93 	bl	8002f30 <main>
  bx lr
 800380a:	4770      	bx	lr
  ldr r3, =_sidata
 800380c:	08003b98 	.word	0x08003b98
  ldr r0, =_sdata
 8003810:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003814:	200000b4 	.word	0x200000b4
  ldr r2, =_sbss
 8003818:	200000b4 	.word	0x200000b4
  ldr r3, = _ebss
 800381c:	200006f4 	.word	0x200006f4

08003820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003820:	e7fe      	b.n	8003820 <ADC1_2_IRQHandler>
	...

08003824 <__libc_init_array>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	2500      	movs	r5, #0
 8003828:	4e0c      	ldr	r6, [pc, #48]	; (800385c <__libc_init_array+0x38>)
 800382a:	4c0d      	ldr	r4, [pc, #52]	; (8003860 <__libc_init_array+0x3c>)
 800382c:	1ba4      	subs	r4, r4, r6
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	42a5      	cmp	r5, r4
 8003832:	d109      	bne.n	8003848 <__libc_init_array+0x24>
 8003834:	f000 f972 	bl	8003b1c <_init>
 8003838:	2500      	movs	r5, #0
 800383a:	4e0a      	ldr	r6, [pc, #40]	; (8003864 <__libc_init_array+0x40>)
 800383c:	4c0a      	ldr	r4, [pc, #40]	; (8003868 <__libc_init_array+0x44>)
 800383e:	1ba4      	subs	r4, r4, r6
 8003840:	10a4      	asrs	r4, r4, #2
 8003842:	42a5      	cmp	r5, r4
 8003844:	d105      	bne.n	8003852 <__libc_init_array+0x2e>
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800384c:	4798      	blx	r3
 800384e:	3501      	adds	r5, #1
 8003850:	e7ee      	b.n	8003830 <__libc_init_array+0xc>
 8003852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003856:	4798      	blx	r3
 8003858:	3501      	adds	r5, #1
 800385a:	e7f2      	b.n	8003842 <__libc_init_array+0x1e>
 800385c:	08003b90 	.word	0x08003b90
 8003860:	08003b90 	.word	0x08003b90
 8003864:	08003b90 	.word	0x08003b90
 8003868:	08003b94 	.word	0x08003b94

0800386c <malloc>:
 800386c:	4b02      	ldr	r3, [pc, #8]	; (8003878 <malloc+0xc>)
 800386e:	4601      	mov	r1, r0
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	f000 b857 	b.w	8003924 <_malloc_r>
 8003876:	bf00      	nop
 8003878:	20000050 	.word	0x20000050

0800387c <free>:
 800387c:	4b02      	ldr	r3, [pc, #8]	; (8003888 <free+0xc>)
 800387e:	4601      	mov	r1, r0
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	f000 b803 	b.w	800388c <_free_r>
 8003886:	bf00      	nop
 8003888:	20000050 	.word	0x20000050

0800388c <_free_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4605      	mov	r5, r0
 8003890:	2900      	cmp	r1, #0
 8003892:	d043      	beq.n	800391c <_free_r+0x90>
 8003894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003898:	1f0c      	subs	r4, r1, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	bfb8      	it	lt
 800389e:	18e4      	addlt	r4, r4, r3
 80038a0:	f000 f8e6 	bl	8003a70 <__malloc_lock>
 80038a4:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <_free_r+0x94>)
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	4610      	mov	r0, r2
 80038aa:	b933      	cbnz	r3, 80038ba <_free_r+0x2e>
 80038ac:	6063      	str	r3, [r4, #4]
 80038ae:	6014      	str	r4, [r2, #0]
 80038b0:	4628      	mov	r0, r5
 80038b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038b6:	f000 b8dc 	b.w	8003a72 <__malloc_unlock>
 80038ba:	42a3      	cmp	r3, r4
 80038bc:	d90b      	bls.n	80038d6 <_free_r+0x4a>
 80038be:	6821      	ldr	r1, [r4, #0]
 80038c0:	1862      	adds	r2, r4, r1
 80038c2:	4293      	cmp	r3, r2
 80038c4:	bf01      	itttt	eq
 80038c6:	681a      	ldreq	r2, [r3, #0]
 80038c8:	685b      	ldreq	r3, [r3, #4]
 80038ca:	1852      	addeq	r2, r2, r1
 80038cc:	6022      	streq	r2, [r4, #0]
 80038ce:	6063      	str	r3, [r4, #4]
 80038d0:	6004      	str	r4, [r0, #0]
 80038d2:	e7ed      	b.n	80038b0 <_free_r+0x24>
 80038d4:	4613      	mov	r3, r2
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	b10a      	cbz	r2, 80038de <_free_r+0x52>
 80038da:	42a2      	cmp	r2, r4
 80038dc:	d9fa      	bls.n	80038d4 <_free_r+0x48>
 80038de:	6819      	ldr	r1, [r3, #0]
 80038e0:	1858      	adds	r0, r3, r1
 80038e2:	42a0      	cmp	r0, r4
 80038e4:	d10b      	bne.n	80038fe <_free_r+0x72>
 80038e6:	6820      	ldr	r0, [r4, #0]
 80038e8:	4401      	add	r1, r0
 80038ea:	1858      	adds	r0, r3, r1
 80038ec:	4282      	cmp	r2, r0
 80038ee:	6019      	str	r1, [r3, #0]
 80038f0:	d1de      	bne.n	80038b0 <_free_r+0x24>
 80038f2:	6810      	ldr	r0, [r2, #0]
 80038f4:	6852      	ldr	r2, [r2, #4]
 80038f6:	4401      	add	r1, r0
 80038f8:	6019      	str	r1, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	e7d8      	b.n	80038b0 <_free_r+0x24>
 80038fe:	d902      	bls.n	8003906 <_free_r+0x7a>
 8003900:	230c      	movs	r3, #12
 8003902:	602b      	str	r3, [r5, #0]
 8003904:	e7d4      	b.n	80038b0 <_free_r+0x24>
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	1821      	adds	r1, r4, r0
 800390a:	428a      	cmp	r2, r1
 800390c:	bf01      	itttt	eq
 800390e:	6811      	ldreq	r1, [r2, #0]
 8003910:	6852      	ldreq	r2, [r2, #4]
 8003912:	1809      	addeq	r1, r1, r0
 8003914:	6021      	streq	r1, [r4, #0]
 8003916:	6062      	str	r2, [r4, #4]
 8003918:	605c      	str	r4, [r3, #4]
 800391a:	e7c9      	b.n	80038b0 <_free_r+0x24>
 800391c:	bd38      	pop	{r3, r4, r5, pc}
 800391e:	bf00      	nop
 8003920:	200000dc 	.word	0x200000dc

08003924 <_malloc_r>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	1ccd      	adds	r5, r1, #3
 8003928:	f025 0503 	bic.w	r5, r5, #3
 800392c:	3508      	adds	r5, #8
 800392e:	2d0c      	cmp	r5, #12
 8003930:	bf38      	it	cc
 8003932:	250c      	movcc	r5, #12
 8003934:	2d00      	cmp	r5, #0
 8003936:	4606      	mov	r6, r0
 8003938:	db01      	blt.n	800393e <_malloc_r+0x1a>
 800393a:	42a9      	cmp	r1, r5
 800393c:	d903      	bls.n	8003946 <_malloc_r+0x22>
 800393e:	230c      	movs	r3, #12
 8003940:	6033      	str	r3, [r6, #0]
 8003942:	2000      	movs	r0, #0
 8003944:	bd70      	pop	{r4, r5, r6, pc}
 8003946:	f000 f893 	bl	8003a70 <__malloc_lock>
 800394a:	4a23      	ldr	r2, [pc, #140]	; (80039d8 <_malloc_r+0xb4>)
 800394c:	6814      	ldr	r4, [r2, #0]
 800394e:	4621      	mov	r1, r4
 8003950:	b991      	cbnz	r1, 8003978 <_malloc_r+0x54>
 8003952:	4c22      	ldr	r4, [pc, #136]	; (80039dc <_malloc_r+0xb8>)
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	b91b      	cbnz	r3, 8003960 <_malloc_r+0x3c>
 8003958:	4630      	mov	r0, r6
 800395a:	f000 f841 	bl	80039e0 <_sbrk_r>
 800395e:	6020      	str	r0, [r4, #0]
 8003960:	4629      	mov	r1, r5
 8003962:	4630      	mov	r0, r6
 8003964:	f000 f83c 	bl	80039e0 <_sbrk_r>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d126      	bne.n	80039ba <_malloc_r+0x96>
 800396c:	230c      	movs	r3, #12
 800396e:	4630      	mov	r0, r6
 8003970:	6033      	str	r3, [r6, #0]
 8003972:	f000 f87e 	bl	8003a72 <__malloc_unlock>
 8003976:	e7e4      	b.n	8003942 <_malloc_r+0x1e>
 8003978:	680b      	ldr	r3, [r1, #0]
 800397a:	1b5b      	subs	r3, r3, r5
 800397c:	d41a      	bmi.n	80039b4 <_malloc_r+0x90>
 800397e:	2b0b      	cmp	r3, #11
 8003980:	d90f      	bls.n	80039a2 <_malloc_r+0x7e>
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	18cc      	adds	r4, r1, r3
 8003986:	50cd      	str	r5, [r1, r3]
 8003988:	4630      	mov	r0, r6
 800398a:	f000 f872 	bl	8003a72 <__malloc_unlock>
 800398e:	f104 000b 	add.w	r0, r4, #11
 8003992:	1d23      	adds	r3, r4, #4
 8003994:	f020 0007 	bic.w	r0, r0, #7
 8003998:	1ac3      	subs	r3, r0, r3
 800399a:	d01b      	beq.n	80039d4 <_malloc_r+0xb0>
 800399c:	425a      	negs	r2, r3
 800399e:	50e2      	str	r2, [r4, r3]
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
 80039a2:	428c      	cmp	r4, r1
 80039a4:	bf0b      	itete	eq
 80039a6:	6863      	ldreq	r3, [r4, #4]
 80039a8:	684b      	ldrne	r3, [r1, #4]
 80039aa:	6013      	streq	r3, [r2, #0]
 80039ac:	6063      	strne	r3, [r4, #4]
 80039ae:	bf18      	it	ne
 80039b0:	460c      	movne	r4, r1
 80039b2:	e7e9      	b.n	8003988 <_malloc_r+0x64>
 80039b4:	460c      	mov	r4, r1
 80039b6:	6849      	ldr	r1, [r1, #4]
 80039b8:	e7ca      	b.n	8003950 <_malloc_r+0x2c>
 80039ba:	1cc4      	adds	r4, r0, #3
 80039bc:	f024 0403 	bic.w	r4, r4, #3
 80039c0:	42a0      	cmp	r0, r4
 80039c2:	d005      	beq.n	80039d0 <_malloc_r+0xac>
 80039c4:	1a21      	subs	r1, r4, r0
 80039c6:	4630      	mov	r0, r6
 80039c8:	f000 f80a 	bl	80039e0 <_sbrk_r>
 80039cc:	3001      	adds	r0, #1
 80039ce:	d0cd      	beq.n	800396c <_malloc_r+0x48>
 80039d0:	6025      	str	r5, [r4, #0]
 80039d2:	e7d9      	b.n	8003988 <_malloc_r+0x64>
 80039d4:	bd70      	pop	{r4, r5, r6, pc}
 80039d6:	bf00      	nop
 80039d8:	200000dc 	.word	0x200000dc
 80039dc:	200000e0 	.word	0x200000e0

080039e0 <_sbrk_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	2300      	movs	r3, #0
 80039e4:	4c05      	ldr	r4, [pc, #20]	; (80039fc <_sbrk_r+0x1c>)
 80039e6:	4605      	mov	r5, r0
 80039e8:	4608      	mov	r0, r1
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	f000 f888 	bl	8003b00 <_sbrk>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	d102      	bne.n	80039fa <_sbrk_r+0x1a>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	b103      	cbz	r3, 80039fa <_sbrk_r+0x1a>
 80039f8:	602b      	str	r3, [r5, #0]
 80039fa:	bd38      	pop	{r3, r4, r5, pc}
 80039fc:	200006f0 	.word	0x200006f0

08003a00 <strcpy>:
 8003a00:	4603      	mov	r3, r0
 8003a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a06:	f803 2b01 	strb.w	r2, [r3], #1
 8003a0a:	2a00      	cmp	r2, #0
 8003a0c:	d1f9      	bne.n	8003a02 <strcpy+0x2>
 8003a0e:	4770      	bx	lr

08003a10 <strncpy>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	4604      	mov	r4, r0
 8003a14:	b902      	cbnz	r2, 8003a18 <strncpy+0x8>
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	4623      	mov	r3, r4
 8003a1a:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003a1e:	1e56      	subs	r6, r2, #1
 8003a20:	f803 5b01 	strb.w	r5, [r3], #1
 8003a24:	b91d      	cbnz	r5, 8003a2e <strncpy+0x1e>
 8003a26:	4414      	add	r4, r2
 8003a28:	42a3      	cmp	r3, r4
 8003a2a:	d103      	bne.n	8003a34 <strncpy+0x24>
 8003a2c:	bd70      	pop	{r4, r5, r6, pc}
 8003a2e:	461c      	mov	r4, r3
 8003a30:	4632      	mov	r2, r6
 8003a32:	e7ef      	b.n	8003a14 <strncpy+0x4>
 8003a34:	f803 5b01 	strb.w	r5, [r3], #1
 8003a38:	e7f6      	b.n	8003a28 <strncpy+0x18>

08003a3a <strstr>:
 8003a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3c:	7803      	ldrb	r3, [r0, #0]
 8003a3e:	b133      	cbz	r3, 8003a4e <strstr+0x14>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4618      	mov	r0, r3
 8003a44:	1c5e      	adds	r6, r3, #1
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b933      	cbnz	r3, 8003a58 <strstr+0x1e>
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4e:	780b      	ldrb	r3, [r1, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf18      	it	ne
 8003a54:	2000      	movne	r0, #0
 8003a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a58:	1e4d      	subs	r5, r1, #1
 8003a5a:	1e44      	subs	r4, r0, #1
 8003a5c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003a60:	2a00      	cmp	r2, #0
 8003a62:	d0f3      	beq.n	8003a4c <strstr+0x12>
 8003a64:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8003a68:	4633      	mov	r3, r6
 8003a6a:	4297      	cmp	r7, r2
 8003a6c:	d0f6      	beq.n	8003a5c <strstr+0x22>
 8003a6e:	e7e8      	b.n	8003a42 <strstr+0x8>

08003a70 <__malloc_lock>:
 8003a70:	4770      	bx	lr

08003a72 <__malloc_unlock>:
 8003a72:	4770      	bx	lr

08003a74 <round>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003a7a:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8003a7e:	2c13      	cmp	r4, #19
 8003a80:	4606      	mov	r6, r0
 8003a82:	460d      	mov	r5, r1
 8003a84:	460b      	mov	r3, r1
 8003a86:	468e      	mov	lr, r1
 8003a88:	dc17      	bgt.n	8003aba <round+0x46>
 8003a8a:	2c00      	cmp	r4, #0
 8003a8c:	da09      	bge.n	8003aa2 <round+0x2e>
 8003a8e:	3401      	adds	r4, #1
 8003a90:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003a94:	d103      	bne.n	8003a9e <round+0x2a>
 8003a96:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003a9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	e029      	b.n	8003af6 <round+0x82>
 8003aa2:	4916      	ldr	r1, [pc, #88]	; (8003afc <round+0x88>)
 8003aa4:	4121      	asrs	r1, r4
 8003aa6:	420d      	tst	r5, r1
 8003aa8:	d100      	bne.n	8003aac <round+0x38>
 8003aaa:	b188      	cbz	r0, 8003ad0 <round+0x5c>
 8003aac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ab0:	4123      	asrs	r3, r4
 8003ab2:	4473      	add	r3, lr
 8003ab4:	ea23 0301 	bic.w	r3, r3, r1
 8003ab8:	e7f1      	b.n	8003a9e <round+0x2a>
 8003aba:	2c33      	cmp	r4, #51	; 0x33
 8003abc:	dd0b      	ble.n	8003ad6 <round+0x62>
 8003abe:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003ac2:	d105      	bne.n	8003ad0 <round+0x5c>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	f7fc fb50 	bl	800016c <__adddf3>
 8003acc:	4606      	mov	r6, r0
 8003ace:	460d      	mov	r5, r1
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ada:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003ade:	40f8      	lsrs	r0, r7
 8003ae0:	4206      	tst	r6, r0
 8003ae2:	d0f5      	beq.n	8003ad0 <round+0x5c>
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003aea:	40a1      	lsls	r1, r4
 8003aec:	198a      	adds	r2, r1, r6
 8003aee:	bf28      	it	cs
 8003af0:	3301      	addcs	r3, #1
 8003af2:	ea22 0200 	bic.w	r2, r2, r0
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	e7e7      	b.n	8003acc <round+0x58>
 8003afc:	000fffff 	.word	0x000fffff

08003b00 <_sbrk>:
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <_sbrk+0x14>)
 8003b02:	4602      	mov	r2, r0
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	b909      	cbnz	r1, 8003b0c <_sbrk+0xc>
 8003b08:	4903      	ldr	r1, [pc, #12]	; (8003b18 <_sbrk+0x18>)
 8003b0a:	6019      	str	r1, [r3, #0]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	4402      	add	r2, r0
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	4770      	bx	lr
 8003b14:	200000e4 	.word	0x200000e4
 8003b18:	200006f4 	.word	0x200006f4

08003b1c <_init>:
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	bf00      	nop
 8003b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b22:	bc08      	pop	{r3}
 8003b24:	469e      	mov	lr, r3
 8003b26:	4770      	bx	lr

08003b28 <_fini>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr
