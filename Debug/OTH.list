
OTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800330c  0800330c  0001330c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  20000000  0800336c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000013b8  20000044  080033b0  00020044  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200013fc  080033b0  000213fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ddb8  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000366f  00000000  00000000  0003de25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ba02  00000000  00000000  00041494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e18  00000000  00000000  0004ce98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001498  00000000  00000000  0004dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008feb  00000000  00000000  0004f148  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000051a0  00000000  00000000  00058133  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005d2d3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002df0  00000000  00000000  0005d350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000044 	.word	0x20000044
 800012c:	00000000 	.word	0x00000000
 8000130:	080032f4 	.word	0x080032f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000048 	.word	0x20000048
 800014c:	080032f4 	.word	0x080032f4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_frsub>:
 8000984:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000988:	e002      	b.n	8000990 <__addsf3>
 800098a:	bf00      	nop

0800098c <__aeabi_fsub>:
 800098c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000990 <__addsf3>:
 8000990:	0042      	lsls	r2, r0, #1
 8000992:	bf1f      	itttt	ne
 8000994:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000998:	ea92 0f03 	teqne	r2, r3
 800099c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a4:	d06a      	beq.n	8000a7c <__addsf3+0xec>
 80009a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ae:	bfc1      	itttt	gt
 80009b0:	18d2      	addgt	r2, r2, r3
 80009b2:	4041      	eorgt	r1, r0
 80009b4:	4048      	eorgt	r0, r1
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	bfb8      	it	lt
 80009ba:	425b      	neglt	r3, r3
 80009bc:	2b19      	cmp	r3, #25
 80009be:	bf88      	it	hi
 80009c0:	4770      	bxhi	lr
 80009c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009de:	bf18      	it	ne
 80009e0:	4249      	negne	r1, r1
 80009e2:	ea92 0f03 	teq	r2, r3
 80009e6:	d03f      	beq.n	8000a68 <__addsf3+0xd8>
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	fa41 fc03 	asr.w	ip, r1, r3
 80009f0:	eb10 000c 	adds.w	r0, r0, ip
 80009f4:	f1c3 0320 	rsb	r3, r3, #32
 80009f8:	fa01 f103 	lsl.w	r1, r1, r3
 80009fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a00:	d502      	bpl.n	8000a08 <__addsf3+0x78>
 8000a02:	4249      	negs	r1, r1
 8000a04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a0c:	d313      	bcc.n	8000a36 <__addsf3+0xa6>
 8000a0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a12:	d306      	bcc.n	8000a22 <__addsf3+0x92>
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1a:	f102 0201 	add.w	r2, r2, #1
 8000a1e:	2afe      	cmp	r2, #254	; 0xfe
 8000a20:	d251      	bcs.n	8000ac6 <__addsf3+0x136>
 8000a22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2a:	bf08      	it	eq
 8000a2c:	f020 0001 	biceq.w	r0, r0, #1
 8000a30:	ea40 0003 	orr.w	r0, r0, r3
 8000a34:	4770      	bx	lr
 8000a36:	0049      	lsls	r1, r1, #1
 8000a38:	eb40 0000 	adc.w	r0, r0, r0
 8000a3c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	d1ed      	bne.n	8000a22 <__addsf3+0x92>
 8000a46:	fab0 fc80 	clz	ip, r0
 8000a4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a56:	bfaa      	itet	ge
 8000a58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a5c:	4252      	neglt	r2, r2
 8000a5e:	4318      	orrge	r0, r3
 8000a60:	bfbc      	itt	lt
 8000a62:	40d0      	lsrlt	r0, r2
 8000a64:	4318      	orrlt	r0, r3
 8000a66:	4770      	bx	lr
 8000a68:	f092 0f00 	teq	r2, #0
 8000a6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a70:	bf06      	itte	eq
 8000a72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a76:	3201      	addeq	r2, #1
 8000a78:	3b01      	subne	r3, #1
 8000a7a:	e7b5      	b.n	80009e8 <__addsf3+0x58>
 8000a7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8a:	d021      	beq.n	8000ad0 <__addsf3+0x140>
 8000a8c:	ea92 0f03 	teq	r2, r3
 8000a90:	d004      	beq.n	8000a9c <__addsf3+0x10c>
 8000a92:	f092 0f00 	teq	r2, #0
 8000a96:	bf08      	it	eq
 8000a98:	4608      	moveq	r0, r1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea90 0f01 	teq	r0, r1
 8000aa0:	bf1c      	itt	ne
 8000aa2:	2000      	movne	r0, #0
 8000aa4:	4770      	bxne	lr
 8000aa6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aaa:	d104      	bne.n	8000ab6 <__addsf3+0x126>
 8000aac:	0040      	lsls	r0, r0, #1
 8000aae:	bf28      	it	cs
 8000ab0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aba:	bf3c      	itt	cc
 8000abc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bxcc	lr
 8000ac2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	4770      	bx	lr
 8000ad0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad4:	bf16      	itet	ne
 8000ad6:	4608      	movne	r0, r1
 8000ad8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000adc:	4601      	movne	r1, r0
 8000ade:	0242      	lsls	r2, r0, #9
 8000ae0:	bf06      	itte	eq
 8000ae2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ae6:	ea90 0f01 	teqeq	r0, r1
 8000aea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_ui2f>:
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e004      	b.n	8000b00 <__aeabi_i2f+0x8>
 8000af6:	bf00      	nop

08000af8 <__aeabi_i2f>:
 8000af8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	bf48      	it	mi
 8000afe:	4240      	negmi	r0, r0
 8000b00:	ea5f 0c00 	movs.w	ip, r0
 8000b04:	bf08      	it	eq
 8000b06:	4770      	bxeq	lr
 8000b08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	e01c      	b.n	8000b4e <__aeabi_l2f+0x2a>

08000b14 <__aeabi_ul2f>:
 8000b14:	ea50 0201 	orrs.w	r2, r0, r1
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e00a      	b.n	8000b38 <__aeabi_l2f+0x14>
 8000b22:	bf00      	nop

08000b24 <__aeabi_l2f>:
 8000b24:	ea50 0201 	orrs.w	r2, r0, r1
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__aeabi_l2f+0x14>
 8000b32:	4240      	negs	r0, r0
 8000b34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b38:	ea5f 0c01 	movs.w	ip, r1
 8000b3c:	bf02      	ittt	eq
 8000b3e:	4684      	moveq	ip, r0
 8000b40:	4601      	moveq	r1, r0
 8000b42:	2000      	moveq	r0, #0
 8000b44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b48:	bf08      	it	eq
 8000b4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b52:	fabc f28c 	clz	r2, ip
 8000b56:	3a08      	subs	r2, #8
 8000b58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b5c:	db10      	blt.n	8000b80 <__aeabi_l2f+0x5c>
 8000b5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b62:	4463      	add	r3, ip
 8000b64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b68:	f1c2 0220 	rsb	r2, r2, #32
 8000b6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b70:	fa20 f202 	lsr.w	r2, r0, r2
 8000b74:	eb43 0002 	adc.w	r0, r3, r2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f102 0220 	add.w	r2, r2, #32
 8000b84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b88:	f1c2 0220 	rsb	r2, r2, #32
 8000b8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b90:	fa21 f202 	lsr.w	r2, r1, r2
 8000b94:	eb43 0002 	adc.w	r0, r3, r2
 8000b98:	bf08      	it	eq
 8000b9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_fmul>:
 8000ba0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ba8:	bf1e      	ittt	ne
 8000baa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bae:	ea92 0f0c 	teqne	r2, ip
 8000bb2:	ea93 0f0c 	teqne	r3, ip
 8000bb6:	d06f      	beq.n	8000c98 <__aeabi_fmul+0xf8>
 8000bb8:	441a      	add	r2, r3
 8000bba:	ea80 0c01 	eor.w	ip, r0, r1
 8000bbe:	0240      	lsls	r0, r0, #9
 8000bc0:	bf18      	it	ne
 8000bc2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bc6:	d01e      	beq.n	8000c06 <__aeabi_fmul+0x66>
 8000bc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bcc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd4:	fba0 3101 	umull	r3, r1, r0, r1
 8000bd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bdc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be0:	bf3e      	ittt	cc
 8000be2:	0049      	lslcc	r1, r1, #1
 8000be4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000be8:	005b      	lslcc	r3, r3, #1
 8000bea:	ea40 0001 	orr.w	r0, r0, r1
 8000bee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf2:	2afd      	cmp	r2, #253	; 0xfd
 8000bf4:	d81d      	bhi.n	8000c32 <__aeabi_fmul+0x92>
 8000bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	4770      	bx	lr
 8000c06:	f090 0f00 	teq	r0, #0
 8000c0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c0e:	bf08      	it	eq
 8000c10:	0249      	lsleq	r1, r1, #9
 8000c12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1a:	3a7f      	subs	r2, #127	; 0x7f
 8000c1c:	bfc2      	ittt	gt
 8000c1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c26:	4770      	bxgt	lr
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	3a01      	subs	r2, #1
 8000c32:	dc5d      	bgt.n	8000cf0 <__aeabi_fmul+0x150>
 8000c34:	f112 0f19 	cmn.w	r2, #25
 8000c38:	bfdc      	itt	le
 8000c3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c3e:	4770      	bxle	lr
 8000c40:	f1c2 0200 	rsb	r2, r2, #0
 8000c44:	0041      	lsls	r1, r0, #1
 8000c46:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4a:	f1c2 0220 	rsb	r2, r2, #32
 8000c4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c52:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c56:	f140 0000 	adc.w	r0, r0, #0
 8000c5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c5e:	bf08      	it	eq
 8000c60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c64:	4770      	bx	lr
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c6e:	bf02      	ittt	eq
 8000c70:	0040      	lsleq	r0, r0, #1
 8000c72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c76:	3a01      	subeq	r2, #1
 8000c78:	d0f9      	beq.n	8000c6e <__aeabi_fmul+0xce>
 8000c7a:	ea40 000c 	orr.w	r0, r0, ip
 8000c7e:	f093 0f00 	teq	r3, #0
 8000c82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0049      	lsleq	r1, r1, #1
 8000c8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c8e:	3b01      	subeq	r3, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xe6>
 8000c92:	ea41 010c 	orr.w	r1, r1, ip
 8000c96:	e78f      	b.n	8000bb8 <__aeabi_fmul+0x18>
 8000c98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	bf18      	it	ne
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d00a      	beq.n	8000cbe <__aeabi_fmul+0x11e>
 8000ca8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cac:	bf18      	it	ne
 8000cae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb2:	d1d8      	bne.n	8000c66 <__aeabi_fmul+0xc6>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	4770      	bx	lr
 8000cbe:	f090 0f00 	teq	r0, #0
 8000cc2:	bf17      	itett	ne
 8000cc4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	f091 0f00 	teqne	r1, #0
 8000cce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd2:	d014      	beq.n	8000cfe <__aeabi_fmul+0x15e>
 8000cd4:	ea92 0f0c 	teq	r2, ip
 8000cd8:	d101      	bne.n	8000cde <__aeabi_fmul+0x13e>
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	d10f      	bne.n	8000cfe <__aeabi_fmul+0x15e>
 8000cde:	ea93 0f0c 	teq	r3, ip
 8000ce2:	d103      	bne.n	8000cec <__aeabi_fmul+0x14c>
 8000ce4:	024b      	lsls	r3, r1, #9
 8000ce6:	bf18      	it	ne
 8000ce8:	4608      	movne	r0, r1
 8000cea:	d108      	bne.n	8000cfe <__aeabi_fmul+0x15e>
 8000cec:	ea80 0001 	eor.w	r0, r0, r1
 8000cf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfc:	4770      	bx	lr
 8000cfe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fdiv>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d069      	beq.n	8000df4 <__aeabi_fdiv+0xec>
 8000d20:	eba2 0203 	sub.w	r2, r2, r3
 8000d24:	ea80 0c01 	eor.w	ip, r0, r1
 8000d28:	0249      	lsls	r1, r1, #9
 8000d2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d2e:	d037      	beq.n	8000da0 <__aeabi_fdiv+0x98>
 8000d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	428b      	cmp	r3, r1
 8000d42:	bf38      	it	cc
 8000d44:	005b      	lslcc	r3, r3, #1
 8000d46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	bf24      	itt	cs
 8000d52:	1a5b      	subcs	r3, r3, r1
 8000d54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d5c:	bf24      	itt	cs
 8000d5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6a:	bf24      	itt	cs
 8000d6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d78:	bf24      	itt	cs
 8000d7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8a:	d1e0      	bne.n	8000d4e <__aeabi_fdiv+0x46>
 8000d8c:	2afd      	cmp	r2, #253	; 0xfd
 8000d8e:	f63f af50 	bhi.w	8000c32 <__aeabi_fmul+0x92>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da8:	327f      	adds	r2, #127	; 0x7f
 8000daa:	bfc2      	ittt	gt
 8000dac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db4:	4770      	bxgt	lr
 8000db6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	e737      	b.n	8000c32 <__aeabi_fmul+0x92>
 8000dc2:	f092 0f00 	teq	r2, #0
 8000dc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0040      	lsleq	r0, r0, #1
 8000dce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd2:	3a01      	subeq	r2, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fdiv+0xc2>
 8000dd6:	ea40 000c 	orr.w	r0, r0, ip
 8000dda:	f093 0f00 	teq	r3, #0
 8000dde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0049      	lsleq	r1, r1, #1
 8000de6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dea:	3b01      	subeq	r3, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xda>
 8000dee:	ea41 010c 	orr.w	r1, r1, ip
 8000df2:	e795      	b.n	8000d20 <__aeabi_fdiv+0x18>
 8000df4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d108      	bne.n	8000e10 <__aeabi_fdiv+0x108>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	f47f af7d 	bne.w	8000cfe <__aeabi_fmul+0x15e>
 8000e04:	ea93 0f0c 	teq	r3, ip
 8000e08:	f47f af70 	bne.w	8000cec <__aeabi_fmul+0x14c>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e776      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e10:	ea93 0f0c 	teq	r3, ip
 8000e14:	d104      	bne.n	8000e20 <__aeabi_fdiv+0x118>
 8000e16:	024b      	lsls	r3, r1, #9
 8000e18:	f43f af4c 	beq.w	8000cb4 <__aeabi_fmul+0x114>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e76e      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1ca      	bne.n	8000dc2 <__aeabi_fdiv+0xba>
 8000e2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e30:	f47f af5c 	bne.w	8000cec <__aeabi_fmul+0x14c>
 8000e34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e38:	f47f af3c 	bne.w	8000cb4 <__aeabi_fmul+0x114>
 8000e3c:	e75f      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e3e:	bf00      	nop

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_InitTick+0x3c>)
{
 8000e44:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e46:	7818      	ldrb	r0, [r3, #0]
 8000e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_InitTick+0x40>)
 8000e52:	6810      	ldr	r0, [r2, #0]
 8000e54:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e58:	f000 faee 	bl	8001438 <HAL_SYSTICK_Config>
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	b958      	cbnz	r0, 8000e78 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	2d0f      	cmp	r5, #15
 8000e62:	d809      	bhi.n	8000e78 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	4602      	mov	r2, r0
 8000e66:	4629      	mov	r1, r5
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 faa4 	bl	80013b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_InitTick+0x44>)
 8000e72:	4620      	mov	r0, r4
 8000e74:	601d      	str	r5, [r3, #0]
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e78:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e7a:	bd38      	pop	{r3, r4, r5, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000040 	.word	0x20000040
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x20>)
{
 8000e8a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e96:	f000 fa7d 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff ffd0 	bl	8000e40 <HAL_InitTick>
  HAL_MspInit();
 8000ea0:	f001 ffbe 	bl	8002e20 <HAL_MspInit>
}
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	bd08      	pop	{r3, pc}
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x10>)
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_IncTick+0x14>)
 8000eb0:	6811      	ldr	r1, [r2, #0]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	440b      	add	r3, r1
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000060 	.word	0x20000060
 8000ec0:	20000000 	.word	0x20000000

08000ec4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ec4:	4b01      	ldr	r3, [pc, #4]	; (8000ecc <HAL_GetTick+0x8>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000060 	.word	0x20000060

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b538      	push	{r3, r4, r5, lr}
 8000ed2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff fff6 	bl	8000ec4 <HAL_GetTick>
 8000ed8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000edc:	bf1e      	ittt	ne
 8000ede:	4b04      	ldrne	r3, [pc, #16]	; (8000ef0 <HAL_Delay+0x20>)
 8000ee0:	781b      	ldrbne	r3, [r3, #0]
 8000ee2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	1b40      	subs	r0, r0, r5
 8000eea:	4284      	cmp	r4, r0
 8000eec:	d8fa      	bhi.n	8000ee4 <HAL_Delay+0x14>
  {
  }
}
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ef4:	6803      	ldr	r3, [r0, #0]
 8000ef6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000efc:	2300      	movs	r3, #0
{ 
 8000efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000f00:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f02:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d074      	beq.n	8000ff4 <HAL_ADC_ConfigChannel+0xf8>
 8000f0a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f0c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000f0e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000f12:	2d06      	cmp	r5, #6
 8000f14:	6802      	ldr	r2, [r0, #0]
 8000f16:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000f1a:	680c      	ldr	r4, [r1, #0]
 8000f1c:	d825      	bhi.n	8000f6a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f1e:	442b      	add	r3, r5
 8000f20:	251f      	movs	r5, #31
 8000f22:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000f24:	3b05      	subs	r3, #5
 8000f26:	409d      	lsls	r5, r3
 8000f28:	ea26 0505 	bic.w	r5, r6, r5
 8000f2c:	fa04 f303 	lsl.w	r3, r4, r3
 8000f30:	432b      	orrs	r3, r5
 8000f32:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f34:	2c09      	cmp	r4, #9
 8000f36:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000f3a:	688d      	ldr	r5, [r1, #8]
 8000f3c:	d92f      	bls.n	8000f9e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f3e:	2607      	movs	r6, #7
 8000f40:	4423      	add	r3, r4
 8000f42:	68d1      	ldr	r1, [r2, #12]
 8000f44:	3b1e      	subs	r3, #30
 8000f46:	409e      	lsls	r6, r3
 8000f48:	ea21 0106 	bic.w	r1, r1, r6
 8000f4c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f50:	430b      	orrs	r3, r1
 8000f52:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f54:	f1a4 0310 	sub.w	r3, r4, #16
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d92b      	bls.n	8000fb4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	b002      	add	sp, #8
 8000f68:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000f6a:	2d0c      	cmp	r5, #12
 8000f6c:	d80b      	bhi.n	8000f86 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f6e:	442b      	add	r3, r5
 8000f70:	251f      	movs	r5, #31
 8000f72:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000f74:	3b23      	subs	r3, #35	; 0x23
 8000f76:	409d      	lsls	r5, r3
 8000f78:	ea26 0505 	bic.w	r5, r6, r5
 8000f7c:	fa04 f303 	lsl.w	r3, r4, r3
 8000f80:	432b      	orrs	r3, r5
 8000f82:	6313      	str	r3, [r2, #48]	; 0x30
 8000f84:	e7d6      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f86:	442b      	add	r3, r5
 8000f88:	251f      	movs	r5, #31
 8000f8a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000f8c:	3b41      	subs	r3, #65	; 0x41
 8000f8e:	409d      	lsls	r5, r3
 8000f90:	ea26 0505 	bic.w	r5, r6, r5
 8000f94:	fa04 f303 	lsl.w	r3, r4, r3
 8000f98:	432b      	orrs	r3, r5
 8000f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f9c:	e7ca      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f9e:	2607      	movs	r6, #7
 8000fa0:	6911      	ldr	r1, [r2, #16]
 8000fa2:	4423      	add	r3, r4
 8000fa4:	409e      	lsls	r6, r3
 8000fa6:	ea21 0106 	bic.w	r1, r1, r6
 8000faa:	fa05 f303 	lsl.w	r3, r5, r3
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	6113      	str	r3, [r2, #16]
 8000fb2:	e7cf      	b.n	8000f54 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_ADC_ConfigChannel+0xfc>)
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d116      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fba:	6893      	ldr	r3, [r2, #8]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	d4cd      	bmi.n	8000f5c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fc0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fc2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fc8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fca:	d1c7      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_ADC_ConfigChannel+0x100>)
 8000fce:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <HAL_ADC_ConfigChannel+0x104>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	4353      	muls	r3, r2
            wait_loop_index--;
 8000fda:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000fdc:	9b01      	ldr	r3, [sp, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0bc      	beq.n	8000f5c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000fe2:	9b01      	ldr	r3, [sp, #4]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	e7f8      	b.n	8000fda <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e7b4      	b.n	8000f5e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e7b5      	b.n	8000f64 <HAL_ADC_ConfigChannel+0x68>
 8000ff8:	40012400 	.word	0x40012400
 8000ffc:	20000040 	.word	0x20000040
 8001000:	000f4240 	.word	0x000f4240

08001004 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001004:	2300      	movs	r3, #0
{
 8001006:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001008:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800100a:	6803      	ldr	r3, [r0, #0]
{
 800100c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	07d2      	lsls	r2, r2, #31
 8001012:	d502      	bpl.n	800101a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001014:	2000      	movs	r0, #0
}
 8001016:	b002      	add	sp, #8
 8001018:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <ADC_Enable+0x68>)
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <ADC_Enable+0x6c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800102c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	b9c3      	cbnz	r3, 8001064 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001032:	f7ff ff47 	bl	8000ec4 <HAL_GetTick>
 8001036:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	689d      	ldr	r5, [r3, #8]
 800103c:	f015 0501 	ands.w	r5, r5, #1
 8001040:	d1e8      	bne.n	8001014 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001042:	f7ff ff3f 	bl	8000ec4 <HAL_GetTick>
 8001046:	1b80      	subs	r0, r0, r6
 8001048:	2802      	cmp	r0, #2
 800104a:	d9f5      	bls.n	8001038 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800104e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001058:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800105a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001062:	e7d8      	b.n	8001016 <ADC_Enable+0x12>
      wait_loop_index--;
 8001064:	9b01      	ldr	r3, [sp, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	e7e0      	b.n	800102c <ADC_Enable+0x28>
 800106a:	bf00      	nop
 800106c:	20000040 	.word	0x20000040
 8001070:	000f4240 	.word	0x000f4240

08001074 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001074:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001078:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800107a:	2b01      	cmp	r3, #1
{
 800107c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800107e:	d054      	beq.n	800112a <HAL_ADC_Start+0xb6>
 8001080:	2301      	movs	r3, #1
 8001082:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001086:	f7ff ffbd 	bl	8001004 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800108a:	2800      	cmp	r0, #0
 800108c:	d149      	bne.n	8001122 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d104      	bne.n	80010b0 <HAL_ADC_Start+0x3c>
 80010a6:	4923      	ldr	r1, [pc, #140]	; (8001134 <HAL_ADC_Start+0xc0>)
 80010a8:	684a      	ldr	r2, [r1, #4]
 80010aa:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80010ae:	d12e      	bne.n	800110e <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80010b6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010ba:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010bc:	bf41      	itttt	mi
 80010be:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80010c0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80010c4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80010c8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010d0:	bf1c      	itt	ne
 80010d2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80010d4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80010d8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80010da:	2200      	movs	r2, #0
 80010dc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80010e0:	f06f 0202 	mvn.w	r2, #2
 80010e4:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80010ec:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80010f0:	d113      	bne.n	800111a <HAL_ADC_Start+0xa6>
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_ADC_Start+0xbc>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d105      	bne.n	8001104 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010f8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80010fc:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010fe:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001102:	d10a      	bne.n	800111a <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800110e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001110:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001114:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001116:	684a      	ldr	r2, [r1, #4]
 8001118:	e7cf      	b.n	80010ba <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001120:	e7f3      	b.n	800110a <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8001122:	2300      	movs	r3, #0
 8001124:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001128:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800112a:	2002      	movs	r0, #2
}
 800112c:	bd10      	pop	{r4, pc}
 800112e:	bf00      	nop
 8001130:	40012800 	.word	0x40012800
 8001134:	40012400 	.word	0x40012400

08001138 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001138:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800113a:	6803      	ldr	r3, [r0, #0]
{
 800113c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	07d2      	lsls	r2, r2, #31
 8001142:	d401      	bmi.n	8001148 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001144:	2000      	movs	r0, #0
 8001146:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001150:	f7ff feb8 	bl	8000ec4 <HAL_GetTick>
 8001154:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	07db      	lsls	r3, r3, #31
 800115c:	d5f2      	bpl.n	8001144 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800115e:	f7ff feb1 	bl	8000ec4 <HAL_GetTick>
 8001162:	1b40      	subs	r0, r0, r5
 8001164:	2802      	cmp	r0, #2
 8001166:	d9f6      	bls.n	8001156 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001168:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001172:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800117a:	bd38      	pop	{r3, r4, r5, pc}

0800117c <HAL_ADC_Init>:
{
 800117c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800117e:	4604      	mov	r4, r0
 8001180:	2800      	cmp	r0, #0
 8001182:	d071      	beq.n	8001268 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001184:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001186:	b923      	cbnz	r3, 8001192 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001188:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800118a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800118e:	f001 fe8d 	bl	8002eac <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001192:	4620      	mov	r0, r4
 8001194:	f7ff ffd0 	bl	8001138 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001198:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800119a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011a0:	d164      	bne.n	800126c <HAL_ADC_Init+0xf0>
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d162      	bne.n	800126c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80011a6:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80011a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80011ac:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	f023 0302 	bic.w	r3, r3, #2
 80011b2:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80011b6:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011b8:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80011ba:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80011bc:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80011c2:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011c6:	d038      	beq.n	800123a <HAL_ADC_Init+0xbe>
 80011c8:	2901      	cmp	r1, #1
 80011ca:	bf14      	ite	ne
 80011cc:	4606      	movne	r6, r0
 80011ce:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d2:	6965      	ldr	r5, [r4, #20]
 80011d4:	2d01      	cmp	r5, #1
 80011d6:	d107      	bne.n	80011e8 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d130      	bne.n	800123e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011dc:	69a3      	ldr	r3, [r4, #24]
 80011de:	3b01      	subs	r3, #1
 80011e0:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80011e4:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80011e8:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011ea:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80011ee:	685d      	ldr	r5, [r3, #4]
 80011f0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80011f4:	ea45 0506 	orr.w	r5, r5, r6
 80011f8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80011fa:	689e      	ldr	r6, [r3, #8]
 80011fc:	4d1d      	ldr	r5, [pc, #116]	; (8001274 <HAL_ADC_Init+0xf8>)
 80011fe:	ea05 0506 	and.w	r5, r5, r6
 8001202:	ea45 0502 	orr.w	r5, r5, r2
 8001206:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001208:	d001      	beq.n	800120e <HAL_ADC_Init+0x92>
 800120a:	2901      	cmp	r1, #1
 800120c:	d120      	bne.n	8001250 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800120e:	6921      	ldr	r1, [r4, #16]
 8001210:	3901      	subs	r1, #1
 8001212:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001214:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001216:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800121a:	4329      	orrs	r1, r5
 800121c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800121e:	6899      	ldr	r1, [r3, #8]
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_ADC_Init+0xfc>)
 8001222:	400b      	ands	r3, r1
 8001224:	429a      	cmp	r2, r3
 8001226:	d115      	bne.n	8001254 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001228:	2300      	movs	r3, #0
 800122a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800122c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	62a3      	str	r3, [r4, #40]	; 0x28
 8001238:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800123a:	460e      	mov	r6, r1
 800123c:	e7c9      	b.n	80011d2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800123e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001246:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800124e:	e7cb      	b.n	80011e8 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001250:	2100      	movs	r1, #0
 8001252:	e7df      	b.n	8001214 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001256:	f023 0312 	bic.w	r3, r3, #18
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001260:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001268:	2001      	movs	r0, #1
}
 800126a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	62a3      	str	r3, [r4, #40]	; 0x28
 8001272:	e7f9      	b.n	8001268 <HAL_ADC_Init+0xec>
 8001274:	ffe1f7fd 	.word	0xffe1f7fd
 8001278:	ff1f0efe 	.word	0xff1f0efe

0800127c <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 800127c:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0U;
  uint32_t tmp_mcr = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 800127e:	4604      	mov	r4, r0
 8001280:	2800      	cmp	r0, #0
 8001282:	d069      	beq.n	8001358 <HAL_CAN_Init+0xdc>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8001284:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001288:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800128c:	b91b      	cbnz	r3, 8001296 <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 800128e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8001292:	f001 fe3b 	bl	8002f0c <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8001296:	2302      	movs	r3, #2
 8001298:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	f022 0202 	bic.w	r2, r2, #2
 80012a4:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	f042 0201 	orr.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 80012ae:	f7ff fe09 	bl	8000ec4 <HAL_GetTick>
 80012b2:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80012b4:	6822      	ldr	r2, [r4, #0]
 80012b6:	6855      	ldr	r5, [r2, #4]
 80012b8:	f015 0501 	ands.w	r5, r5, #1
 80012bc:	d04e      	beq.n	800135c <HAL_CAN_Init+0xe0>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80012be:	6853      	ldr	r3, [r2, #4]
 80012c0:	07d9      	lsls	r1, r3, #31
 80012c2:	d546      	bpl.n	8001352 <HAL_CAN_Init+0xd6>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80012c4:	69a3      	ldr	r3, [r4, #24]
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80012c6:	69e1      	ldr	r1, [r4, #28]
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	bf0c      	ite	eq
 80012cc:	2380      	moveq	r3, #128	; 0x80
 80012ce:	2300      	movne	r3, #0
    if (hcan->Init.ABOM == ENABLE)
 80012d0:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80012d2:	6a21      	ldr	r1, [r4, #32]
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 80012d4:	bf0c      	ite	eq
 80012d6:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 80012da:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 80012de:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
    }
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80012e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 80012e2:	bf0c      	ite	eq
 80012e4:	f043 0320 	orreq.w	r3, r3, #32
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 80012e8:	f023 0320 	bicne.w	r3, r3, #32
    if (hcan->Init.NART == ENABLE)
 80012ec:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80012ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 80012f0:	bf0c      	ite	eq
 80012f2:	f043 0310 	orreq.w	r3, r3, #16
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 80012f6:	f023 0310 	bicne.w	r3, r3, #16
    if (hcan->Init.RFLM == ENABLE)
 80012fa:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
    }
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 80012fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 80012fe:	bf0c      	ite	eq
 8001300:	f043 0308 	orreq.w	r3, r3, #8
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 8001304:	f023 0308 	bicne.w	r3, r3, #8
    if (hcan->Init.TXFP == ENABLE)
 8001308:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 800130a:	6811      	ldr	r1, [r2, #0]
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 800130c:	bf0c      	ite	eq
 800130e:	f043 0304 	orreq.w	r3, r3, #4
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 8001312:	f023 0304 	bicne.w	r3, r3, #4
    MODIFY_REG(hcan->Instance->MCR,
 8001316:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 800131a:	430b      	orrs	r3, r1
 800131c:	6013      	str	r3, [r2, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800131e:	68e1      	ldr	r1, [r4, #12]
 8001320:	68a3      	ldr	r3, [r4, #8]
 8001322:	430b      	orrs	r3, r1
 8001324:	6921      	ldr	r1, [r4, #16]
 8001326:	430b      	orrs	r3, r1
 8001328:	6961      	ldr	r1, [r4, #20]
 800132a:	430b      	orrs	r3, r1
 800132c:	6861      	ldr	r1, [r4, #4]
 800132e:	3901      	subs	r1, #1
 8001330:	430b      	orrs	r3, r1
 8001332:	61d3      	str	r3, [r2, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U)));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001334:	6813      	ldr	r3, [r2, #0]
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	6013      	str	r3, [r2, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 800133c:	f7ff fdc2 	bl	8000ec4 <HAL_GetTick>
 8001340:	4605      	mov	r5, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	07d2      	lsls	r2, r2, #31
 8001348:	d413      	bmi.n	8001372 <HAL_CAN_Init+0xf6>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800134a:	6858      	ldr	r0, [r3, #4]
 800134c:	f010 0001 	ands.w	r0, r0, #1
 8001350:	d01b      	beq.n	800138a <HAL_CAN_Init+0x10e>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8001352:	2304      	movs	r3, #4
 8001354:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
 800135a:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800135c:	f7ff fdb2 	bl	8000ec4 <HAL_GetTick>
 8001360:	1b80      	subs	r0, r0, r6
 8001362:	280a      	cmp	r0, #10
 8001364:	d9a6      	bls.n	80012b4 <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001366:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8001368:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 800136c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 8001370:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001372:	f7ff fda7 	bl	8000ec4 <HAL_GetTick>
 8001376:	1b40      	subs	r0, r0, r5
 8001378:	280a      	cmp	r0, #10
 800137a:	d9e2      	bls.n	8001342 <HAL_CAN_Init+0xc6>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 800137c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 800137e:	2300      	movs	r3, #0
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001380:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_UNLOCK(hcan);
 8001384:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001388:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 800138a:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800138c:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 800138e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  }
}
 8001392:	bd70      	pop	{r4, r5, r6, pc}

08001394 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001396:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800139a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80013ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80013b0:	60d3      	str	r3, [r2, #12]
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b530      	push	{r4, r5, lr}
 80013bc:	68dc      	ldr	r4, [r3, #12]
 80013be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	bf28      	it	cs
 80013cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d4:	bf98      	it	ls
 80013d6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	fa05 f303 	lsl.w	r3, r5, r3
 80013dc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e0:	bf88      	it	hi
 80013e2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4019      	ands	r1, r3
 80013e6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	fa05 f404 	lsl.w	r4, r5, r4
 80013ec:	3c01      	subs	r4, #1
 80013ee:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80013f0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f2:	ea42 0201 	orr.w	r2, r2, r1
 80013f6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	bfaf      	iteee	ge
 80013fc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	4b06      	ldrlt	r3, [pc, #24]	; (800141c <HAL_NVIC_SetPriority+0x64>)
 8001402:	f000 000f 	andlt.w	r0, r0, #15
 8001406:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	bfa5      	ittet	ge
 800140a:	b2d2      	uxtbge	r2, r2
 800140c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001416:	bd30      	pop	{r4, r5, pc}
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	e000ed14 	.word	0xe000ed14

08001420 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001420:	2301      	movs	r3, #1
 8001422:	0942      	lsrs	r2, r0, #5
 8001424:	f000 001f 	and.w	r0, r0, #31
 8001428:	fa03 f000 	lsl.w	r0, r3, r0
 800142c:	4b01      	ldr	r3, [pc, #4]	; (8001434 <HAL_NVIC_EnableIRQ+0x14>)
 800142e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100

08001438 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	3801      	subs	r0, #1
 800143a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800143e:	d20a      	bcs.n	8001456 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001466:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	bf0c      	ite	eq
 800146c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001470:	f022 0204 	bicne.w	r2, r2, #4
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	4770      	bx	lr
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800147c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800147e:	f001 f937 	bl	80026f0 <HAL_SYSTICK_Callback>
 8001482:	bd08      	pop	{r3, pc}

08001484 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001484:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001488:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800148a:	2b02      	cmp	r3, #2
 800148c:	d003      	beq.n	8001496 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148e:	2304      	movs	r3, #4
 8001490:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001492:	2001      	movs	r0, #1
 8001494:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001496:	6803      	ldr	r3, [r0, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	f022 020e 	bic.w	r2, r2, #14
 800149e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014a8:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_DMA_Abort_IT+0x88>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01f      	beq.n	80014ee <HAL_DMA_Abort_IT+0x6a>
 80014ae:	3214      	adds	r2, #20
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d01e      	beq.n	80014f2 <HAL_DMA_Abort_IT+0x6e>
 80014b4:	3214      	adds	r2, #20
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01d      	beq.n	80014f6 <HAL_DMA_Abort_IT+0x72>
 80014ba:	3214      	adds	r2, #20
 80014bc:	4293      	cmp	r3, r2
 80014be:	d01d      	beq.n	80014fc <HAL_DMA_Abort_IT+0x78>
 80014c0:	3214      	adds	r2, #20
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01d      	beq.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 80014c6:	3214      	adds	r2, #20
 80014c8:	4293      	cmp	r3, r2
 80014ca:	bf0c      	ite	eq
 80014cc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80014d0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d6:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014d8:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80014da:	2301      	movs	r3, #1
 80014dc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80014e2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80014e6:	b17b      	cbz	r3, 8001508 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80014e8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	4620      	mov	r0, r4
 80014ec:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ee:	2301      	movs	r3, #1
 80014f0:	e7f0      	b.n	80014d4 <HAL_DMA_Abort_IT+0x50>
 80014f2:	2310      	movs	r3, #16
 80014f4:	e7ee      	b.n	80014d4 <HAL_DMA_Abort_IT+0x50>
 80014f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fa:	e7eb      	b.n	80014d4 <HAL_DMA_Abort_IT+0x50>
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	e7e8      	b.n	80014d4 <HAL_DMA_Abort_IT+0x50>
 8001502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001506:	e7e5      	b.n	80014d4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001508:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800150a:	bd10      	pop	{r4, pc}
 800150c:	40020008 	.word	0x40020008
 8001510:	40020000 	.word	0x40020000

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001518:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800151a:	4616      	mov	r6, r2
 800151c:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800151e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80016c4 <HAL_GPIO_Init+0x1b0>
 8001522:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80016c8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001526:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800152c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001530:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001534:	45a0      	cmp	r8, r4
 8001536:	d17f      	bne.n	8001638 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001538:	684d      	ldr	r5, [r1, #4]
 800153a:	2d12      	cmp	r5, #18
 800153c:	f000 80af 	beq.w	800169e <HAL_GPIO_Init+0x18a>
 8001540:	f200 8088 	bhi.w	8001654 <HAL_GPIO_Init+0x140>
 8001544:	2d02      	cmp	r5, #2
 8001546:	f000 80a7 	beq.w	8001698 <HAL_GPIO_Init+0x184>
 800154a:	d87c      	bhi.n	8001646 <HAL_GPIO_Init+0x132>
 800154c:	2d00      	cmp	r5, #0
 800154e:	f000 808e 	beq.w	800166e <HAL_GPIO_Init+0x15a>
 8001552:	2d01      	cmp	r5, #1
 8001554:	f000 809e 	beq.w	8001694 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001558:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800155c:	2cff      	cmp	r4, #255	; 0xff
 800155e:	bf93      	iteet	ls
 8001560:	4682      	movls	sl, r0
 8001562:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001566:	3d08      	subhi	r5, #8
 8001568:	f8d0 b000 	ldrls.w	fp, [r0]
 800156c:	bf92      	itee	ls
 800156e:	00b5      	lslls	r5, r6, #2
 8001570:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001574:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001576:	fa09 f805 	lsl.w	r8, r9, r5
 800157a:	ea2b 0808 	bic.w	r8, fp, r8
 800157e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001582:	bf88      	it	hi
 8001584:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001588:	ea48 0505 	orr.w	r5, r8, r5
 800158c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001590:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001594:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001598:	d04e      	beq.n	8001638 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800159a:	4d47      	ldr	r5, [pc, #284]	; (80016b8 <HAL_GPIO_Init+0x1a4>)
 800159c:	4f46      	ldr	r7, [pc, #280]	; (80016b8 <HAL_GPIO_Init+0x1a4>)
 800159e:	69ad      	ldr	r5, [r5, #24]
 80015a0:	f026 0803 	bic.w	r8, r6, #3
 80015a4:	f045 0501 	orr.w	r5, r5, #1
 80015a8:	61bd      	str	r5, [r7, #24]
 80015aa:	69bd      	ldr	r5, [r7, #24]
 80015ac:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80015b0:	f005 0501 	and.w	r5, r5, #1
 80015b4:	9501      	str	r5, [sp, #4]
 80015b6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80015ba:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015be:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80015c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80015c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80015c8:	fa09 f90b 	lsl.w	r9, r9, fp
 80015cc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d0:	4d3a      	ldr	r5, [pc, #232]	; (80016bc <HAL_GPIO_Init+0x1a8>)
 80015d2:	42a8      	cmp	r0, r5
 80015d4:	d068      	beq.n	80016a8 <HAL_GPIO_Init+0x194>
 80015d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015da:	42a8      	cmp	r0, r5
 80015dc:	d066      	beq.n	80016ac <HAL_GPIO_Init+0x198>
 80015de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015e2:	42a8      	cmp	r0, r5
 80015e4:	d064      	beq.n	80016b0 <HAL_GPIO_Init+0x19c>
 80015e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015ea:	42a8      	cmp	r0, r5
 80015ec:	bf0c      	ite	eq
 80015ee:	2503      	moveq	r5, #3
 80015f0:	2504      	movne	r5, #4
 80015f2:	fa05 f50b 	lsl.w	r5, r5, fp
 80015f6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80015fa:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fe:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001600:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001604:	bf14      	ite	ne
 8001606:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001608:	43a5      	biceq	r5, r4
 800160a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800160c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001612:	bf14      	ite	ne
 8001614:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001616:	43a5      	biceq	r5, r4
 8001618:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800161a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001620:	bf14      	ite	ne
 8001622:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001624:	43a5      	biceq	r5, r4
 8001626:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001628:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800162e:	bf14      	ite	ne
 8001630:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001632:	ea25 0404 	biceq.w	r4, r5, r4
 8001636:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001638:	3601      	adds	r6, #1
 800163a:	2e10      	cmp	r6, #16
 800163c:	f47f af73 	bne.w	8001526 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001640:	b003      	add	sp, #12
 8001642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001646:	2d03      	cmp	r5, #3
 8001648:	d022      	beq.n	8001690 <HAL_GPIO_Init+0x17c>
 800164a:	2d11      	cmp	r5, #17
 800164c:	d184      	bne.n	8001558 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800164e:	68ca      	ldr	r2, [r1, #12]
 8001650:	3204      	adds	r2, #4
          break;
 8001652:	e781      	b.n	8001558 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001654:	4f1a      	ldr	r7, [pc, #104]	; (80016c0 <HAL_GPIO_Init+0x1ac>)
 8001656:	42bd      	cmp	r5, r7
 8001658:	d009      	beq.n	800166e <HAL_GPIO_Init+0x15a>
 800165a:	d812      	bhi.n	8001682 <HAL_GPIO_Init+0x16e>
 800165c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80016cc <HAL_GPIO_Init+0x1b8>
 8001660:	454d      	cmp	r5, r9
 8001662:	d004      	beq.n	800166e <HAL_GPIO_Init+0x15a>
 8001664:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001668:	454d      	cmp	r5, r9
 800166a:	f47f af75 	bne.w	8001558 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800166e:	688a      	ldr	r2, [r1, #8]
 8001670:	b1c2      	cbz	r2, 80016a4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001672:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001674:	bf0c      	ite	eq
 8001676:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800167a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800167e:	2208      	movs	r2, #8
 8001680:	e76a      	b.n	8001558 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001682:	4575      	cmp	r5, lr
 8001684:	d0f3      	beq.n	800166e <HAL_GPIO_Init+0x15a>
 8001686:	4565      	cmp	r5, ip
 8001688:	d0f1      	beq.n	800166e <HAL_GPIO_Init+0x15a>
 800168a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80016d0 <HAL_GPIO_Init+0x1bc>
 800168e:	e7eb      	b.n	8001668 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001690:	2200      	movs	r2, #0
 8001692:	e761      	b.n	8001558 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001694:	68ca      	ldr	r2, [r1, #12]
          break;
 8001696:	e75f      	b.n	8001558 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001698:	68ca      	ldr	r2, [r1, #12]
 800169a:	3208      	adds	r2, #8
          break;
 800169c:	e75c      	b.n	8001558 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800169e:	68ca      	ldr	r2, [r1, #12]
 80016a0:	320c      	adds	r2, #12
          break;
 80016a2:	e759      	b.n	8001558 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016a4:	2204      	movs	r2, #4
 80016a6:	e757      	b.n	8001558 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a8:	2500      	movs	r5, #0
 80016aa:	e7a2      	b.n	80015f2 <HAL_GPIO_Init+0xde>
 80016ac:	2501      	movs	r5, #1
 80016ae:	e7a0      	b.n	80015f2 <HAL_GPIO_Init+0xde>
 80016b0:	2502      	movs	r5, #2
 80016b2:	e79e      	b.n	80015f2 <HAL_GPIO_Init+0xde>
 80016b4:	40010400 	.word	0x40010400
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010800 	.word	0x40010800
 80016c0:	10210000 	.word	0x10210000
 80016c4:	10310000 	.word	0x10310000
 80016c8:	10320000 	.word	0x10320000
 80016cc:	10110000 	.word	0x10110000
 80016d0:	10220000 	.word	0x10220000

080016d4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d4:	6883      	ldr	r3, [r0, #8]
 80016d6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80016d8:	bf14      	ite	ne
 80016da:	2001      	movne	r0, #1
 80016dc:	2000      	moveq	r0, #0
 80016de:	4770      	bx	lr

080016e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e0:	b10a      	cbz	r2, 80016e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e2:	6101      	str	r1, [r0, #16]
 80016e4:	4770      	bx	lr
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	e7fb      	b.n	80016e2 <HAL_GPIO_WritePin+0x2>
	...

080016ec <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80016ee:	4604      	mov	r4, r0
 80016f0:	b908      	cbnz	r0, 80016f6 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
 80016f4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80016f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016fe:	b91b      	cbnz	r3, 8001708 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001700:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001704:	f001 fc3a 	bl	8002f7c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001708:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800170a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001710:	6813      	ldr	r3, [r2, #0]
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001718:	f000 fada 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800171c:	6863      	ldr	r3, [r4, #4]
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_I2C_Init+0xf0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d830      	bhi.n	8001786 <HAL_I2C_Init+0x9a>
 8001724:	4a2e      	ldr	r2, [pc, #184]	; (80017e0 <HAL_I2C_Init+0xf4>)
 8001726:	4290      	cmp	r0, r2
 8001728:	d9e3      	bls.n	80016f2 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800172a:	4a2e      	ldr	r2, [pc, #184]	; (80017e4 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800172c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800172e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001732:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001734:	3201      	adds	r2, #1
 8001736:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001738:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_I2C_Init+0xf0>)
 800173a:	3801      	subs	r0, #1
 800173c:	4293      	cmp	r3, r2
 800173e:	d832      	bhi.n	80017a6 <HAL_I2C_Init+0xba>
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fbb0 f0f3 	udiv	r0, r0, r3
 8001746:	1c43      	adds	r3, r0, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b04      	cmp	r3, #4
 800174e:	bf38      	it	cc
 8001750:	2304      	movcc	r3, #4
 8001752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001754:	6a22      	ldr	r2, [r4, #32]
 8001756:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001758:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800175e:	68e2      	ldr	r2, [r4, #12]
 8001760:	6923      	ldr	r3, [r4, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001766:	69a2      	ldr	r2, [r4, #24]
 8001768:	6963      	ldr	r3, [r4, #20]
 800176a:	4313      	orrs	r3, r2
 800176c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800176e:	680b      	ldr	r3, [r1, #0]
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001776:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001778:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800177a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800177e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001780:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001784:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_I2C_Init+0xfc>)
 8001788:	4290      	cmp	r0, r2
 800178a:	d9b2      	bls.n	80016f2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800178c:	4d15      	ldr	r5, [pc, #84]	; (80017e4 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800178e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001792:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001796:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001798:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800179a:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800179c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80017a0:	fbb2 f2f5 	udiv	r2, r2, r5
 80017a4:	e7c6      	b.n	8001734 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80017a6:	68a2      	ldr	r2, [r4, #8]
 80017a8:	b952      	cbnz	r2, 80017c0 <HAL_I2C_Init+0xd4>
 80017aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80017b2:	1c43      	adds	r3, r0, #1
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	b16b      	cbz	r3, 80017d6 <HAL_I2C_Init+0xea>
 80017ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017be:	e7c8      	b.n	8001752 <HAL_I2C_Init+0x66>
 80017c0:	2219      	movs	r2, #25
 80017c2:	4353      	muls	r3, r2
 80017c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80017c8:	1c43      	adds	r3, r0, #1
 80017ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ce:	b113      	cbz	r3, 80017d6 <HAL_I2C_Init+0xea>
 80017d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d4:	e7bd      	b.n	8001752 <HAL_I2C_Init+0x66>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e7bb      	b.n	8001752 <HAL_I2C_Init+0x66>
 80017da:	bf00      	nop
 80017dc:	000186a0 	.word	0x000186a0
 80017e0:	001e847f 	.word	0x001e847f
 80017e4:	000f4240 	.word	0x000f4240
 80017e8:	003d08ff 	.word	0x003d08ff

080017ec <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ec:	6803      	ldr	r3, [r0, #0]
{
 80017ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	07db      	lsls	r3, r3, #31
{
 80017f4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	d410      	bmi.n	800181a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f8:	682b      	ldr	r3, [r5, #0]
 80017fa:	079f      	lsls	r7, r3, #30
 80017fc:	d45e      	bmi.n	80018bc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	682b      	ldr	r3, [r5, #0]
 8001800:	0719      	lsls	r1, r3, #28
 8001802:	f100 8095 	bmi.w	8001930 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	075a      	lsls	r2, r3, #29
 800180a:	f100 80bf 	bmi.w	800198c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180e:	69ea      	ldr	r2, [r5, #28]
 8001810:	2a00      	cmp	r2, #0
 8001812:	f040 812d 	bne.w	8001a70 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001816:	2000      	movs	r0, #0
 8001818:	e014      	b.n	8001844 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800181a:	4c90      	ldr	r4, [pc, #576]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 800181c:	6863      	ldr	r3, [r4, #4]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b04      	cmp	r3, #4
 8001824:	d007      	beq.n	8001836 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001826:	6863      	ldr	r3, [r4, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d10c      	bne.n	800184a <HAL_RCC_OscConfig+0x5e>
 8001830:	6863      	ldr	r3, [r4, #4]
 8001832:	03de      	lsls	r6, r3, #15
 8001834:	d509      	bpl.n	800184a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	039c      	lsls	r4, r3, #14
 800183a:	d5dd      	bpl.n	80017f8 <HAL_RCC_OscConfig+0xc>
 800183c:	686b      	ldr	r3, [r5, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1da      	bne.n	80017f8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001842:	2001      	movs	r0, #1
}
 8001844:	b002      	add	sp, #8
 8001846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184a:	686b      	ldr	r3, [r5, #4]
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d110      	bne.n	8001874 <HAL_RCC_OscConfig+0x88>
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800185a:	f7ff fb33 	bl	8000ec4 <HAL_GetTick>
 800185e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	0398      	lsls	r0, r3, #14
 8001864:	d4c8      	bmi.n	80017f8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001866:	f7ff fb2d 	bl	8000ec4 <HAL_GetTick>
 800186a:	1b80      	subs	r0, r0, r6
 800186c:	2864      	cmp	r0, #100	; 0x64
 800186e:	d9f7      	bls.n	8001860 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001870:	2003      	movs	r0, #3
 8001872:	e7e7      	b.n	8001844 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001874:	b99b      	cbnz	r3, 800189e <HAL_RCC_OscConfig+0xb2>
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187c:	6023      	str	r3, [r4, #0]
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001886:	f7ff fb1d 	bl	8000ec4 <HAL_GetTick>
 800188a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	0399      	lsls	r1, r3, #14
 8001890:	d5b2      	bpl.n	80017f8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001892:	f7ff fb17 	bl	8000ec4 <HAL_GetTick>
 8001896:	1b80      	subs	r0, r0, r6
 8001898:	2864      	cmp	r0, #100	; 0x64
 800189a:	d9f7      	bls.n	800188c <HAL_RCC_OscConfig+0xa0>
 800189c:	e7e8      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	d103      	bne.n	80018ae <HAL_RCC_OscConfig+0xc2>
 80018a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018aa:	6023      	str	r3, [r4, #0]
 80018ac:	e7d1      	b.n	8001852 <HAL_RCC_OscConfig+0x66>
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6023      	str	r3, [r4, #0]
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ba:	e7cd      	b.n	8001858 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018bc:	4c67      	ldr	r4, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018be:	6863      	ldr	r3, [r4, #4]
 80018c0:	f013 0f0c 	tst.w	r3, #12
 80018c4:	d007      	beq.n	80018d6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018c6:	6863      	ldr	r3, [r4, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d110      	bne.n	80018f2 <HAL_RCC_OscConfig+0x106>
 80018d0:	6863      	ldr	r3, [r4, #4]
 80018d2:	03da      	lsls	r2, r3, #15
 80018d4:	d40d      	bmi.n	80018f2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	079b      	lsls	r3, r3, #30
 80018da:	d502      	bpl.n	80018e2 <HAL_RCC_OscConfig+0xf6>
 80018dc:	692b      	ldr	r3, [r5, #16]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d1af      	bne.n	8001842 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	696a      	ldr	r2, [r5, #20]
 80018e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018ee:	6023      	str	r3, [r4, #0]
 80018f0:	e785      	b.n	80017fe <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f2:	692a      	ldr	r2, [r5, #16]
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018f6:	b16a      	cbz	r2, 8001914 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018fc:	f7ff fae2 	bl	8000ec4 <HAL_GetTick>
 8001900:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	079f      	lsls	r7, r3, #30
 8001906:	d4ec      	bmi.n	80018e2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fadc 	bl	8000ec4 <HAL_GetTick>
 800190c:	1b80      	subs	r0, r0, r6
 800190e:	2802      	cmp	r0, #2
 8001910:	d9f7      	bls.n	8001902 <HAL_RCC_OscConfig+0x116>
 8001912:	e7ad      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001914:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001916:	f7ff fad5 	bl	8000ec4 <HAL_GetTick>
 800191a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	0798      	lsls	r0, r3, #30
 8001920:	f57f af6d 	bpl.w	80017fe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001924:	f7ff face 	bl	8000ec4 <HAL_GetTick>
 8001928:	1b80      	subs	r0, r0, r6
 800192a:	2802      	cmp	r0, #2
 800192c:	d9f6      	bls.n	800191c <HAL_RCC_OscConfig+0x130>
 800192e:	e79f      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001930:	69aa      	ldr	r2, [r5, #24]
 8001932:	4c4a      	ldr	r4, [pc, #296]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_RCC_OscConfig+0x278>)
 8001936:	b1da      	cbz	r2, 8001970 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800193c:	f7ff fac2 	bl	8000ec4 <HAL_GetTick>
 8001940:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001944:	079b      	lsls	r3, r3, #30
 8001946:	d50d      	bpl.n	8001964 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001948:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800194c:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fbb3 f3f2 	udiv	r3, r3, r2
 8001954:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001956:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	1e5a      	subs	r2, r3, #1
 800195c:	9201      	str	r2, [sp, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f9      	bne.n	8001956 <HAL_RCC_OscConfig+0x16a>
 8001962:	e750      	b.n	8001806 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff faae 	bl	8000ec4 <HAL_GetTick>
 8001968:	1b80      	subs	r0, r0, r6
 800196a:	2802      	cmp	r0, #2
 800196c:	d9e9      	bls.n	8001942 <HAL_RCC_OscConfig+0x156>
 800196e:	e77f      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001970:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001972:	f7ff faa7 	bl	8000ec4 <HAL_GetTick>
 8001976:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800197a:	079f      	lsls	r7, r3, #30
 800197c:	f57f af43 	bpl.w	8001806 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001980:	f7ff faa0 	bl	8000ec4 <HAL_GetTick>
 8001984:	1b80      	subs	r0, r0, r6
 8001986:	2802      	cmp	r0, #2
 8001988:	d9f6      	bls.n	8001978 <HAL_RCC_OscConfig+0x18c>
 800198a:	e771      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198c:	4c33      	ldr	r4, [pc, #204]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 800198e:	69e3      	ldr	r3, [r4, #28]
 8001990:	00d8      	lsls	r0, r3, #3
 8001992:	d424      	bmi.n	80019de <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001994:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	69e3      	ldr	r3, [r4, #28]
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	61e3      	str	r3, [r4, #28]
 800199e:	69e3      	ldr	r3, [r4, #28]
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4e30      	ldr	r6, [pc, #192]	; (8001a6c <HAL_RCC_OscConfig+0x280>)
 80019aa:	6833      	ldr	r3, [r6, #0]
 80019ac:	05d9      	lsls	r1, r3, #23
 80019ae:	d518      	bpl.n	80019e2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	68eb      	ldr	r3, [r5, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d126      	bne.n	8001a04 <HAL_RCC_OscConfig+0x218>
 80019b6:	6a23      	ldr	r3, [r4, #32]
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019be:	f7ff fa81 	bl	8000ec4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019c6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	6a23      	ldr	r3, [r4, #32]
 80019ca:	079b      	lsls	r3, r3, #30
 80019cc:	d53f      	bpl.n	8001a4e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80019ce:	2f00      	cmp	r7, #0
 80019d0:	f43f af1d 	beq.w	800180e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	69e3      	ldr	r3, [r4, #28]
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019da:	61e3      	str	r3, [r4, #28]
 80019dc:	e717      	b.n	800180e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2700      	movs	r7, #0
 80019e0:	e7e2      	b.n	80019a8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	6833      	ldr	r3, [r6, #0]
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80019ea:	f7ff fa6b 	bl	8000ec4 <HAL_GetTick>
 80019ee:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	6833      	ldr	r3, [r6, #0]
 80019f2:	05da      	lsls	r2, r3, #23
 80019f4:	d4dc      	bmi.n	80019b0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff fa65 	bl	8000ec4 <HAL_GetTick>
 80019fa:	eba0 0008 	sub.w	r0, r0, r8
 80019fe:	2864      	cmp	r0, #100	; 0x64
 8001a00:	d9f6      	bls.n	80019f0 <HAL_RCC_OscConfig+0x204>
 8001a02:	e735      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	b9ab      	cbnz	r3, 8001a32 <HAL_RCC_OscConfig+0x246>
 8001a06:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6223      	str	r3, [r4, #32]
 8001a12:	6a23      	ldr	r3, [r4, #32]
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fa53 	bl	8000ec4 <HAL_GetTick>
 8001a1e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a20:	6a23      	ldr	r3, [r4, #32]
 8001a22:	0798      	lsls	r0, r3, #30
 8001a24:	d5d3      	bpl.n	80019ce <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff fa4d 	bl	8000ec4 <HAL_GetTick>
 8001a2a:	1b80      	subs	r0, r0, r6
 8001a2c:	4540      	cmp	r0, r8
 8001a2e:	d9f7      	bls.n	8001a20 <HAL_RCC_OscConfig+0x234>
 8001a30:	e71e      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	6a23      	ldr	r3, [r4, #32]
 8001a36:	d103      	bne.n	8001a40 <HAL_RCC_OscConfig+0x254>
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6223      	str	r3, [r4, #32]
 8001a3e:	e7ba      	b.n	80019b6 <HAL_RCC_OscConfig+0x1ca>
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6223      	str	r3, [r4, #32]
 8001a46:	6a23      	ldr	r3, [r4, #32]
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	e7b6      	b.n	80019bc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fa39 	bl	8000ec4 <HAL_GetTick>
 8001a52:	eba0 0008 	sub.w	r0, r0, r8
 8001a56:	42b0      	cmp	r0, r6
 8001a58:	d9b6      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1dc>
 8001a5a:	e709      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	42420000 	.word	0x42420000
 8001a64:	42420480 	.word	0x42420480
 8001a68:	20000040 	.word	0x20000040
 8001a6c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a70:	4c22      	ldr	r4, [pc, #136]	; (8001afc <HAL_RCC_OscConfig+0x310>)
 8001a72:	6863      	ldr	r3, [r4, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	f43f aee2 	beq.w	8001842 <HAL_RCC_OscConfig+0x56>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	4e1f      	ldr	r6, [pc, #124]	; (8001b00 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a82:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a84:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a86:	d12b      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001a88:	f7ff fa1c 	bl	8000ec4 <HAL_GetTick>
 8001a8c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	0199      	lsls	r1, r3, #6
 8001a92:	d41f      	bmi.n	8001ad4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a94:	6a2b      	ldr	r3, [r5, #32]
 8001a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9a:	d105      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a9c:	6862      	ldr	r2, [r4, #4]
 8001a9e:	68a9      	ldr	r1, [r5, #8]
 8001aa0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001aaa:	6862      	ldr	r2, [r4, #4]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001aba:	f7ff fa03 	bl	8000ec4 <HAL_GetTick>
 8001abe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	019a      	lsls	r2, r3, #6
 8001ac4:	f53f aea7 	bmi.w	8001816 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff f9fc 	bl	8000ec4 <HAL_GetTick>
 8001acc:	1b40      	subs	r0, r0, r5
 8001ace:	2802      	cmp	r0, #2
 8001ad0:	d9f6      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x2d4>
 8001ad2:	e6cd      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f9f6 	bl	8000ec4 <HAL_GetTick>
 8001ad8:	1bc0      	subs	r0, r0, r7
 8001ada:	2802      	cmp	r0, #2
 8001adc:	d9d7      	bls.n	8001a8e <HAL_RCC_OscConfig+0x2a2>
 8001ade:	e6c7      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f9f0 	bl	8000ec4 <HAL_GetTick>
 8001ae4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	019b      	lsls	r3, r3, #6
 8001aea:	f57f ae94 	bpl.w	8001816 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff f9e9 	bl	8000ec4 <HAL_GetTick>
 8001af2:	1b40      	subs	r0, r0, r5
 8001af4:	2802      	cmp	r0, #2
 8001af6:	d9f6      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x2fa>
 8001af8:	e6ba      	b.n	8001870 <HAL_RCC_OscConfig+0x84>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	42420060 	.word	0x42420060

08001b04 <HAL_RCC_GetSysClockFreq>:
{
 8001b04:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001b08:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b0a:	ac02      	add	r4, sp, #8
 8001b0c:	f103 0510 	add.w	r5, r3, #16
 8001b10:	4622      	mov	r2, r4
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	3308      	adds	r3, #8
 8001b18:	c203      	stmia	r2!, {r0, r1}
 8001b1a:	42ab      	cmp	r3, r5
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	d1f7      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b20:	2301      	movs	r3, #1
 8001b22:	f88d 3004 	strb.w	r3, [sp, #4]
 8001b26:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001b28:	4911      	ldr	r1, [pc, #68]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b2a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001b2e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b30:	f003 020c 	and.w	r2, r3, #12
 8001b34:	2a08      	cmp	r2, #8
 8001b36:	d117      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b38:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001b3c:	a806      	add	r0, sp, #24
 8001b3e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b40:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b42:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b46:	d50c      	bpl.n	8001b62 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b48:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b4a:	480a      	ldr	r0, [pc, #40]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b4c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b50:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b52:	aa06      	add	r2, sp, #24
 8001b54:	4413      	add	r3, r2
 8001b56:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b5a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b5e:	b007      	add	sp, #28
 8001b60:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x74>)
 8001b64:	4350      	muls	r0, r2
 8001b66:	e7fa      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001b6a:	e7f8      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x5a>
 8001b6c:	0800330c 	.word	0x0800330c
 8001b70:	40021000 	.word	0x40021000
 8001b74:	007a1200 	.word	0x007a1200
 8001b78:	003d0900 	.word	0x003d0900

08001b7c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	; (8001cb4 <HAL_RCC_ClockConfig+0x138>)
{
 8001b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b82:	6813      	ldr	r3, [r2, #0]
{
 8001b84:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	428b      	cmp	r3, r1
{
 8001b8c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b8e:	d328      	bcc.n	8001be2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	682a      	ldr	r2, [r5, #0]
 8001b92:	0791      	lsls	r1, r2, #30
 8001b94:	d432      	bmi.n	8001bfc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b96:	07d2      	lsls	r2, r2, #31
 8001b98:	d438      	bmi.n	8001c0c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b9a:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <HAL_RCC_ClockConfig+0x138>)
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	429e      	cmp	r6, r3
 8001ba4:	d373      	bcc.n	8001c8e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba6:	682a      	ldr	r2, [r5, #0]
 8001ba8:	4c43      	ldr	r4, [pc, #268]	; (8001cb8 <HAL_RCC_ClockConfig+0x13c>)
 8001baa:	f012 0f04 	tst.w	r2, #4
 8001bae:	d179      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	0713      	lsls	r3, r2, #28
 8001bb2:	d506      	bpl.n	8001bc2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb4:	6863      	ldr	r3, [r4, #4]
 8001bb6:	692a      	ldr	r2, [r5, #16]
 8001bb8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001bbc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bc0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc2:	f7ff ff9f 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001bc6:	6863      	ldr	r3, [r4, #4]
 8001bc8:	4a3c      	ldr	r2, [pc, #240]	; (8001cbc <HAL_RCC_ClockConfig+0x140>)
 8001bca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	40d8      	lsrs	r0, r3
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_ClockConfig+0x144>)
 8001bd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff f932 	bl	8000e40 <HAL_InitTick>
  return HAL_OK;
 8001bdc:	2000      	movs	r0, #0
}
 8001bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	6813      	ldr	r3, [r2, #0]
 8001be4:	f023 0307 	bic.w	r3, r3, #7
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	4299      	cmp	r1, r3
 8001bf4:	d0cc      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	492e      	ldr	r1, [pc, #184]	; (8001cb8 <HAL_RCC_ClockConfig+0x13c>)
 8001bfe:	68a8      	ldr	r0, [r5, #8]
 8001c00:	684b      	ldr	r3, [r1, #4]
 8001c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c06:	4303      	orrs	r3, r0
 8001c08:	604b      	str	r3, [r1, #4]
 8001c0a:	e7c4      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0c:	686a      	ldr	r2, [r5, #4]
 8001c0e:	4c2a      	ldr	r4, [pc, #168]	; (8001cb8 <HAL_RCC_ClockConfig+0x13c>)
 8001c10:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c14:	d11c      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	d0ec      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001c2a:	f7ff f94b 	bl	8000ec4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001c30:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d114      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c36:	6863      	ldr	r3, [r4, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d0ac      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7ff f940 	bl	8000ec4 <HAL_GetTick>
 8001c44:	1bc0      	subs	r0, r0, r7
 8001c46:	4540      	cmp	r0, r8
 8001c48:	d9f5      	bls.n	8001c36 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c50:	2a02      	cmp	r2, #2
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c58:	e7df      	b.n	8001c1a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	f013 0f02 	tst.w	r3, #2
 8001c5e:	e7dc      	b.n	8001c1a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d10f      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c64:	6863      	ldr	r3, [r4, #4]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d095      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7ff f929 	bl	8000ec4 <HAL_GetTick>
 8001c72:	1bc0      	subs	r0, r0, r7
 8001c74:	4540      	cmp	r0, r8
 8001c76:	d9f5      	bls.n	8001c64 <HAL_RCC_ClockConfig+0xe8>
 8001c78:	e7e7      	b.n	8001c4a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7a:	f7ff f923 	bl	8000ec4 <HAL_GetTick>
 8001c7e:	1bc0      	subs	r0, r0, r7
 8001c80:	4540      	cmp	r0, r8
 8001c82:	d8e2      	bhi.n	8001c4a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c84:	6863      	ldr	r3, [r4, #4]
 8001c86:	f013 0f0c 	tst.w	r3, #12
 8001c8a:	d1f6      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xfe>
 8001c8c:	e785      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f023 0307 	bic.w	r3, r3, #7
 8001c94:	4333      	orrs	r3, r6
 8001c96:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	429e      	cmp	r6, r3
 8001ca0:	d1a9      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x7a>
 8001ca2:	e780      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	6863      	ldr	r3, [r4, #4]
 8001ca6:	68e9      	ldr	r1, [r5, #12]
 8001ca8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cac:	430b      	orrs	r3, r1
 8001cae:	6063      	str	r3, [r4, #4]
 8001cb0:	e77e      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x34>
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	0800334c 	.word	0x0800334c
 8001cc0:	20000040 	.word	0x20000040

08001cc4 <HAL_RCC_GetHCLKFreq>:
}
 8001cc4:	4b01      	ldr	r3, [pc, #4]	; (8001ccc <HAL_RCC_GetHCLKFreq+0x8>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000040 	.word	0x20000040

08001cd0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	4a03      	ldr	r2, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001cde:	6810      	ldr	r0, [r2, #0]
}    
 8001ce0:	40d8      	lsrs	r0, r3
 8001ce2:	4770      	bx	lr
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	0800335c 	.word	0x0800335c
 8001cec:	20000040 	.word	0x20000040

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001cfa:	5cd3      	ldrb	r3, [r2, r3]
 8001cfc:	4a03      	ldr	r2, [pc, #12]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001cfe:	6810      	ldr	r0, [r2, #0]
} 
 8001d00:	40d8      	lsrs	r0, r3
 8001d02:	4770      	bx	lr
 8001d04:	40021000 	.word	0x40021000
 8001d08:	0800335c 	.word	0x0800335c
 8001d0c:	20000040 	.word	0x20000040

08001d10 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d10:	6803      	ldr	r3, [r0, #0]
{
 8001d12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d16:	07d9      	lsls	r1, r3, #31
{
 8001d18:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d1a:	d520      	bpl.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1c:	4c35      	ldr	r4, [pc, #212]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d1e:	69e3      	ldr	r3, [r4, #28]
 8001d20:	00da      	lsls	r2, r3, #3
 8001d22:	d432      	bmi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001d24:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	69e3      	ldr	r3, [r4, #28]
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61e3      	str	r3, [r4, #28]
 8001d2e:	69e3      	ldr	r3, [r4, #28]
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4e2f      	ldr	r6, [pc, #188]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001d3a:	6833      	ldr	r3, [r6, #0]
 8001d3c:	05db      	lsls	r3, r3, #23
 8001d3e:	d526      	bpl.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d40:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d42:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d46:	d136      	bne.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001d48:	6a23      	ldr	r3, [r4, #32]
 8001d4a:	686a      	ldr	r2, [r5, #4]
 8001d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d50:	4313      	orrs	r3, r2
 8001d52:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d54:	b11f      	cbz	r7, 8001d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	69e3      	ldr	r3, [r4, #28]
 8001d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d5e:	6828      	ldr	r0, [r5, #0]
 8001d60:	0783      	lsls	r3, r0, #30
 8001d62:	d506      	bpl.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d66:	68a9      	ldr	r1, [r5, #8]
 8001d68:	6853      	ldr	r3, [r2, #4]
 8001d6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d72:	f010 0010 	ands.w	r0, r0, #16
 8001d76:	d01b      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d7a:	68e9      	ldr	r1, [r5, #12]
 8001d7c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d7e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6053      	str	r3, [r2, #4]
 8001d88:	e012      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2700      	movs	r7, #0
 8001d8c:	e7d4      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	6833      	ldr	r3, [r6, #0]
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d96:	f7ff f895 	bl	8000ec4 <HAL_GetTick>
 8001d9a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	6833      	ldr	r3, [r6, #0]
 8001d9e:	05d8      	lsls	r0, r3, #23
 8001da0:	d4ce      	bmi.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff f88f 	bl	8000ec4 <HAL_GetTick>
 8001da6:	eba0 0008 	sub.w	r0, r0, r8
 8001daa:	2864      	cmp	r0, #100	; 0x64
 8001dac:	d9f6      	bls.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001dae:	2003      	movs	r0, #3
}
 8001db0:	b002      	add	sp, #8
 8001db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001db6:	686a      	ldr	r2, [r5, #4]
 8001db8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d0c3      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dc4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dce:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001dd0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dd2:	07d9      	lsls	r1, r3, #31
 8001dd4:	d5b8      	bpl.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f875 	bl	8000ec4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001dde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	6a23      	ldr	r3, [r4, #32]
 8001de2:	079a      	lsls	r2, r3, #30
 8001de4:	d4b0      	bmi.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff f86d 	bl	8000ec4 <HAL_GetTick>
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	4540      	cmp	r0, r8
 8001dee:	d9f7      	bls.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001df0:	e7dd      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	42420440 	.word	0x42420440

08001e00 <HAL_SPI_ErrorCallback>:
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001e04:	6803      	ldr	r3, [r0, #0]
{
 8001e06:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8001e08:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001e0a:	689a      	ldr	r2, [r3, #8]
{
 8001e0c:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001e0e:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8001e12:	2d01      	cmp	r5, #1
{
 8001e14:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001e16:	d105      	bne.n	8001e24 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001e18:	064d      	lsls	r5, r1, #25
 8001e1a:	d503      	bpl.n	8001e24 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 8001e1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 8001e1e:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8001e20:	b005      	add	sp, #20
 8001e22:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001e24:	0790      	lsls	r0, r2, #30
 8001e26:	d504      	bpl.n	8001e32 <HAL_SPI_IRQHandler+0x2e>
 8001e28:	060d      	lsls	r5, r1, #24
 8001e2a:	d502      	bpl.n	8001e32 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001e2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e2e:	4620      	mov	r0, r4
 8001e30:	e7f5      	b.n	8001e1e <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001e32:	f012 0f60 	tst.w	r2, #96	; 0x60
 8001e36:	d0f3      	beq.n	8001e20 <HAL_SPI_IRQHandler+0x1c>
 8001e38:	0688      	lsls	r0, r1, #26
 8001e3a:	d5f1      	bpl.n	8001e20 <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8001e3c:	0655      	lsls	r5, r2, #25
 8001e3e:	d50e      	bpl.n	8001e5e <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001e40:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001e44:	2500      	movs	r5, #0
 8001e46:	2803      	cmp	r0, #3
 8001e48:	d036      	beq.n	8001eb8 <HAL_SPI_IRQHandler+0xb4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e4c:	f040 0004 	orr.w	r0, r0, #4
 8001e50:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e52:	9501      	str	r5, [sp, #4]
 8001e54:	68d8      	ldr	r0, [r3, #12]
 8001e56:	9001      	str	r0, [sp, #4]
 8001e58:	6898      	ldr	r0, [r3, #8]
 8001e5a:	9001      	str	r0, [sp, #4]
 8001e5c:	9801      	ldr	r0, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8001e5e:	0690      	lsls	r0, r2, #26
 8001e60:	d50c      	bpl.n	8001e7c <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e62:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	9203      	str	r2, [sp, #12]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	9203      	str	r2, [sp, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e7c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	d0ce      	beq.n	8001e20 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e88:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001e90:	078a      	lsls	r2, r1, #30
 8001e92:	d018      	beq.n	8001ec6 <HAL_SPI_IRQHandler+0xc2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e94:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8001e96:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e98:	f022 0203 	bic.w	r2, r2, #3
 8001e9c:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8001e9e:	b118      	cbz	r0, 8001ea8 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_SPI_IRQHandler+0xcc>)
 8001ea2:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001ea4:	f7ff faee 	bl	8001484 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8001ea8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	d0b8      	beq.n	8001e20 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_SPI_IRQHandler+0xcc>)
 8001eb0:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001eb2:	f7ff fae7 	bl	8001484 <HAL_DMA_Abort_IT>
 8001eb6:	e7b3      	b.n	8001e20 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eb8:	9502      	str	r5, [sp, #8]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	9202      	str	r2, [sp, #8]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	9b02      	ldr	r3, [sp, #8]
        return;
 8001ec4:	e7ac      	b.n	8001e20 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7ff ff9a 	bl	8001e00 <HAL_SPI_ErrorCallback>
 8001ecc:	e7a8      	b.n	8001e20 <HAL_SPI_IRQHandler+0x1c>
 8001ece:	bf00      	nop
 8001ed0:	08001ed5 	.word	0x08001ed5

08001ed4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hspi->RxXferCount = 0U;
 8001ed6:	2300      	movs	r3, #0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ed8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8001eda:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001edc:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8001ede:	f7ff ff8f 	bl	8001e00 <HAL_SPI_ErrorCallback>
 8001ee2:	bd08      	pop	{r3, pc}

08001ee4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d034      	beq.n	8001f56 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001ef0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001ef4:	b90b      	cbnz	r3, 8001efa <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ef6:	f001 f863 	bl	8002fc0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001efa:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001efc:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001efe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001f02:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f04:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f0a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	69a2      	ldr	r2, [r4, #24]
 8001f10:	4303      	orrs	r3, r0
 8001f12:	68e0      	ldr	r0, [r4, #12]
 8001f14:	4303      	orrs	r3, r0
 8001f16:	6920      	ldr	r0, [r4, #16]
 8001f18:	4303      	orrs	r3, r0
 8001f1a:	6960      	ldr	r0, [r4, #20]
 8001f1c:	4303      	orrs	r3, r0
 8001f1e:	69e0      	ldr	r0, [r4, #28]
 8001f20:	4303      	orrs	r3, r0
 8001f22:	6a20      	ldr	r0, [r4, #32]
 8001f24:	4303      	orrs	r3, r0
 8001f26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f32:	0c12      	lsrs	r2, r2, #16
 8001f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f36:	f002 0204 	and.w	r2, r2, #4
 8001f3a:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f3e:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f40:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f42:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f44:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f4a:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001f4c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f4e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001f50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001f54:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f56:	2001      	movs	r0, #1
}
 8001f58:	bd10      	pop	{r4, pc}

08001f5a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f5a:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001f5c:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f74:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	f04f 0302 	mov.w	r3, #2
 8001f7c:	d01c      	beq.n	8001fb8 <HAL_TIM_ConfigClockSource+0x48>
 8001f7e:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f84:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001f86:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001f8a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f8c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f90:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f96:	680a      	ldr	r2, [r1, #0]
 8001f98:	2a40      	cmp	r2, #64	; 0x40
 8001f9a:	d079      	beq.n	8002090 <HAL_TIM_ConfigClockSource+0x120>
 8001f9c:	d819      	bhi.n	8001fd2 <HAL_TIM_ConfigClockSource+0x62>
 8001f9e:	2a10      	cmp	r2, #16
 8001fa0:	f000 8093 	beq.w	80020ca <HAL_TIM_ConfigClockSource+0x15a>
 8001fa4:	d80a      	bhi.n	8001fbc <HAL_TIM_ConfigClockSource+0x4c>
 8001fa6:	2a00      	cmp	r2, #0
 8001fa8:	f000 8089 	beq.w	80020be <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001fb8:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001fbc:	2a20      	cmp	r2, #32
 8001fbe:	f000 808a 	beq.w	80020d6 <HAL_TIM_ConfigClockSource+0x166>
 8001fc2:	2a30      	cmp	r2, #48	; 0x30
 8001fc4:	d1f2      	bne.n	8001fac <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001fc6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001fcc:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001fd0:	e036      	b.n	8002040 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001fd2:	2a70      	cmp	r2, #112	; 0x70
 8001fd4:	d036      	beq.n	8002044 <HAL_TIM_ConfigClockSource+0xd4>
 8001fd6:	d81b      	bhi.n	8002010 <HAL_TIM_ConfigClockSource+0xa0>
 8001fd8:	2a50      	cmp	r2, #80	; 0x50
 8001fda:	d042      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0xf2>
 8001fdc:	2a60      	cmp	r2, #96	; 0x60
 8001fde:	d1e5      	bne.n	8001fac <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fe0:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fe2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fe4:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fe8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fea:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fec:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001fee:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ff0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ff4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ff8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ffc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002000:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002002:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002004:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002006:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800200a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800200e:	e017      	b.n	8002040 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002010:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002014:	d011      	beq.n	800203a <HAL_TIM_ConfigClockSource+0xca>
 8002016:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800201a:	d1c7      	bne.n	8001fac <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800201c:	688a      	ldr	r2, [r1, #8]
 800201e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002020:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002022:	68c9      	ldr	r1, [r1, #12]
 8002024:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002026:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800202a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800202e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002030:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002038:	e002      	b.n	8002040 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	e7b3      	b.n	8001fac <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002044:	688a      	ldr	r2, [r1, #8]
 8002046:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002048:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800204a:	68c9      	ldr	r1, [r1, #12]
 800204c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800204e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002052:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002056:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002058:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800205a:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800205c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002060:	e7ee      	b.n	8002040 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002062:	684c      	ldr	r4, [r1, #4]
 8002064:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002066:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002068:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800206a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800206e:	f025 0501 	bic.w	r5, r5, #1
 8002072:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002074:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002076:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002078:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800207c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002080:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002082:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002084:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002086:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800208a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800208e:	e7d7      	b.n	8002040 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002090:	684c      	ldr	r4, [r1, #4]
 8002092:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002094:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002096:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002098:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800209c:	f025 0501 	bic.w	r5, r5, #1
 80020a0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80020a4:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020aa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80020ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020b0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80020b2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020b8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80020bc:	e7c0      	b.n	8002040 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80020be:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020c4:	f042 0207 	orr.w	r2, r2, #7
 80020c8:	e7ba      	b.n	8002040 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80020ca:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020d0:	f042 0217 	orr.w	r2, r2, #23
 80020d4:	e7b4      	b.n	8002040 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80020d6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020dc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80020e0:	e7ae      	b.n	8002040 <HAL_TIM_ConfigClockSource+0xd0>
	...

080020e4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e4:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80020e6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e8:	4290      	cmp	r0, r2
 80020ea:	d00a      	beq.n	8002102 <TIM_Base_SetConfig+0x1e>
 80020ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020f0:	d007      	beq.n	8002102 <TIM_Base_SetConfig+0x1e>
 80020f2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020f6:	4290      	cmp	r0, r2
 80020f8:	d003      	beq.n	8002102 <TIM_Base_SetConfig+0x1e>
 80020fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020fe:	4290      	cmp	r0, r2
 8002100:	d115      	bne.n	800212e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002102:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002108:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210a:	4a11      	ldr	r2, [pc, #68]	; (8002150 <TIM_Base_SetConfig+0x6c>)
 800210c:	4290      	cmp	r0, r2
 800210e:	d00a      	beq.n	8002126 <TIM_Base_SetConfig+0x42>
 8002110:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002114:	d007      	beq.n	8002126 <TIM_Base_SetConfig+0x42>
 8002116:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800211a:	4290      	cmp	r0, r2
 800211c:	d003      	beq.n	8002126 <TIM_Base_SetConfig+0x42>
 800211e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002122:	4290      	cmp	r0, r2
 8002124:	d103      	bne.n	800212e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002126:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800212c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800212e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002134:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002136:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002138:	688b      	ldr	r3, [r1, #8]
 800213a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800213c:	680b      	ldr	r3, [r1, #0]
 800213e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <TIM_Base_SetConfig+0x6c>)
 8002142:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002144:	bf04      	itt	eq
 8002146:	690b      	ldreq	r3, [r1, #16]
 8002148:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800214a:	2301      	movs	r3, #1
 800214c:	6143      	str	r3, [r0, #20]
 800214e:	4770      	bx	lr
 8002150:	40012c00 	.word	0x40012c00

08002154 <HAL_TIM_Base_Init>:
{
 8002154:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002156:	4604      	mov	r4, r0
 8002158:	b1a0      	cbz	r0, 8002184 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800215a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800215e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002162:	b91b      	cbnz	r3, 800216c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002164:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002168:	f000 ff92 	bl	8003090 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800216c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800216e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002170:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002174:	1d21      	adds	r1, r4, #4
 8002176:	f7ff ffb5 	bl	80020e4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800217a:	2301      	movs	r3, #1
  return HAL_OK;
 800217c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800217e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002182:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002184:	2001      	movs	r0, #1
}
 8002186:	bd10      	pop	{r4, pc}

08002188 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002188:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800218c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800218e:	2b01      	cmp	r3, #1
 8002190:	f04f 0302 	mov.w	r3, #2
 8002194:	d018      	beq.n	80021c8 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002196:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800219a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800219c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800219e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80021a0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021a6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4322      	orrs	r2, r4
 80021ac:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80021bc:	2301      	movs	r3, #1
 80021be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021c2:	2300      	movs	r3, #0
 80021c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80021c8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80021ca:	bd10      	pop	{r4, pc}

080021cc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021cc:	6803      	ldr	r3, [r0, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021de:	2320      	movs	r3, #32
 80021e0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80021e4:	4770      	bx	lr
	...

080021e8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ec:	6805      	ldr	r5, [r0, #0]
 80021ee:	68c2      	ldr	r2, [r0, #12]
 80021f0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021f2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021f8:	4313      	orrs	r3, r2
 80021fa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021fc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80021fe:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002200:	430b      	orrs	r3, r1
 8002202:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002204:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002208:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800220c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800220e:	4313      	orrs	r3, r2
 8002210:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002212:	696b      	ldr	r3, [r5, #20]
 8002214:	6982      	ldr	r2, [r0, #24]
 8002216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221a:	4313      	orrs	r3, r2
 800221c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800221e:	4b40      	ldr	r3, [pc, #256]	; (8002320 <UART_SetConfig+0x138>)
{
 8002220:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002222:	429d      	cmp	r5, r3
 8002224:	f04f 0419 	mov.w	r4, #25
 8002228:	d146      	bne.n	80022b8 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800222a:	f7ff fd61 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 800222e:	fb04 f300 	mul.w	r3, r4, r0
 8002232:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002236:	f04f 0864 	mov.w	r8, #100	; 0x64
 800223a:	00b6      	lsls	r6, r6, #2
 800223c:	fbb3 f3f6 	udiv	r3, r3, r6
 8002240:	fbb3 f3f8 	udiv	r3, r3, r8
 8002244:	011e      	lsls	r6, r3, #4
 8002246:	f7ff fd53 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 800224a:	4360      	muls	r0, r4
 800224c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	fbb0 f7f3 	udiv	r7, r0, r3
 8002256:	f7ff fd4b 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 800225a:	4360      	muls	r0, r4
 800225c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	fbb0 f3f3 	udiv	r3, r0, r3
 8002266:	fbb3 f3f8 	udiv	r3, r3, r8
 800226a:	fb08 7313 	mls	r3, r8, r3, r7
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	3332      	adds	r3, #50	; 0x32
 8002272:	fbb3 f3f8 	udiv	r3, r3, r8
 8002276:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800227a:	f7ff fd39 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 800227e:	4360      	muls	r0, r4
 8002280:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	fbb0 faf2 	udiv	sl, r0, r2
 800228a:	f7ff fd31 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800228e:	4360      	muls	r0, r4
 8002290:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fbb0 f3f3 	udiv	r3, r0, r3
 800229a:	fbb3 f3f8 	udiv	r3, r3, r8
 800229e:	fb08 a313 	mls	r3, r8, r3, sl
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	3332      	adds	r3, #50	; 0x32
 80022a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	433b      	orrs	r3, r7
 80022b0:	4433      	add	r3, r6
 80022b2:	60ab      	str	r3, [r5, #8]
 80022b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b8:	f7ff fd0a 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 80022bc:	fb04 f300 	mul.w	r3, r4, r0
 80022c0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80022c4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80022c8:	00b6      	lsls	r6, r6, #2
 80022ca:	fbb3 f3f6 	udiv	r3, r3, r6
 80022ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80022d2:	011e      	lsls	r6, r3, #4
 80022d4:	f7ff fcfc 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 80022d8:	4360      	muls	r0, r4
 80022da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fbb0 f7f3 	udiv	r7, r0, r3
 80022e4:	f7ff fcf4 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 80022e8:	4360      	muls	r0, r4
 80022ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80022f8:	fb08 7313 	mls	r3, r8, r3, r7
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	3332      	adds	r3, #50	; 0x32
 8002300:	fbb3 f3f8 	udiv	r3, r3, r8
 8002304:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002308:	f7ff fce2 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 800230c:	4360      	muls	r0, r4
 800230e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	fbb0 faf2 	udiv	sl, r0, r2
 8002318:	f7ff fcda 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 800231c:	e7b7      	b.n	800228e <UART_SetConfig+0xa6>
 800231e:	bf00      	nop
 8002320:	40013800 	.word	0x40013800

08002324 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	4604      	mov	r4, r0
 8002328:	460e      	mov	r6, r1
 800232a:	4617      	mov	r7, r2
 800232c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800232e:	6821      	ldr	r1, [r4, #0]
 8002330:	680b      	ldr	r3, [r1, #0]
 8002332:	ea36 0303 	bics.w	r3, r6, r3
 8002336:	d101      	bne.n	800233c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002338:	2000      	movs	r0, #0
}
 800233a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800233c:	1c6b      	adds	r3, r5, #1
 800233e:	d0f7      	beq.n	8002330 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002340:	b995      	cbnz	r5, 8002368 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002342:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002344:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800234c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002356:	2320      	movs	r3, #32
 8002358:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800235c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002360:	2300      	movs	r3, #0
 8002362:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002368:	f7fe fdac 	bl	8000ec4 <HAL_GetTick>
 800236c:	1bc0      	subs	r0, r0, r7
 800236e:	4285      	cmp	r5, r0
 8002370:	d2dd      	bcs.n	800232e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002372:	e7e6      	b.n	8002342 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002374 <HAL_UART_Init>:
{
 8002374:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002376:	4604      	mov	r4, r0
 8002378:	b340      	cbz	r0, 80023cc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800237a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800237e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002382:	b91b      	cbnz	r3, 800238c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002384:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002388:	f000 fe96 	bl	80030b8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800238c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800238e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002390:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002394:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002396:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800239c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800239e:	f7ff ff23 	bl	80021e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023b4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023bc:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80023be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80023c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80023c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80023ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023cc:	2001      	movs	r0, #1
}
 80023ce:	bd10      	pop	{r4, pc}

080023d0 <HAL_UART_Transmit>:
{
 80023d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023d4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80023d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80023da:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80023dc:	2b20      	cmp	r3, #32
{
 80023de:	460d      	mov	r5, r1
 80023e0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80023e2:	d14e      	bne.n	8002482 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80023e4:	2900      	cmp	r1, #0
 80023e6:	d049      	beq.n	800247c <HAL_UART_Transmit+0xac>
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	d047      	beq.n	800247c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80023ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d046      	beq.n	8002482 <HAL_UART_Transmit+0xb2>
 80023f4:	2301      	movs	r3, #1
 80023f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023fe:	2321      	movs	r3, #33	; 0x21
 8002400:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002404:	f7fe fd5e 	bl	8000ec4 <HAL_GetTick>
 8002408:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800240a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800240e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002412:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002414:	b29b      	uxth	r3, r3
 8002416:	b96b      	cbnz	r3, 8002434 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002418:	463b      	mov	r3, r7
 800241a:	4632      	mov	r2, r6
 800241c:	2140      	movs	r1, #64	; 0x40
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff ff80 	bl	8002324 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002424:	b9a8      	cbnz	r0, 8002452 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002426:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002428:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800242c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002434:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002436:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002438:	3b01      	subs	r3, #1
 800243a:	b29b      	uxth	r3, r3
 800243c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800243e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002440:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	4620      	mov	r0, r4
 8002448:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800244a:	d10e      	bne.n	800246a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800244c:	f7ff ff6a 	bl	8002324 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002450:	b110      	cbz	r0, 8002458 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002452:	2003      	movs	r0, #3
 8002454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002458:	882b      	ldrh	r3, [r5, #0]
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002460:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002462:	6923      	ldr	r3, [r4, #16]
 8002464:	b943      	cbnz	r3, 8002478 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8002466:	3502      	adds	r5, #2
 8002468:	e7d3      	b.n	8002412 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800246a:	f7ff ff5b 	bl	8002324 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800246e:	2800      	cmp	r0, #0
 8002470:	d1ef      	bne.n	8002452 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	782a      	ldrb	r2, [r5, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	3501      	adds	r5, #1
 800247a:	e7ca      	b.n	8002412 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800247c:	2001      	movs	r0, #1
 800247e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002482:	2002      	movs	r0, #2
}
 8002484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002488 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002488:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800248c:	2b20      	cmp	r3, #32
 800248e:	d120      	bne.n	80024d2 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8002490:	b1e9      	cbz	r1, 80024ce <HAL_UART_Receive_IT+0x46>
 8002492:	b1e2      	cbz	r2, 80024ce <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8002494:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002498:	2b01      	cmp	r3, #1
 800249a:	d01a      	beq.n	80024d2 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 800249c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800249e:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024a2:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024a6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024aa:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80024ac:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024ae:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80024b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024b4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80024b8:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024ba:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80024bc:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024be:	f041 0101 	orr.w	r1, r1, #1
 80024c2:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024c4:	68d1      	ldr	r1, [r2, #12]
 80024c6:	f041 0120 	orr.w	r1, r1, #32
 80024ca:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80024cc:	4770      	bx	lr
      return HAL_ERROR;
 80024ce:	2001      	movs	r0, #1
 80024d0:	4770      	bx	lr
    return HAL_BUSY;
 80024d2:	2002      	movs	r0, #2
}
 80024d4:	4770      	bx	lr

080024d6 <HAL_UART_TxCpltCallback>:
 80024d6:	4770      	bx	lr

080024d8 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80024d8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80024dc:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80024de:	2b22      	cmp	r3, #34	; 0x22
 80024e0:	d136      	bne.n	8002550 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024e2:	6883      	ldr	r3, [r0, #8]
 80024e4:	6901      	ldr	r1, [r0, #16]
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	6802      	ldr	r2, [r0, #0]
 80024ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024ee:	d123      	bne.n	8002538 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024f0:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80024f2:	b9e9      	cbnz	r1, 8002530 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024f8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80024fc:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80024fe:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002500:	3c01      	subs	r4, #1
 8002502:	b2a4      	uxth	r4, r4
 8002504:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002506:	b98c      	cbnz	r4, 800252c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002508:	6803      	ldr	r3, [r0, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	f022 0220 	bic.w	r2, r2, #32
 8002510:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002518:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002522:	2320      	movs	r3, #32
 8002524:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002528:	f000 f8be 	bl	80026a8 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800252c:	2000      	movs	r0, #0
}
 800252e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f823 2b01 	strh.w	r2, [r3], #1
 8002536:	e7e1      	b.n	80024fc <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002538:	b921      	cbnz	r1, 8002544 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800253a:	1c59      	adds	r1, r3, #1
 800253c:	6852      	ldr	r2, [r2, #4]
 800253e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e7dc      	b.n	80024fe <UART_Receive_IT+0x26>
 8002544:	6852      	ldr	r2, [r2, #4]
 8002546:	1c59      	adds	r1, r3, #1
 8002548:	6281      	str	r1, [r0, #40]	; 0x28
 800254a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800254e:	e7f7      	b.n	8002540 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002550:	2002      	movs	r0, #2
 8002552:	bd10      	pop	{r4, pc}

08002554 <HAL_UART_ErrorCallback>:
 8002554:	4770      	bx	lr
	...

08002558 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002558:	6803      	ldr	r3, [r0, #0]
{
 800255a:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800255c:	681a      	ldr	r2, [r3, #0]
{
 800255e:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002560:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002562:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002564:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002566:	d107      	bne.n	8002578 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002568:	0696      	lsls	r6, r2, #26
 800256a:	d55a      	bpl.n	8002622 <HAL_UART_IRQHandler+0xca>
 800256c:	068d      	lsls	r5, r1, #26
 800256e:	d558      	bpl.n	8002622 <HAL_UART_IRQHandler+0xca>
}
 8002570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002574:	f7ff bfb0 	b.w	80024d8 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002578:	f015 0501 	ands.w	r5, r5, #1
 800257c:	d102      	bne.n	8002584 <HAL_UART_IRQHandler+0x2c>
 800257e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002582:	d04e      	beq.n	8002622 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002584:	07d3      	lsls	r3, r2, #31
 8002586:	d505      	bpl.n	8002594 <HAL_UART_IRQHandler+0x3c>
 8002588:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800258a:	bf42      	ittt	mi
 800258c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800258e:	f043 0301 	orrmi.w	r3, r3, #1
 8002592:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002594:	0750      	lsls	r0, r2, #29
 8002596:	d504      	bpl.n	80025a2 <HAL_UART_IRQHandler+0x4a>
 8002598:	b11d      	cbz	r5, 80025a2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800259a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a2:	0793      	lsls	r3, r2, #30
 80025a4:	d504      	bpl.n	80025b0 <HAL_UART_IRQHandler+0x58>
 80025a6:	b11d      	cbz	r5, 80025b0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025b0:	0716      	lsls	r6, r2, #28
 80025b2:	d504      	bpl.n	80025be <HAL_UART_IRQHandler+0x66>
 80025b4:	b11d      	cbz	r5, 80025be <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d066      	beq.n	8002692 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c4:	0695      	lsls	r5, r2, #26
 80025c6:	d504      	bpl.n	80025d2 <HAL_UART_IRQHandler+0x7a>
 80025c8:	0688      	lsls	r0, r1, #26
 80025ca:	d502      	bpl.n	80025d2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff ff83 	bl	80024d8 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025d2:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80025d4:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025d6:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80025da:	0711      	lsls	r1, r2, #28
 80025dc:	d402      	bmi.n	80025e4 <HAL_UART_IRQHandler+0x8c>
 80025de:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80025e2:	d01a      	beq.n	800261a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80025e4:	f7ff fdf2 	bl	80021cc <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	0652      	lsls	r2, r2, #25
 80025ee:	d510      	bpl.n	8002612 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f0:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80025f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f8:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80025fa:	b150      	cbz	r0, 8002612 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_UART_IRQHandler+0x13c>)
 80025fe:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002600:	f7fe ff40 	bl	8001484 <HAL_DMA_Abort_IT>
 8002604:	2800      	cmp	r0, #0
 8002606:	d044      	beq.n	8002692 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002608:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800260a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800260e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002610:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff ff9e 	bl	8002554 <HAL_UART_ErrorCallback>
 8002618:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800261a:	f7ff ff9b 	bl	8002554 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002620:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002622:	0616      	lsls	r6, r2, #24
 8002624:	d527      	bpl.n	8002676 <HAL_UART_IRQHandler+0x11e>
 8002626:	060d      	lsls	r5, r1, #24
 8002628:	d525      	bpl.n	8002676 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800262a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800262e:	2a21      	cmp	r2, #33	; 0x21
 8002630:	d12f      	bne.n	8002692 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002632:	68a2      	ldr	r2, [r4, #8]
 8002634:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002638:	6a22      	ldr	r2, [r4, #32]
 800263a:	d117      	bne.n	800266c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800263c:	8811      	ldrh	r1, [r2, #0]
 800263e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002642:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002644:	6921      	ldr	r1, [r4, #16]
 8002646:	b979      	cbnz	r1, 8002668 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002648:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800264a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 800264c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800264e:	3a01      	subs	r2, #1
 8002650:	b292      	uxth	r2, r2
 8002652:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002654:	b9ea      	cbnz	r2, 8002692 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800265c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002668:	3201      	adds	r2, #1
 800266a:	e7ee      	b.n	800264a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800266c:	1c51      	adds	r1, r2, #1
 800266e:	6221      	str	r1, [r4, #32]
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	e7ea      	b.n	800264c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002676:	0650      	lsls	r0, r2, #25
 8002678:	d50b      	bpl.n	8002692 <HAL_UART_IRQHandler+0x13a>
 800267a:	064a      	lsls	r2, r1, #25
 800267c:	d509      	bpl.n	8002692 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800267e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002680:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002686:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002688:	2320      	movs	r3, #32
 800268a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800268e:	f7ff ff22 	bl	80024d6 <HAL_UART_TxCpltCallback>
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	08002699 	.word	0x08002699

08002698 <UART_DMAAbortOnError>:
{
 8002698:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800269a:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800269c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800269e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026a0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80026a2:	f7ff ff57 	bl	8002554 <HAL_UART_ErrorCallback>
 80026a6:	bd08      	pop	{r3, pc}

080026a8 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance==USART3){
 80026a8:	6802      	ldr	r2, [r0, #0]
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_UART_RxCpltCallback+0x30>)
{
 80026ac:	b510      	push	{r4, lr}
	if (huart->Instance==USART3){
 80026ae:	429a      	cmp	r2, r3
{
 80026b0:	4604      	mov	r4, r0
	if (huart->Instance==USART3){
 80026b2:	d104      	bne.n	80026be <HAL_UART_RxCpltCallback+0x16>
		if(RPi_UART.rx_buff[0]=='H' && RPi_UART.rx_buff[1]=='e' && RPi_UART.rx_buff[2]=='l'){
			//HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
		}
		HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,3);
 80026b4:	2203      	movs	r2, #3
 80026b6:	4909      	ldr	r1, [pc, #36]	; (80026dc <HAL_UART_RxCpltCallback+0x34>)
 80026b8:	4809      	ldr	r0, [pc, #36]	; (80026e0 <HAL_UART_RxCpltCallback+0x38>)
 80026ba:	f7ff fee5 	bl	8002488 <HAL_UART_Receive_IT>
	}
	if (huart->Instance==USART1){
 80026be:	6822      	ldr	r2, [r4, #0]
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_UART_RxCpltCallback+0x3c>)
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d106      	bne.n	80026d4 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_IT(&huart1,sim_rx,4);
	}
}
 80026c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart1,sim_rx,4);
 80026ca:	2204      	movs	r2, #4
 80026cc:	4906      	ldr	r1, [pc, #24]	; (80026e8 <HAL_UART_RxCpltCallback+0x40>)
 80026ce:	4807      	ldr	r0, [pc, #28]	; (80026ec <HAL_UART_RxCpltCallback+0x44>)
 80026d0:	f7ff beda 	b.w	8002488 <HAL_UART_Receive_IT>
 80026d4:	bd10      	pop	{r4, pc}
 80026d6:	bf00      	nop
 80026d8:	40004800 	.word	0x40004800
 80026dc:	20000217 	.word	0x20000217
 80026e0:	20000134 	.word	0x20000134
 80026e4:	40013800 	.word	0x40013800
 80026e8:	20000320 	.word	0x20000320
 80026ec:	20000258 	.word	0x20000258

080026f0 <HAL_SYSTICK_Callback>:
void HAL_SYSTICK_Callback(void){

	  if(HAL_GetTick()%1000==0){
 80026f0:	f7fe bbe8 	b.w	8000ec4 <HAL_GetTick>
 80026f4:	0000      	movs	r0, r0
	...

080026f8 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80026f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026fc:	b08a      	sub	sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026fe:	f7fe fbc3 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002702:	f000 f9f7 	bl	8002af4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	4b8d      	ldr	r3, [pc, #564]	; (800293c <main+0x244>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270e:	f042 0210 	orr.w	r2, r2, #16
 8002712:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002714:	2440      	movs	r4, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002718:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271a:	f002 0210 	and.w	r2, r2, #16
 800271e:	9200      	str	r2, [sp, #0]
 8002720:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002724:	4886      	ldr	r0, [pc, #536]	; (8002940 <main+0x248>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	f042 0204 	orr.w	r2, r2, #4
 800272a:	619a      	str	r2, [r3, #24]
 800272c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OT_TXI_Pin */
  GPIO_InitStruct.Pin = OT_TXI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272e:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	f002 0204 	and.w	r2, r2, #4
 8002734:	9201      	str	r2, [sp, #4]
 8002736:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	619a      	str	r2, [r3, #24]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	f002 0208 	and.w	r2, r2, #8
 8002746:	9202      	str	r2, [sp, #8]
 8002748:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	f042 0220 	orr.w	r2, r2, #32
 8002750:	619a      	str	r2, [r3, #24]
 8002752:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002754:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	9303      	str	r3, [sp, #12]
 800275c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800275e:	f7fe ffbf 	bl	80016e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OT_RXO_GPIO_Port, OT_RXO_Pin, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002768:	4876      	ldr	r0, [pc, #472]	; (8002944 <main+0x24c>)
 800276a:	f7fe ffb9 	bl	80016e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	2104      	movs	r1, #4
 8002772:	4875      	ldr	r0, [pc, #468]	; (8002948 <main+0x250>)
 8002774:	f7fe ffb4 	bl	80016e0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002778:	a906      	add	r1, sp, #24
 800277a:	4871      	ldr	r0, [pc, #452]	; (8002940 <main+0x248>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = LED_R_Pin;
 800277e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002780:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002782:	f7fe fec7 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OT_TXI_Pin;
 8002786:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OT_TXI_GPIO_Port, &GPIO_InitStruct);
 800278a:	a906      	add	r1, sp, #24
 800278c:	486d      	ldr	r0, [pc, #436]	; (8002944 <main+0x24c>)
  GPIO_InitStruct.Pin = OT_TXI_Pin;
 800278e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(OT_TXI_GPIO_Port, &GPIO_InitStruct);
 8002794:	f7fe febe 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : OT_RXO_Pin */
  GPIO_InitStruct.Pin = OT_RXO_Pin;
 8002798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OT_RXO_GPIO_Port, &GPIO_InitStruct);
 800279c:	a906      	add	r1, sp, #24
 800279e:	4869      	ldr	r0, [pc, #420]	; (8002944 <main+0x24c>)
  GPIO_InitStruct.Pin = OT_RXO_Pin;
 80027a0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a4:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(OT_RXO_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f7fe feb5 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS1_Pin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 80027aa:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 80027ac:	4866      	ldr	r0, [pc, #408]	; (8002948 <main+0x250>)
 80027ae:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = NSS1_Pin;
 80027b0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b4:	9707      	str	r7, [sp, #28]
  hadc1.Instance = ADC1;
 80027b6:	4d65      	ldr	r5, [pc, #404]	; (800294c <main+0x254>)
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f7fe feac 	bl	8001514 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <main+0x258>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027be:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80027c0:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027c2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027c6:	60ae      	str	r6, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027c8:	60ee      	str	r6, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027ca:	616e      	str	r6, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027cc:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027ce:	606e      	str	r6, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 80027d0:	612f      	str	r7, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027d2:	f7fe fcd3 	bl	800117c <HAL_ADC_Init>
 80027d6:	b100      	cbz	r0, 80027da <main+0xe2>
 80027d8:	e7fe      	b.n	80027d8 <main+0xe0>
  sConfig.Channel = ADC_CHANNEL_0;
 80027da:	9006      	str	r0, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027dc:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027de:	a906      	add	r1, sp, #24
 80027e0:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027e2:	9707      	str	r7, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e4:	f7fe fb8a 	bl	8000efc <HAL_ADC_ConfigChannel>
 80027e8:	b100      	cbz	r0, 80027ec <main+0xf4>
 80027ea:	e7fe      	b.n	80027ea <main+0xf2>
  hcan.Init.Prescaler = 16;
 80027ec:	2710      	movs	r7, #16
  hcan.Instance = CAN1;
 80027ee:	4b59      	ldr	r3, [pc, #356]	; (8002954 <main+0x25c>)
  hcan.Init.Prescaler = 16;
 80027f0:	4a59      	ldr	r2, [pc, #356]	; (8002958 <main+0x260>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80027f2:	6098      	str	r0, [r3, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 80027f4:	60d8      	str	r0, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_1TQ;
 80027f6:	6118      	str	r0, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_1TQ;
 80027f8:	6158      	str	r0, [r3, #20]
  hcan.Init.TTCM = DISABLE;
 80027fa:	6198      	str	r0, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 80027fc:	61d8      	str	r0, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 80027fe:	6218      	str	r0, [r3, #32]
  hcan.Init.NART = DISABLE;
 8002800:	6258      	str	r0, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8002802:	6298      	str	r0, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8002804:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002806:	4618      	mov	r0, r3
  hcan.Init.Prescaler = 16;
 8002808:	e883 0084 	stmia.w	r3, {r2, r7}
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800280c:	f7fe fd36 	bl	800127c <HAL_CAN_Init>
 8002810:	b100      	cbz	r0, 8002814 <main+0x11c>
 8002812:	e7fe      	b.n	8002812 <main+0x11a>
  hi2c1.Instance = I2C1;
 8002814:	4b51      	ldr	r3, [pc, #324]	; (800295c <main+0x264>)
  hi2c1.Init.ClockSpeed = 100000;
 8002816:	4a52      	ldr	r2, [pc, #328]	; (8002960 <main+0x268>)
 8002818:	4e52      	ldr	r6, [pc, #328]	; (8002964 <main+0x26c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800281a:	6098      	str	r0, [r3, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800281c:	e883 0044 	stmia.w	r3, {r2, r6}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002820:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002824:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002826:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002828:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800282a:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800282c:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800282e:	4618      	mov	r0, r3
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002830:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002832:	f7fe ff5b 	bl	80016ec <HAL_I2C_Init>
 8002836:	b100      	cbz	r0, 800283a <main+0x142>
 8002838:	e7fe      	b.n	8002838 <main+0x140>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800283a:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi1.Instance = SPI1;
 800283e:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <main+0x270>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002840:	4a4a      	ldr	r2, [pc, #296]	; (800296c <main+0x274>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002842:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002844:	e883 0024 	stmia.w	r3, {r2, r5}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002848:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.CRCPolynomial = 10;
 800284c:	250a      	movs	r5, #10
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800284e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002850:	2228      	movs	r2, #40	; 0x28
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002852:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002854:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002856:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002858:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800285a:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285c:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800285e:	4618      	mov	r0, r3
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002860:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 8002862:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002864:	f7ff fb3e 	bl	8001ee4 <HAL_SPI_Init>
 8002868:	b100      	cbz	r0, 800286c <main+0x174>
 800286a:	e7fe      	b.n	800286a <main+0x172>
  hspi2.Instance = SPI2;
 800286c:	4b40      	ldr	r3, [pc, #256]	; (8002970 <main+0x278>)
 800286e:	4a41      	ldr	r2, [pc, #260]	; (8002974 <main+0x27c>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002870:	6058      	str	r0, [r3, #4]
  hspi2.Instance = SPI2;
 8002872:	601a      	str	r2, [r3, #0]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002874:	2220      	movs	r2, #32
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002876:	6098      	str	r0, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002878:	60d8      	str	r0, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800287a:	6118      	str	r0, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800287c:	6158      	str	r0, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800287e:	6198      	str	r0, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002880:	6218      	str	r0, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002882:	6258      	str	r0, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002884:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002886:	4618      	mov	r0, r3
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002888:	61da      	str	r2, [r3, #28]
  hspi2.Init.CRCPolynomial = 10;
 800288a:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800288c:	f7ff fb2a 	bl	8001ee4 <HAL_SPI_Init>
 8002890:	b100      	cbz	r0, 8002894 <main+0x19c>
 8002892:	e7fe      	b.n	8002892 <main+0x19a>
  huart1.Init.BaudRate = 9600;
 8002894:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002898:	250c      	movs	r5, #12
  huart1.Instance = USART1;
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <main+0x280>)
  huart1.Init.BaudRate = 9600;
 800289c:	4937      	ldr	r1, [pc, #220]	; (800297c <main+0x284>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800289e:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028a0:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028a2:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a4:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a6:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028a8:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 80028aa:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ae:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028b0:	f7ff fd60 	bl	8002374 <HAL_UART_Init>
 80028b4:	b100      	cbz	r0, 80028b8 <main+0x1c0>
 80028b6:	e7fe      	b.n	80028b6 <main+0x1be>
  huart2.Init.BaudRate = 115200;
 80028b8:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart2.Instance = USART2;
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <main+0x288>)
  huart2.Init.BaudRate = 115200;
 80028be:	4a31      	ldr	r2, [pc, #196]	; (8002984 <main+0x28c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028c0:	6098      	str	r0, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c2:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028c4:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c6:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c8:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028ca:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 80028cc:	e883 0044 	stmia.w	r3, {r2, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028d0:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028d2:	f7ff fd4f 	bl	8002374 <HAL_UART_Init>
 80028d6:	b100      	cbz	r0, 80028da <main+0x1e2>
 80028d8:	e7fe      	b.n	80028d8 <main+0x1e0>
  huart3.Instance = USART3;
 80028da:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <main+0x290>)
 80028dc:	4a2b      	ldr	r2, [pc, #172]	; (800298c <main+0x294>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028de:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028e0:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028e2:	6118      	str	r0, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e4:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e6:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028e8:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 80028ea:	e883 0044 	stmia.w	r3, {r2, r6}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028ee:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028f0:	f7ff fd40 	bl	8002374 <HAL_UART_Init>
 80028f4:	b100      	cbz	r0, 80028f8 <main+0x200>
 80028f6:	e7fe      	b.n	80028f6 <main+0x1fe>
  htim4.Instance = TIM4;
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <main+0x298>)
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <main+0x29c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fc:	6098      	str	r0, [r3, #8]
  htim4.Init.Prescaler = 64;
 80028fe:	e883 0014 	stmia.w	r3, {r2, r4}
  htim4.Init.Period = 65000;
 8002902:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002906:	60da      	str	r2, [r3, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002908:	2280      	movs	r2, #128	; 0x80
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290a:	6118      	str	r0, [r3, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800290c:	4618      	mov	r0, r3
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800290e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002910:	f7ff fc20 	bl	8002154 <HAL_TIM_Base_Init>
 8002914:	b100      	cbz	r0, 8002918 <main+0x220>
 8002916:	e7fe      	b.n	8002916 <main+0x21e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800291c:	a906      	add	r1, sp, #24
 800291e:	481c      	ldr	r0, [pc, #112]	; (8002990 <main+0x298>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002920:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002922:	f7ff fb25 	bl	8001f70 <HAL_TIM_ConfigClockSource>
 8002926:	b100      	cbz	r0, 800292a <main+0x232>
 8002928:	e7fe      	b.n	8002928 <main+0x230>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292a:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292c:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800292e:	a904      	add	r1, sp, #16
 8002930:	4817      	ldr	r0, [pc, #92]	; (8002990 <main+0x298>)
 8002932:	f7ff fc29 	bl	8002188 <HAL_TIMEx_MasterConfigSynchronization>
 8002936:	b378      	cbz	r0, 8002998 <main+0x2a0>
 8002938:	e7fe      	b.n	8002938 <main+0x240>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	40011000 	.word	0x40011000
 8002944:	40010800 	.word	0x40010800
 8002948:	40011400 	.word	0x40011400
 800294c:	20000228 	.word	0x20000228
 8002950:	40012400 	.word	0x40012400
 8002954:	200001c8 	.word	0x200001c8
 8002958:	40006400 	.word	0x40006400
 800295c:	20000174 	.word	0x20000174
 8002960:	40005400 	.word	0x40005400
 8002964:	000186a0 	.word	0x000186a0
 8002968:	20000334 	.word	0x20000334
 800296c:	40013000 	.word	0x40013000
 8002970:	20000084 	.word	0x20000084
 8002974:	40003800 	.word	0x40003800
 8002978:	20000258 	.word	0x20000258
 800297c:	40013800 	.word	0x40013800
 8002980:	200013b0 	.word	0x200013b0
 8002984:	40004400 	.word	0x40004400
 8002988:	20000134 	.word	0x20000134
 800298c:	40004800 	.word	0x40004800
 8002990:	200000dc 	.word	0x200000dc
 8002994:	40000800 	.word	0x40000800
  micros=0;
 8002998:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <main+0x3c8>)
 800299a:	6018      	str	r0, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 800299c:	4849      	ldr	r0, [pc, #292]	; (8002ac4 <main+0x3cc>)
 800299e:	f7ff fadc 	bl	8001f5a <HAL_TIM_Base_Start_IT>
  initADC();
 80029a2:	f000 f8e5 	bl	8002b70 <initADC>
  HAL_UART_Receive_IT(&huart3,RPi_UART.rx_buff,3);
 80029a6:	2203      	movs	r2, #3
 80029a8:	4947      	ldr	r1, [pc, #284]	; (8002ac8 <main+0x3d0>)
 80029aa:	4848      	ldr	r0, [pc, #288]	; (8002acc <main+0x3d4>)
 80029ac:	f7ff fd6c 	bl	8002488 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1,sim_rx,4);
 80029b0:	2204      	movs	r2, #4
 80029b2:	4947      	ldr	r1, [pc, #284]	; (8002ad0 <main+0x3d8>)
 80029b4:	4847      	ldr	r0, [pc, #284]	; (8002ad4 <main+0x3dc>)
 80029b6:	f7ff fd67 	bl	8002488 <HAL_UART_Receive_IT>
  activateBoiler();
 80029ba:	f000 f9a7 	bl	8002d0c <activateBoiler>
		OWTransmit();//HAL_UART_Transmit(&huart2,&convert_T,16,5000);
 80029be:	f000 f93d 	bl	8002c3c <OWTransmit>
		HAL_Delay(200);
 80029c2:	20c8      	movs	r0, #200	; 0xc8
 80029c4:	f7fe fa84 	bl	8000ed0 <HAL_Delay>
		OWReceive();
 80029c8:	f000 f94e 	bl	8002c68 <OWReceive>
	  RPi_SPI.tx_buff[2] = temp.raw;
 80029cc:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <main+0x3e0>)
 80029ce:	4e43      	ldr	r6, [pc, #268]	; (8002adc <main+0x3e4>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
	  adc.in[ V4_SENSE ] = ReadAnalogADC1( V4_SENSE );
 80029d2:	2004      	movs	r0, #4
	  RPi_SPI.tx_buff[2] = temp.raw;
 80029d4:	73f3      	strb	r3, [r6, #15]
	  adc.in[ V4_SENSE ] = ReadAnalogADC1( V4_SENSE );
 80029d6:	f000 f8d9 	bl	8002b8c <ReadAnalogADC1>
 80029da:	4c41      	ldr	r4, [pc, #260]	; (8002ae0 <main+0x3e8>)
 80029dc:	6160      	str	r0, [r4, #20]
	  adc.in[ RPI_3V3_SENSE ] = ReadAnalogADC1( RPI_3V3_SENSE );
 80029de:	2005      	movs	r0, #5
 80029e0:	f000 f8d4 	bl	8002b8c <ReadAnalogADC1>
 80029e4:	61a0      	str	r0, [r4, #24]
	  adc.in[ USB_5V_SENSE ] = ReadAnalogADC1( USB_5V_SENSE );
 80029e6:	2006      	movs	r0, #6
 80029e8:	f000 f8d0 	bl	8002b8c <ReadAnalogADC1>
 80029ec:	61e0      	str	r0, [r4, #28]
	  adc.in[ VIN_SENSE ] = ReadAnalogADC1( VIN_SENSE );
 80029ee:	2007      	movs	r0, #7
 80029f0:	f000 f8cc 	bl	8002b8c <ReadAnalogADC1>
 80029f4:	6220      	str	r0, [r4, #32]
	  adc.in[ A14 ] = ReadAnalogADC1( A14 );
 80029f6:	200e      	movs	r0, #14
 80029f8:	f000 f8c8 	bl	8002b8c <ReadAnalogADC1>
 80029fc:	63e0      	str	r0, [r4, #60]	; 0x3c
	  adc.in[ A15 ] = ReadAnalogADC1( A15 );
 80029fe:	200f      	movs	r0, #15
 8002a00:	f000 f8c4 	bl	8002b8c <ReadAnalogADC1>
 8002a04:	4625      	mov	r5, r4
 8002a06:	f104 0a80 	add.w	sl, r4, #128	; 0x80
 8002a0a:	f845 0f40 	str.w	r0, [r5, #64]!
		  adc.v[i] = ( adc.v[i] + adc.in[i]*(3.3/4095.0)*(3.9+2.2)/3.9 )/2.0;
 8002a0e:	f855 0c3c 	ldr.w	r0, [r5, #-60]
 8002a12:	f7fd fcef 	bl	80003f4 <__aeabi_i2d>
 8002a16:	a324      	add	r3, pc, #144	; (adr r3, 8002aa8 <main+0x3b0>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fd50 	bl	80004c0 <__aeabi_dmul>
 8002a20:	a323      	add	r3, pc, #140	; (adr r3, 8002ab0 <main+0x3b8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fd4b 	bl	80004c0 <__aeabi_dmul>
 8002a2a:	a323      	add	r3, pc, #140	; (adr r3, 8002ab8 <main+0x3c0>)
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	f7fd fe70 	bl	8000714 <__aeabi_ddiv>
 8002a34:	4680      	mov	r8, r0
 8002a36:	6868      	ldr	r0, [r5, #4]
 8002a38:	4689      	mov	r9, r1
 8002a3a:	f7fd fced 	bl	8000418 <__aeabi_f2d>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4640      	mov	r0, r8
 8002a44:	4649      	mov	r1, r9
 8002a46:	f7fd fb89 	bl	800015c <__adddf3>
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <main+0x3ec>)
 8002a4e:	f7fd fd37 	bl	80004c0 <__aeabi_dmul>
 8002a52:	f7fd ff47 	bl	80008e4 <__aeabi_d2f>
 8002a56:	f845 0f04 	str.w	r0, [r5, #4]!
	  for(i=0;i<16;i++)
 8002a5a:	45aa      	cmp	sl, r5
 8002a5c:	d1d7      	bne.n	8002a0e <main+0x316>
	  RPi_SPI.tx_buff[0] = (uint8_t)(adc.rpi_3v3>>8);
 8002a5e:	6823      	ldr	r3, [r4, #0]
	  for (int index = 0; index < (sizeof(requests) / sizeof(unsigned long)); index++) {
 8002a60:	2400      	movs	r4, #0
	  RPi_SPI.tx_buff[0] = (uint8_t)(adc.rpi_3v3>>8);
 8002a62:	121a      	asrs	r2, r3, #8
 8002a64:	7372      	strb	r2, [r6, #13]
	  sim_tx[0] = 'A';
 8002a66:	2241      	movs	r2, #65	; 0x41
	  RPi_SPI.tx_buff[1] = (uint8_t)adc.rpi_3v3;
 8002a68:	73b3      	strb	r3, [r6, #14]
	  sim_tx[0] = 'A';
 8002a6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <main+0x3f0>)
	    ot.reg[index].raw = sendRequest(requests[index]);
 8002a6c:	4e1f      	ldr	r6, [pc, #124]	; (8002aec <main+0x3f4>)
	  sim_tx[0] = 'A';
 8002a6e:	701a      	strb	r2, [r3, #0]
	  sim_tx[1] = 'T';
 8002a70:	2254      	movs	r2, #84	; 0x54
 8002a72:	705a      	strb	r2, [r3, #1]
	  sim_tx[2] = '\r';
 8002a74:	220d      	movs	r2, #13
 8002a76:	709a      	strb	r2, [r3, #2]
	  sim_tx[3] = '\n';
 8002a78:	220a      	movs	r2, #10
	    ot.reg[index].raw = sendRequest(requests[index]);
 8002a7a:	4d1d      	ldr	r5, [pc, #116]	; (8002af0 <main+0x3f8>)
	  sim_tx[3] = '\n';
 8002a7c:	70da      	strb	r2, [r3, #3]
	    ot.reg[index].raw = sendRequest(requests[index]);
 8002a7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002a82:	f000 f97a 	bl	8002d7a <sendRequest>
 8002a86:	eb05 1304 	add.w	r3, r5, r4, lsl #4
 8002a8a:	62d8      	str	r0, [r3, #44]	; 0x2c
	  for (int index = 0; index < (sizeof(requests) / sizeof(unsigned long)); index++) {
 8002a8c:	3401      	adds	r4, #1
	    HAL_Delay(300);
 8002a8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a92:	f7fe fa1d 	bl	8000ed0 <HAL_Delay>
	  for (int index = 0; index < (sizeof(requests) / sizeof(unsigned long)); index++) {
 8002a96:	2c0e      	cmp	r4, #14
 8002a98:	d1f1      	bne.n	8002a7e <main+0x386>
	  HAL_Delay(300);
 8002a9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a9e:	f7fe fa17 	bl	8000ed0 <HAL_Delay>
		OWTransmit();//HAL_UART_Transmit(&huart2,&convert_T,16,5000);
 8002aa2:	e78c      	b.n	80029be <main+0x2c6>
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	e734d9b4 	.word	0xe734d9b4
 8002aac:	3f4a680c 	.word	0x3f4a680c
 8002ab0:	66666666 	.word	0x66666666
 8002ab4:	40186666 	.word	0x40186666
 8002ab8:	33333333 	.word	0x33333333
 8002abc:	400f3333 	.word	0x400f3333
 8002ac0:	2000031c 	.word	0x2000031c
 8002ac4:	200000dc 	.word	0x200000dc
 8002ac8:	20000217 	.word	0x20000217
 8002acc:	20000134 	.word	0x20000134
 8002ad0:	20000320 	.word	0x20000320
 8002ad4:	20000258 	.word	0x20000258
 8002ad8:	2000020c 	.word	0x2000020c
 8002adc:	2000011c 	.word	0x2000011c
 8002ae0:	20000298 	.word	0x20000298
 8002ae4:	3fe00000 	.word	0x3fe00000
 8002ae8:	2000032a 	.word	0x2000032a
 8002aec:	20000008 	.word	0x20000008
 8002af0:	2000038c 	.word	0x2000038c

08002af4 <SystemClock_Config>:
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002af4:	2301      	movs	r3, #1
{
 8002af6:	b510      	push	{r4, lr}
 8002af8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002afa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002afc:	2310      	movs	r3, #16
 8002afe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002b00:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b02:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002b04:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002b06:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b0c:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b0e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002b10:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b12:	f7fe fe6b 	bl	80017ec <HAL_RCC_OscConfig>
 8002b16:	b100      	cbz	r0, 8002b1a <SystemClock_Config+0x26>
 8002b18:	e7fe      	b.n	8002b18 <SystemClock_Config+0x24>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b1a:	230f      	movs	r3, #15
 8002b1c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b22:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b24:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b26:	4621      	mov	r1, r4
 8002b28:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b2a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b2c:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b2e:	f7ff f825 	bl	8001b7c <HAL_RCC_ClockConfig>
 8002b32:	b100      	cbz	r0, 8002b36 <SystemClock_Config+0x42>
 8002b34:	e7fe      	b.n	8002b34 <SystemClock_Config+0x40>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b3a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b3c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002b3e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b40:	f7ff f8e6 	bl	8001d10 <HAL_RCCEx_PeriphCLKConfig>
 8002b44:	4604      	mov	r4, r0
 8002b46:	b100      	cbz	r0, 8002b4a <SystemClock_Config+0x56>
 8002b48:	e7fe      	b.n	8002b48 <SystemClock_Config+0x54>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b4a:	f7ff f8bb 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8002b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b52:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b56:	f7fe fc6f 	bl	8001438 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b5a:	2004      	movs	r0, #4
 8002b5c:	f7fe fc82 	bl	8001464 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b60:	4622      	mov	r2, r4
 8002b62:	4621      	mov	r1, r4
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7fe fc26 	bl	80013b8 <HAL_NVIC_SetPriority>
}
 8002b6c:	b014      	add	sp, #80	; 0x50
 8002b6e:	bd10      	pop	{r4, pc}

08002b70 <initADC>:

}

/* USER CODE BEGIN 4 */
void initADC(void){
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8002b70:	2200      	movs	r2, #0
	adcChannel.Rank = 1;
 8002b72:	2101      	movs	r1, #1
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <initADC+0x14>)



	  //ADC1
	  //HAL_ADC_MspInit(&hadc1);
	  HAL_ADC_Start(&hadc1);
 8002b76:	4804      	ldr	r0, [pc, #16]	; (8002b88 <initADC+0x18>)
	adcChannel.Channel = ADC_CHANNEL_0;//B
 8002b78:	601a      	str	r2, [r3, #0]
	adcChannel.Rank = 1;
 8002b7a:	6059      	str	r1, [r3, #4]
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b7c:	609a      	str	r2, [r3, #8]
	  HAL_ADC_Start(&hadc1);
 8002b7e:	f7fe ba79 	b.w	8001074 <HAL_ADC_Start>
 8002b82:	bf00      	nop
 8002b84:	200013f0 	.word	0x200013f0
 8002b88:	20000228 	.word	0x20000228

08002b8c <ReadAnalogADC1>:
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
	return HAL_ADC_GetValue(&hadc1);
}
int ReadAnalogADC1( uint32_t ch ){
	adcChannel.Channel = ch;//B
	adcChannel.Rank = 1;
 8002b8c:	2301      	movs	r3, #1
	adcChannel.Channel = ch;//B
 8002b8e:	490b      	ldr	r1, [pc, #44]	; (8002bbc <ReadAnalogADC1+0x30>)
int ReadAnalogADC1( uint32_t ch ){
 8002b90:	b510      	push	{r4, lr}
	adcChannel.Rank = 1;
 8002b92:	604b      	str	r3, [r1, #4]
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b94:	2300      	movs	r3, #0

	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8002b96:	4c0a      	ldr	r4, [pc, #40]	; (8002bc0 <ReadAnalogADC1+0x34>)
	adcChannel.Channel = ch;//B
 8002b98:	6008      	str	r0, [r1, #0]
	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8002b9a:	4620      	mov	r0, r4
	adcChannel.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b9c:	608b      	str	r3, [r1, #8]
	HAL_ADC_ConfigChannel(&hadc1, &adcChannel);//A4 / B
 8002b9e:	f7fe f9ad 	bl	8000efc <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7fe fa66 	bl	8001074 <HAL_ADC_Start>
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	6813      	ldr	r3, [r2, #0]
 8002bac:	079b      	lsls	r3, r3, #30
 8002bae:	d5fc      	bpl.n	8002baa <ReadAnalogADC1+0x1e>
	return HAL_ADC_GetValue(&hadc1);
 8002bb0:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <ReadAnalogADC1+0x34>)
}
 8002bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return HAL_ADC_GetValue(&hadc1);
 8002bb6:	f7fe b99d 	b.w	8000ef4 <HAL_ADC_GetValue>
 8002bba:	bf00      	nop
 8002bbc:	200013f0 	.word	0x200013f0
 8002bc0:	20000228 	.word	0x20000228

08002bc4 <OWReset>:
bool OWReset(void){
	uint8_t tx = 0xf0;
	uint8_t rx = 0;

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
 8002bc4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
bool OWReset(void){
 8002bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	huart2.Instance = USART2;
 8002bcc:	4c19      	ldr	r4, [pc, #100]	; (8002c34 <OWReset+0x70>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002bce:	270c      	movs	r7, #12
	huart2.Init.BaudRate = 9600;
 8002bd0:	6063      	str	r3, [r4, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd2:	2300      	movs	r3, #0
	huart2.Instance = USART2;
 8002bd4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8002c38 <OWReset+0x74>
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bd8:	4620      	mov	r0, r4
	huart2.Instance = USART2;
 8002bda:	f8c4 8000 	str.w	r8, [r4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bde:	60a3      	str	r3, [r4, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002be0:	60e3      	str	r3, [r4, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002be2:	6123      	str	r3, [r4, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002be4:	6167      	str	r7, [r4, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be6:	61a3      	str	r3, [r4, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	61e3      	str	r3, [r4, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bea:	f7ff fbc3 	bl	8002374 <HAL_UART_Init>
 8002bee:	4605      	mov	r5, r0
 8002bf0:	b100      	cbz	r0, 8002bf4 <OWReset+0x30>
 8002bf2:	e7fe      	b.n	8002bf2 <OWReset+0x2e>
	{
	  _Error_Handler(__FILE__, __LINE__);
	}

	huart2.Instance->DR = tx;
 8002bf4:	22f0      	movs	r2, #240	; 0xf0
 8002bf6:	6823      	ldr	r3, [r4, #0]
	HAL_Delay(10);
 8002bf8:	200a      	movs	r0, #10
	huart2.Instance->DR = tx;
 8002bfa:	605a      	str	r2, [r3, #4]
	HAL_Delay(10);
 8002bfc:	f7fe f968 	bl	8000ed0 <HAL_Delay>
	rx = huart2.Instance->DR;
 8002c00:	6823      	ldr	r3, [r4, #0]
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c02:	4620      	mov	r0, r4
	rx = huart2.Instance->DR;
 8002c04:	685e      	ldr	r6, [r3, #4]
	huart2.Init.BaudRate = 115200;
 8002c06:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	rx = huart2.Instance->DR;
 8002c0a:	b2f6      	uxtb	r6, r6
	huart2.Instance = USART2;
 8002c0c:	f8c4 8000 	str.w	r8, [r4]
	huart2.Init.BaudRate = 115200;
 8002c10:	6063      	str	r3, [r4, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c12:	60a5      	str	r5, [r4, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002c14:	60e5      	str	r5, [r4, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002c16:	6125      	str	r5, [r4, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002c18:	6167      	str	r7, [r4, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1a:	61a5      	str	r5, [r4, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1c:	61e5      	str	r5, [r4, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c1e:	f7ff fba9 	bl	8002374 <HAL_UART_Init>
 8002c22:	b100      	cbz	r0, 8002c26 <OWReset+0x62>
 8002c24:	e7fe      	b.n	8002c24 <OWReset+0x60>

	if(rx==0xf0)
		return false;

	return true;
}
 8002c26:	f1b6 00f0 	subs.w	r0, r6, #240	; 0xf0
 8002c2a:	bf18      	it	ne
 8002c2c:	2001      	movne	r0, #1
 8002c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c32:	bf00      	nop
 8002c34:	200013b0 	.word	0x200013b0
 8002c38:	40004400 	.word	0x40004400

08002c3c <OWTransmit>:

void OWTransmit(void){
 8002c3c:	b510      	push	{r4, lr}
	temp.reset = OWReset();
 8002c3e:	f7ff ffc1 	bl	8002bc4 <OWReset>
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <OWTransmit+0x20>)
 8002c44:	7098      	strb	r0, [r3, #2]
	if(temp.reset) HAL_UART_Transmit(&huart2,&convert_T,16,5000);
 8002c46:	b140      	cbz	r0, 8002c5a <OWTransmit+0x1e>
}
 8002c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(temp.reset) HAL_UART_Transmit(&huart2,&convert_T,16,5000);
 8002c4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c50:	2210      	movs	r2, #16
 8002c52:	4903      	ldr	r1, [pc, #12]	; (8002c60 <OWTransmit+0x24>)
 8002c54:	4803      	ldr	r0, [pc, #12]	; (8002c64 <OWTransmit+0x28>)
 8002c56:	f7ff bbbb 	b.w	80023d0 <HAL_UART_Transmit>
 8002c5a:	bd10      	pop	{r4, pc}
 8002c5c:	2000020c 	.word	0x2000020c
 8002c60:	0800331c 	.word	0x0800331c
 8002c64:	200013b0 	.word	0x200013b0

08002c68 <OWReceive>:
void OWReceive(void){
 8002c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t rx=0;
	uint8_t i=0;

	temp.reset = OWReset();
 8002c6c:	f7ff ffaa 	bl	8002bc4 <OWReset>
 8002c70:	4c1a      	ldr	r4, [pc, #104]	; (8002cdc <OWReceive+0x74>)
 8002c72:	70a0      	strb	r0, [r4, #2]
	if( temp.reset ){
 8002c74:	b378      	cbz	r0, 8002cd6 <OWReceive+0x6e>
		temp.raw = 0;
 8002c76:	2300      	movs	r3, #0
				HAL_UART_Transmit(&huart2,&read_scratch,16,5000);
 8002c78:	2210      	movs	r2, #16
		temp.raw = 0;
 8002c7a:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2,&read_scratch,16,5000);
 8002c7c:	4918      	ldr	r1, [pc, #96]	; (8002ce0 <OWReceive+0x78>)
 8002c7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c82:	4818      	ldr	r0, [pc, #96]	; (8002ce4 <OWReceive+0x7c>)
 8002c84:	f7ff fba4 	bl	80023d0 <HAL_UART_Transmit>
 8002c88:	2510      	movs	r5, #16

				for(i=0;i<16;i++){
					huart2.Instance->DR = 0xff;
 8002c8a:	27ff      	movs	r7, #255	; 0xff
 8002c8c:	4e15      	ldr	r6, [pc, #84]	; (8002ce4 <OWReceive+0x7c>)
					HAL_Delay(10);
					rx = huart2.Instance->DR;

					if (rx == 0xff) {
						temp.raw = (temp.raw>>1) | 0x8000;
 8002c8e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8002ce8 <OWReceive+0x80>
					huart2.Instance->DR = 0xff;
 8002c92:	6833      	ldr	r3, [r6, #0]
					HAL_Delay(10);
 8002c94:	200a      	movs	r0, #10
					huart2.Instance->DR = 0xff;
 8002c96:	605f      	str	r7, [r3, #4]
					HAL_Delay(10);
 8002c98:	f7fe f91a 	bl	8000ed0 <HAL_Delay>
					rx = huart2.Instance->DR;
 8002c9c:	6833      	ldr	r3, [r6, #0]
 8002c9e:	3d01      	subs	r5, #1
 8002ca0:	685b      	ldr	r3, [r3, #4]
					if (rx == 0xff) {
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2bff      	cmp	r3, #255	; 0xff
						temp.raw = (temp.raw>>1) | 0x8000;
 8002ca6:	8823      	ldrh	r3, [r4, #0]
 8002ca8:	bf0c      	ite	eq
 8002caa:	ea48 0353 	orreq.w	r3, r8, r3, lsr #1
					} else {
						temp.raw = temp.raw>>1;
 8002cae:	085b      	lsrne	r3, r3, #1
				for(i=0;i<16;i++){
 8002cb0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
						temp.raw = temp.raw>>1;
 8002cb4:	8023      	strh	r3, [r4, #0]
				for(i=0;i<16;i++){
 8002cb6:	d1ec      	bne.n	8002c92 <OWReceive+0x2a>
					}
				}
				//HAL_UART_Receive(&huart2,&scratch,16,2000);
				//HAL_UART_*/
				HAL_Delay(1);
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7fe f909 	bl	8000ed0 <HAL_Delay>
				temp.out = (temp.out + (int)(temp.raw>>4) )/2;
 8002cbe:	8820      	ldrh	r0, [r4, #0]
 8002cc0:	0900      	lsrs	r0, r0, #4
 8002cc2:	f7fd ff19 	bl	8000af8 <__aeabi_i2f>
 8002cc6:	6861      	ldr	r1, [r4, #4]
 8002cc8:	f7fd fe62 	bl	8000990 <__addsf3>
 8002ccc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002cd0:	f7fd ff66 	bl	8000ba0 <__aeabi_fmul>
 8002cd4:	6060      	str	r0, [r4, #4]
 8002cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000020c 	.word	0x2000020c
 8002ce0:	0800332c 	.word	0x0800332c
 8002ce4:	200013b0 	.word	0x200013b0
 8002ce8:	ffff8000 	.word	0xffff8000

08002cec <setIdleState>:
//OT
void initOT(void){

}
void setIdleState(void){
	HAL_GPIO_WritePin(OT_RXO_GPIO_Port, OT_RXO_Pin, GPIO_PIN_SET);
 8002cec:	2201      	movs	r2, #1
 8002cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cf2:	4801      	ldr	r0, [pc, #4]	; (8002cf8 <setIdleState+0xc>)
 8002cf4:	f7fe bcf4 	b.w	80016e0 <HAL_GPIO_WritePin>
 8002cf8:	40010800 	.word	0x40010800

08002cfc <setActiveState>:
}
void setActiveState(void){
	HAL_GPIO_WritePin(OT_RXO_GPIO_Port, OT_RXO_Pin, GPIO_PIN_RESET);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d02:	4801      	ldr	r0, [pc, #4]	; (8002d08 <setActiveState+0xc>)
 8002d04:	f7fe bcec 	b.w	80016e0 <HAL_GPIO_WritePin>
 8002d08:	40010800 	.word	0x40010800

08002d0c <activateBoiler>:
}
void activateBoiler(void){
 8002d0c:	b508      	push	{r3, lr}
	setIdleState();
 8002d0e:	f7ff ffed 	bl	8002cec <setIdleState>
	HAL_Delay(1000);
}
 8002d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 8002d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d1a:	f7fe b8d9 	b.w	8000ed0 <HAL_Delay>

08002d1e <sendBit>:
void sendBit(bool high){
 8002d1e:	b510      	push	{r4, lr}
	  if (high) setActiveState(); else setIdleState();
 8002d20:	4604      	mov	r4, r0
 8002d22:	b170      	cbz	r0, 8002d42 <sendBit+0x24>
 8002d24:	f7ff ffea 	bl	8002cfc <setActiveState>
	  delayMicros(500);
 8002d28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d2c:	f000 f864 	bl	8002df8 <delayMicros>
	  if (high) setIdleState(); else setActiveState();
 8002d30:	b154      	cbz	r4, 8002d48 <sendBit+0x2a>
 8002d32:	f7ff ffdb 	bl	8002cec <setIdleState>
	  delayMicros(500);
}
 8002d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  delayMicros(500);
 8002d3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d3e:	f000 b85b 	b.w	8002df8 <delayMicros>
	  if (high) setActiveState(); else setIdleState();
 8002d42:	f7ff ffd3 	bl	8002cec <setIdleState>
 8002d46:	e7ef      	b.n	8002d28 <sendBit+0xa>
	  if (high) setIdleState(); else setActiveState();
 8002d48:	f7ff ffd8 	bl	8002cfc <setActiveState>
 8002d4c:	e7f3      	b.n	8002d36 <sendBit+0x18>

08002d4e <sendFrame>:
void sendFrame(uint32_t request){
 8002d4e:	b538      	push	{r3, r4, r5, lr}
 8002d50:	4605      	mov	r5, r0
	  sendBit(true); //start bit
 8002d52:	2001      	movs	r0, #1
 8002d54:	f7ff ffe3 	bl	8002d1e <sendBit>
	  for (int i = 31; i >= 0; i--) {
 8002d58:	241f      	movs	r4, #31
	    sendBit( (request>>i & 1) );//bitRead(request, i));
 8002d5a:	fa25 f004 	lsr.w	r0, r5, r4
 8002d5e:	f000 0001 	and.w	r0, r0, #1
 8002d62:	f7ff ffdc 	bl	8002d1e <sendBit>
	  for (int i = 31; i >= 0; i--) {
 8002d66:	f114 34ff 	adds.w	r4, r4, #4294967295
 8002d6a:	d2f6      	bcs.n	8002d5a <sendFrame+0xc>
	  }
	  sendBit(true); //stop bit
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f7ff ffd6 	bl	8002d1e <sendBit>
	  setIdleState();
}
 8002d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  setIdleState();
 8002d76:	f7ff bfb9 	b.w	8002cec <setIdleState>

08002d7a <sendRequest>:
void printBinary(uint32_t val);
uint32_t sendRequest(uint32_t request){
 8002d7a:	b508      	push	{r3, lr}
	sendFrame(request);
 8002d7c:	f7ff ffe7 	bl	8002d4e <sendFrame>

	  if (!waitForResponse()) return 0;
 8002d80:	f000 f806 	bl	8002d90 <waitForResponse>
 8002d84:	b118      	cbz	r0, 8002d8e <sendRequest+0x14>

	  return readResponse();
}
 8002d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  return readResponse();
 8002d8a:	f000 b81f 	b.w	8002dcc <readResponse>
}
 8002d8e:	bd08      	pop	{r3, pc}

08002d90 <waitForResponse>:
bool waitForResponse(){
 8002d90:	b570      	push	{r4, r5, r6, lr}
	uint32_t time_stamp = HAL_GetTick();
 8002d92:	f7fe f897 	bl	8000ec4 <HAL_GetTick>
 8002d96:	4606      	mov	r6, r0
	  while (HAL_GPIO_ReadPin(OT_TXI_GPIO_Port,OT_TXI_Pin) != GPIO_PIN_SET) { //start bit
 8002d98:	4d0b      	ldr	r5, [pc, #44]	; (8002dc8 <waitForResponse+0x38>)
 8002d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d9e:	4628      	mov	r0, r5
 8002da0:	f7fe fc98 	bl	80016d4 <HAL_GPIO_ReadPin>
 8002da4:	2801      	cmp	r0, #1
 8002da6:	4604      	mov	r4, r0
 8002da8:	d105      	bne.n	8002db6 <waitForResponse+0x26>
	    if (HAL_GetTick() - time_stamp >= 1000) {
	      //Serial.println("Response timeout");
	      return false;
	    }
	  }
	  delayMicros(1000 * 1.25); //wait for first bit
 8002daa:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8002dae:	f000 f823 	bl	8002df8 <delayMicros>
	  return true;
 8002db2:	4620      	mov	r0, r4
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
	    if (HAL_GetTick() - time_stamp >= 1000) {
 8002db6:	f7fe f885 	bl	8000ec4 <HAL_GetTick>
 8002dba:	1b80      	subs	r0, r0, r6
 8002dbc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002dc0:	d3eb      	bcc.n	8002d9a <waitForResponse+0xa>
	      return false;
 8002dc2:	2000      	movs	r0, #0
}
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40010800 	.word	0x40010800

08002dcc <readResponse>:
uint32_t readResponse(){
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	2520      	movs	r5, #32
	  unsigned long response = 0;
 8002dd0:	2400      	movs	r4, #0
	  for (int i = 0; i < 32; i++) {
	    response = (response << 1) | HAL_GPIO_ReadPin(OT_TXI_GPIO_Port,OT_TXI_Pin);// digitalRead(OT_IN_PIN);
 8002dd2:	4e08      	ldr	r6, [pc, #32]	; (8002df4 <readResponse+0x28>)
 8002dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f7fe fc7b 	bl	80016d4 <HAL_GPIO_ReadPin>
 8002dde:	0064      	lsls	r4, r4, #1
 8002de0:	4304      	orrs	r4, r0
	    delayMicros(1000);
 8002de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002de6:	f000 f807 	bl	8002df8 <delayMicros>
	  for (int i = 0; i < 32; i++) {
 8002dea:	3d01      	subs	r5, #1
 8002dec:	d1f2      	bne.n	8002dd4 <readResponse+0x8>
	    Serial.print("t=");
	    Serial.print(response >> 8 & 0xFF);
	    Serial.println("");
	  }*/
	  return response;
}
 8002dee:	4620      	mov	r0, r4
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	bf00      	nop
 8002df4:	40010800 	.word	0x40010800

08002df8 <delayMicros>:

#pragma GCC push_options
#pragma GCC optimize ("O0")

void delayMicros(uint32_t t){
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	  //uint32_t tickstart = micros;
	volatile uint32_t wait = t*7;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]


	 /* while ( micros  < end)
	  {
	  }*/
	while (wait--){
 8002e0a:	bf00      	nop
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e5a      	subs	r2, r3, #1
 8002e10:	60fa      	str	r2, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1fa      	bne.n	8002e0c <delayMicros+0x14>

	  while((DWT->CYCCNT - DWT_START) < DWT_TOTAL)
	  {
	    //HAL_Notify_WDT();
	  }*/
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e20:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_MspInit+0x84>)
{
 8002e22:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e24:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e26:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	619a      	str	r2, [r3, #24]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e38:	f7fe faac 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f06f 000b 	mvn.w	r0, #11
 8002e42:	4611      	mov	r1, r2
 8002e44:	f7fe fab8 	bl	80013b8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f06f 000a 	mvn.w	r0, #10
 8002e4e:	4611      	mov	r1, r2
 8002e50:	f7fe fab2 	bl	80013b8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	f06f 0009 	mvn.w	r0, #9
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	f7fe faac 	bl	80013b8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	f06f 0004 	mvn.w	r0, #4
 8002e66:	4611      	mov	r1, r2
 8002e68:	f7fe faa6 	bl	80013b8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f06f 0003 	mvn.w	r0, #3
 8002e72:	4611      	mov	r1, r2
 8002e74:	f7fe faa0 	bl	80013b8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f06f 0001 	mvn.w	r0, #1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	f7fe fa9a 	bl	80013b8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e84:	2200      	movs	r2, #0
 8002e86:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	f7fe fa94 	bl	80013b8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e90:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <HAL_MspInit+0x88>)
 8002e92:	6853      	ldr	r3, [r2, #4]
 8002e94:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9e:	b003      	add	sp, #12
 8002ea0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010000 	.word	0x40010000

08002eac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002eac:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002eae:	6802      	ldr	r2, [r0, #0]
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_ADC_MspInit+0x50>)
{
 8002eb2:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d11f      	bne.n	8002ef8 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eb8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002ebc:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ebe:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	619a      	str	r2, [r3, #24]
 8002ec6:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec8:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002ed2:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed4:	480a      	ldr	r0, [pc, #40]	; (8002f00 <HAL_ADC_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002ed6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed8:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eda:	f7fe fb1b 	bl	8001514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8002ede:	23f3      	movs	r3, #243	; 0xf3
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee0:	a902      	add	r1, sp, #8
 8002ee2:	4808      	ldr	r0, [pc, #32]	; (8002f04 <HAL_ADC_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8002ee4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee6:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	f7fe fb14 	bl	8001514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eec:	a902      	add	r1, sp, #8
 8002eee:	4806      	ldr	r0, [pc, #24]	; (8002f08 <HAL_ADC_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ef0:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	f7fe fb0e 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ef8:	b006      	add	sp, #24
 8002efa:	bd10      	pop	{r4, pc}
 8002efc:	40012400 	.word	0x40012400
 8002f00:	40011000 	.word	0x40011000
 8002f04:	40010800 	.word	0x40010800
 8002f08:	40010c00 	.word	0x40010c00

08002f0c <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002f0e:	6802      	ldr	r2, [r0, #0]
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_CAN_MspInit+0x64>)
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d128      	bne.n	8002f68 <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f16:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002f1a:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1c:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f1e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002f22:	61da      	str	r2, [r3, #28]
 8002f24:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	4813      	ldr	r0, [pc, #76]	; (8002f74 <HAL_CAN_MspInit+0x68>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f34:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f36:	2300      	movs	r3, #0
 8002f38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3c:	f7fe faea 	bl	8001514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f44:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4c:	a902      	add	r1, sp, #8
 8002f4e:	4809      	ldr	r0, [pc, #36]	; (8002f74 <HAL_CAN_MspInit+0x68>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f50:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f52:	f7fe fadf 	bl	8001514 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <HAL_CAN_MspInit+0x6c>)
 8002f58:	6853      	ldr	r3, [r2, #4]
 8002f5a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002f5e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f66:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002f68:	b007      	add	sp, #28
 8002f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f6e:	bf00      	nop
 8002f70:	40006400 	.word	0x40006400
 8002f74:	40010c00 	.word	0x40010c00
 8002f78:	40010000 	.word	0x40010000

08002f7c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002f7e:	6802      	ldr	r2, [r0, #0]
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_I2C_MspInit+0x38>)
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d113      	bne.n	8002fae <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f86:	23c0      	movs	r3, #192	; 0xc0
 8002f88:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f8a:	2312      	movs	r3, #18
 8002f8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f8e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f90:	a902      	add	r1, sp, #8
 8002f92:	4809      	ldr	r0, [pc, #36]	; (8002fb8 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f96:	f7fe fabd 	bl	8001514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_I2C_MspInit+0x40>)
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002fa2:	61da      	str	r2, [r3, #28]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fae:	b007      	add	sp, #28
 8002fb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fb4:	40005400 	.word	0x40005400
 8002fb8:	40010c00 	.word	0x40010c00
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fc0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002fc2:	6803      	ldr	r3, [r0, #0]
 8002fc4:	4a2d      	ldr	r2, [pc, #180]	; (800307c <HAL_SPI_MspInit+0xbc>)
{
 8002fc6:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d12d      	bne.n	8003028 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fcc:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <HAL_SPI_MspInit+0xc0>)
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fce:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fd0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd2:	482c      	ldr	r0, [pc, #176]	; (8003084 <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fd8:	619a      	str	r2, [r3, #24]
 8002fda:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fdc:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002fe6:	2328      	movs	r3, #40	; 0x28
 8002fe8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff2:	f7fe fa8f 	bl	8001514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ff6:	2310      	movs	r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff8:	a902      	add	r1, sp, #8
 8002ffa:	4822      	ldr	r0, [pc, #136]	; (8003084 <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ffc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ffe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f7fe fa87 	bl	8001514 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003006:	4a20      	ldr	r2, [pc, #128]	; (8003088 <HAL_SPI_MspInit+0xc8>)

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003008:	2023      	movs	r0, #35	; 0x23
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800300a:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800300c:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800300e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003018:	4622      	mov	r2, r4
 800301a:	f7fe f9cd 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800301e:	2023      	movs	r0, #35	; 0x23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003020:	f7fe f9fe 	bl	8001420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003024:	b006      	add	sp, #24
 8003026:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8003028:	4a18      	ldr	r2, [pc, #96]	; (800308c <HAL_SPI_MspInit+0xcc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d1fa      	bne.n	8003024 <HAL_SPI_MspInit+0x64>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003030:	2400      	movs	r4, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003032:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800303a:	61da      	str	r2, [r3, #28]
 800303c:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303e:	4811      	ldr	r0, [pc, #68]	; (8003084 <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003048:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800304c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800304e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003052:	f7fe fa5f 	bl	8001514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800305a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003060:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003062:	a902      	add	r1, sp, #8
 8003064:	4807      	ldr	r0, [pc, #28]	; (8003084 <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003066:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003068:	f7fe fa54 	bl	8001514 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800306c:	2024      	movs	r0, #36	; 0x24
 800306e:	4622      	mov	r2, r4
 8003070:	4621      	mov	r1, r4
 8003072:	f7fe f9a1 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003076:	2024      	movs	r0, #36	; 0x24
 8003078:	e7d2      	b.n	8003020 <HAL_SPI_MspInit+0x60>
 800307a:	bf00      	nop
 800307c:	40013000 	.word	0x40013000
 8003080:	40021000 	.word	0x40021000
 8003084:	40010c00 	.word	0x40010c00
 8003088:	40010000 	.word	0x40010000
 800308c:	40003800 	.word	0x40003800

08003090 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM4)
 8003090:	6802      	ldr	r2, [r0, #0]
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_TIM_Base_MspInit+0x24>)
{
 8003094:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 8003096:	429a      	cmp	r2, r3
 8003098:	d10a      	bne.n	80030b0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800309a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	f042 0204 	orr.w	r2, r2, #4
 80030a4:	61da      	str	r2, [r3, #28]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030b0:	b002      	add	sp, #8
 80030b2:	4770      	bx	lr
 80030b4:	40000800 	.word	0x40000800

080030b8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80030ba:	6803      	ldr	r3, [r0, #0]
 80030bc:	4a3b      	ldr	r2, [pc, #236]	; (80031ac <HAL_UART_MspInit+0xf4>)
{
 80030be:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d127      	bne.n	8003114 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030c4:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <HAL_UART_MspInit+0xf8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c6:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80030c8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ca:	483a      	ldr	r0, [pc, #232]	; (80031b4 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80030cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d0:	619a      	str	r2, [r3, #24]
 80030d2:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030d4:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80030d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e8:	2303      	movs	r3, #3
 80030ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f7fe fa12 	bl	8001514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f4:	a904      	add	r1, sp, #16
 80030f6:	482f      	ldr	r0, [pc, #188]	; (80031b4 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030fa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fe:	f7fe fa09 	bl	8001514 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003102:	2025      	movs	r0, #37	; 0x25
 8003104:	4622      	mov	r2, r4
 8003106:	4621      	mov	r1, r4
 8003108:	f7fe f956 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800310c:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800310e:	f7fe f987 	bl	8001420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003112:	e01f      	b.n	8003154 <HAL_UART_MspInit+0x9c>
  else if(huart->Instance==USART2)
 8003114:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <HAL_UART_MspInit+0x100>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d11e      	bne.n	8003158 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800311a:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_UART_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800311e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	4824      	ldr	r0, [pc, #144]	; (80031b4 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003122:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003126:	61da      	str	r2, [r3, #28]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003132:	2304      	movs	r3, #4
 8003134:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313a:	2303      	movs	r3, #3
 800313c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313e:	f7fe f9e9 	bl	8001514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003142:	2308      	movs	r3, #8
 8003144:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003146:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003148:	a904      	add	r1, sp, #16
 800314a:	481a      	ldr	r0, [pc, #104]	; (80031b4 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	f7fe f9e0 	bl	8001514 <HAL_GPIO_Init>
}
 8003154:	b008      	add	sp, #32
 8003156:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8003158:	4a18      	ldr	r2, [pc, #96]	; (80031bc <HAL_UART_MspInit+0x104>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d1fa      	bne.n	8003154 <HAL_UART_MspInit+0x9c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_UART_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003160:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003162:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003164:	4816      	ldr	r0, [pc, #88]	; (80031c0 <HAL_UART_MspInit+0x108>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003166:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800316a:	61da      	str	r2, [r3, #28]
 800316c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316e:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8003170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003174:	9303      	str	r3, [sp, #12]
 8003176:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003182:	2303      	movs	r3, #3
 8003184:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003186:	f7fe f9c5 	bl	8001514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800318a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318e:	a904      	add	r1, sp, #16
 8003190:	480b      	ldr	r0, [pc, #44]	; (80031c0 <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003192:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003194:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003198:	f7fe f9bc 	bl	8001514 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800319c:	2027      	movs	r0, #39	; 0x27
 800319e:	4622      	mov	r2, r4
 80031a0:	4621      	mov	r1, r4
 80031a2:	f7fe f909 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031a6:	2027      	movs	r0, #39	; 0x27
 80031a8:	e7b1      	b.n	800310e <HAL_UART_MspInit+0x56>
 80031aa:	bf00      	nop
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40010800 	.word	0x40010800
 80031b8:	40004400 	.word	0x40004400
 80031bc:	40004800 	.word	0x40004800
 80031c0:	40010c00 	.word	0x40010c00

080031c4 <NMI_Handler>:
 80031c4:	4770      	bx	lr

080031c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80031c6:	e7fe      	b.n	80031c6 <HardFault_Handler>

080031c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80031c8:	e7fe      	b.n	80031c8 <MemManage_Handler>

080031ca <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80031ca:	e7fe      	b.n	80031ca <BusFault_Handler>

080031cc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80031cc:	e7fe      	b.n	80031cc <UsageFault_Handler>

080031ce <SVC_Handler>:
 80031ce:	4770      	bx	lr

080031d0 <DebugMon_Handler>:
 80031d0:	4770      	bx	lr

080031d2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80031d2:	4770      	bx	lr

080031d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80031d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d6:	f7fd fe69 	bl	8000eac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80031de:	f7fe b94d 	b.w	800147c <HAL_SYSTICK_IRQHandler>
	...

080031e4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80031e4:	4801      	ldr	r0, [pc, #4]	; (80031ec <SPI1_IRQHandler+0x8>)
 80031e6:	f7fe be0d 	b.w	8001e04 <HAL_SPI_IRQHandler>
 80031ea:	bf00      	nop
 80031ec:	20000334 	.word	0x20000334

080031f0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80031f0:	4801      	ldr	r0, [pc, #4]	; (80031f8 <SPI2_IRQHandler+0x8>)
 80031f2:	f7fe be07 	b.w	8001e04 <HAL_SPI_IRQHandler>
 80031f6:	bf00      	nop
 80031f8:	20000084 	.word	0x20000084

080031fc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031fc:	4801      	ldr	r0, [pc, #4]	; (8003204 <USART1_IRQHandler+0x8>)
 80031fe:	f7ff b9ab 	b.w	8002558 <HAL_UART_IRQHandler>
 8003202:	bf00      	nop
 8003204:	20000258 	.word	0x20000258

08003208 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003208:	4801      	ldr	r0, [pc, #4]	; (8003210 <USART3_IRQHandler+0x8>)
 800320a:	f7ff b9a5 	b.w	8002558 <HAL_UART_IRQHandler>
 800320e:	bf00      	nop
 8003210:	20000134 	.word	0x20000134

08003214 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <SystemInit+0x40>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <SystemInit+0x44>)
 8003222:	400a      	ands	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800322c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003230:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003238:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003240:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003242:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003246:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <SystemInit+0x48>)
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	f8ff0000 	.word	0xf8ff0000
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003260:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003262:	e003      	b.n	800326c <LoopCopyDataInit>

08003264 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003266:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003268:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800326a:	3104      	adds	r1, #4

0800326c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800326c:	480a      	ldr	r0, [pc, #40]	; (8003298 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003270:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003272:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003274:	d3f6      	bcc.n	8003264 <CopyDataInit>
  ldr r2, =_sbss
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003278:	e002      	b.n	8003280 <LoopFillZerobss>

0800327a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800327c:	f842 3b04 	str.w	r3, [r2], #4

08003280 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003282:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003284:	d3f9      	bcc.n	800327a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003286:	f7ff ffc5 	bl	8003214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800328a:	f000 f80f 	bl	80032ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800328e:	f7ff fa33 	bl	80026f8 <main>
  bx lr
 8003292:	4770      	bx	lr
  ldr r3, =_sidata
 8003294:	0800336c 	.word	0x0800336c
  ldr r0, =_sdata
 8003298:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800329c:	20000044 	.word	0x20000044
  ldr r2, =_sbss
 80032a0:	20000044 	.word	0x20000044
  ldr r3, = _ebss
 80032a4:	200013fc 	.word	0x200013fc

080032a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032a8:	e7fe      	b.n	80032a8 <ADC1_2_IRQHandler>
	...

080032ac <__libc_init_array>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	2500      	movs	r5, #0
 80032b0:	4e0c      	ldr	r6, [pc, #48]	; (80032e4 <__libc_init_array+0x38>)
 80032b2:	4c0d      	ldr	r4, [pc, #52]	; (80032e8 <__libc_init_array+0x3c>)
 80032b4:	1ba4      	subs	r4, r4, r6
 80032b6:	10a4      	asrs	r4, r4, #2
 80032b8:	42a5      	cmp	r5, r4
 80032ba:	d109      	bne.n	80032d0 <__libc_init_array+0x24>
 80032bc:	f000 f81a 	bl	80032f4 <_init>
 80032c0:	2500      	movs	r5, #0
 80032c2:	4e0a      	ldr	r6, [pc, #40]	; (80032ec <__libc_init_array+0x40>)
 80032c4:	4c0a      	ldr	r4, [pc, #40]	; (80032f0 <__libc_init_array+0x44>)
 80032c6:	1ba4      	subs	r4, r4, r6
 80032c8:	10a4      	asrs	r4, r4, #2
 80032ca:	42a5      	cmp	r5, r4
 80032cc:	d105      	bne.n	80032da <__libc_init_array+0x2e>
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032d4:	4798      	blx	r3
 80032d6:	3501      	adds	r5, #1
 80032d8:	e7ee      	b.n	80032b8 <__libc_init_array+0xc>
 80032da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032de:	4798      	blx	r3
 80032e0:	3501      	adds	r5, #1
 80032e2:	e7f2      	b.n	80032ca <__libc_init_array+0x1e>
 80032e4:	08003364 	.word	0x08003364
 80032e8:	08003364 	.word	0x08003364
 80032ec:	08003364 	.word	0x08003364
 80032f0:	08003368 	.word	0x08003368

080032f4 <_init>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

08003300 <_fini>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr
